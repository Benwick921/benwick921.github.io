{
    "note":"title must match route name in App.js",
    "title":"I Hacked My WiFi",
    "tags":["security", "networking", "wifi","cracking","password","aircrack","debian"],
    "date":"27/06/2023",
    "path":"i-hacked-my-wifi",
    "location": "./blog/",
    "banner":"blog/ihackedmywifi/banner.webp",
    "type":"blog",
    "search":[
        {
            "section": "Introduction",
            "description": "This section introduces the decision to revive an old PC with Debian and test Wi-Fi security by attempting to crack Wi-Fi, highlighting the need for Linux root privileges for network security tasks."
        },
        {
            "section": "Requirements",
            "description": "This section outlines the essential tools for Wi-Fi cracking, including Aircrack-ng for network monitoring and John the Ripper for brute force attacks, explaining their installation on Debian and Kali Linux."
        },
        {
            "section": "Find wireless interface name",
            "description": "This part covers how to identify the wireless interface name using commands like `iwconfig` and alternatives, ensuring proper network setup before Wi-Fi cracking."
        },
        {
            "section": "Kill interfering processes",
            "description": "This section explains the importance of stopping interfering processes using `airmon-ng check kill` before enabling monitor mode for effective Wi-Fi traffic monitoring."
        },
        {
            "section": "Enable monitor mode",
            "description": "Describes how to enable monitor mode with `airmon-ng start`, allowing the wireless interface to capture all traffic on a specific channel, crucial for network packet analysis."
        },
        {
            "section": "Discover access point",
            "description": "This section details discovering nearby access points and capturing wireless packets with `airodump-ng`, essential for gathering data from target networks."
        },
        {
            "section": "Save data to file",
            "description": "Explains saving captured wireless data to files using `airodump-ng -w`, setting up files for later analysis and decryption attempts."
        },
        {
            "section": "Deauthentication",
            "description": "Discusses the use of `aireplay-ng –deauth` to disconnect devices, forcing them to reconnect and send a hashed password, which is crucial for capturing the WPA handshake."
        },
        {
            "section": "Crack the password",
            "description": "This final section explores password-cracking methods, including dictionary attacks with `aircrack-ng` and brute force using John the Ripper, detailing file conversion steps to make captured data compatible with cracking tools."
        }
    ],    
    "body":[
        {
            "id":"I Hacked My WiFi",
            "title":"<h1> <span style=\"color:#da1953\">I Ha</span>cked My WiFi</h1><hr>",
            "body":[
                {
                    "id":"banner",
                    "title":"",
                    "body":[
                        "<img src=\"/cyber/blog/ihackedmywifi/banner.webp\" alt=\"\">"
                    ]
                },
                {
                    "id":"Introduction",
                    "title":"<hr><h2> <span style=\"color:#da1953\">Int</span>roduction</h2>",
                    "body":[
                        "<p> Recently I decided to bring my 9 years old pc back to life. I opted for Debian as the operating system due to the very minimal system specifications, and therefore perfect for my case. After a painstakingly long time taken for the installation of Debian, I decided to try to crack my WI-FI just to tinker maybe due to a little bit of nostalgia, and a little just to test my Wi-Fi security, (Note all commands launched from now on need root privileges. To get the privileges just type su – and enter the password to become root.)</p>"
                    ]
                },
                {
                    "id":"Requierements",
                    "title":"<h2 id=\"REQ\"> <span style=\"color:#da1953\">Req</span>uirements </h2>",
                    "body":[
                        "<p>I need to install Aircrack-ng to perform the attack and JTR (John The Ripper) to perform brute force cracking, unless I am in Kali Linux I will install by typing apt install aircrack-ng and for JTR I suggest using the one installed on Kali Linux that works out of the box.</p>"
                    ]
                },
                {
                    "id":"Find wireless interface name",
                    "title":"<h2> <span style=\"color:#da1953\">Fin</span>d wireless interface name </h2>",
                    "body":[
                        "<p>To find the name of the wireless interface I run <code>iwconfig</code>.</p>",
                        "<p><img src=\"/cyber/blog/ihackedmywifi/iwconfig.png\" alt=\"iwconfig\"></p>",
                        "<p>but any other commands for networking will work fine, such as <code>ifconfig</code> (which is deprecated now use <code>ip address</code> / <code>ip add</code> / <code>ip a</code>).</p>",
                        "<p><img src=\"/cyber/blog/ihackedmywifi/ipa.png\" alt=\"ip a\"></p>",
                        "<p>I do not know why but, in my case, I have a very strange name (wlp2s0b1) I would have expected to see something like wlan0.</p>"
                    ]
                },
                {
                    "id":"Kill interfering processes",
                    "title":"<h2> <span style=\"color:#da1953\">Kil</span>l interfering processes </h2>",
                    "body":[
                        "<p>Before enabling monitor mode, we need to kill interfering processes.</p>",
                        "<p>To check which process might interfere run <code>airmon-ng check</code>.</p>",
                        "<p><img src=\"/cyber/blog/ihackedmywifi/check.png\" alt=\"airmon-ng check\"></p>",
                        "<p>To kill the interfering processes run <code>airmon-ng check kill</code> or kill them manually.</p>",
                        "<img src=\"/cyber/blog/ihackedmywifi/checkkill.png\" alt=\"airmon-ng check kill\">"
                    ]
                },
                {
                    "id":"Enable monitor mode",
                    "title":"<h2> <span style=\"color:#da1953\">Ena</span>ble monitor mode </h2>",
                    "body":[
                        "<p>Monitor mode allows a computer with a wireless network interface controller to monitor all traffic received on a given wireless channel.</p>",
                        "<p>To enable monitor mode type <code>airmon-ng start wlp2s0b1</code>.</p>",
                        "<p><img src=\"/cyber/blog/ihackedmywifi/startwlan0.png\" alt=\"start wlan\"></p>",
                        "<p>Now a new name has been assigned to the interface (wlp2s0b1mon) and from now on I will use that.</p>"
                    ]
                },
                {
                    "id":"Discover access point",
                    "title":"<h2> <span style=\"color:#da1953\">Dis</span>cover Access Point </h2>",
                    "body":[
                        "<p>To discover surrounding access point type <code>airodump-ng wlp2s0b1mon</code>.</p>",
                        "<p><img src=\"/cyber/blog/ihackedmywifi/airodumpvlan0.png\" alt=\"airodump vlan\"></p>",
                        "<p>Now we will start to catch all the wireless packets and gather data from the networks.</p>",
                        "<p>From this step onward we need to remember the victim (me) Wi-Fi channel, in my case is 1.</p>",
                        "<p><span style=\"color:#FFC107\">This terminal must never be closed as it will be used to find out if we have successfully established the 4-way handshake which contains the password hash for authentication.</span></p>",
                        "<p><span style=\"color:#FFC107\">The next step will be done in another window.</span></p>"
                    ]
                },
                {
                    "id":"Save data to file",
                    "title":"<h2> <span style=\"color:#da1953\">Sav</span>e data to file </h2>",
                    "body":[
                        "<p>To save data in files we need to use the same command we use in step 4 with a different option.</p>",
                        "<p><code>airodump-ng -c [channel] –bssid [bssid of victim wifi] -w [path to write files] wlp2s0b1mon[interface]</code></p>",
                        "<p><img src=\"/cyber/blog/ihackedmywifi/savefilecap.png\" alt=\"save file\"></p>",
                        "<p>The result of the command will be something like this.</p>",
                        "<p><img src=\"/cyber/blog/ihackedmywifi/safilecap1.png\" alt=\"save file\"></p>",
                        "<p>And it will also create files on the given path (in my case the current directory).</p>",
                        "<p><img src=\"/cyber/blog/ihackedmywifi/savefilecap2.png\" alt=\"save file\"></p>",
                        "<p><span style=\"color:#FFC107\">Same as for step 4 I leave the window open and the next operations will be done in a further third window.</span></p>"
                    ]
                },
                {
                    "id":"Deauthentication",
                    "title":"<h2> <span style=\"color:#da1953\">Dea</span>uthentication </h2>",
                    "body":[
                        "<p>The goal of this phase is to disconnect all the devices connected to the Wi-Fi so that when they reconnect, they will send the password under the hash signature to the router and then we can capture it to crack it.</p>",
                        "<p>The channel used is the same as the previous one where the victim is (1).</p>",
                        "<p>To do so the command is <code>aireplay-ng –deauth 1 -a [victim BSSID] wlp2s0b1mon</code>.</p>",
                        "<p><img src=\"/cyber/blog/ihackedmywifi/deauth1.png\" alt=\"deauthentication\"></p>",
                        "<p>It will establish the handshake alongside the hash of the password and the same in the file previously set.</p>",
                        "<p>On my first try even if everything went well for some reason Aircrack-ng didn’t find the handshake in the .cap file so just to be sure I tend to repeat this step a few times.</p>",
                        "<p>If we correctly establish the handshake, I will see it in the window where I executed<br><code>airodump-ng -c [channel] –bssid [bssid of victim wifi] -w [path to write files] wlp2s0b1mon[interface]</code></p>",
                        "<p><img src=\"/cyber/blog/ihackedmywifi/checkhandshake.png\" alt=\"check handshake\"></p>",
                        "<p>Sometimes you might get a message where the network interface and the victim’s Wi-Fi are in different channels, don’t panic just run the command again and again until you get it!</p>",
                        "<p><img src=\"/cyber/blog/ihackedmywifi/differentchannels.png\" alt=\"channel\"></p>",
                        "<p>You might never get the handshake containing the hash if no devices are connected! Don’t lose your hope. In this case, you need to wait until someone comes and hopefully connects to the Wi-Fi.</p>"
                    ]
                },
                {
                    "id":"Crack the password",
                    "title":"<h2> <span style=\"color:#da1953\">Ste</span>p 7: Crack the password </h2>",
                    "body":[
                        "<p>There are a few methods to crack the password the first method I tried is the dictionary attack, to perform it execute<br><code>aircrack-ng -b [victim BSSID] -w [wordlistpath] [path to .cap file]</code></p>",
                        "<p>I created a tiny wordlist containing my password for testing purposes, in a real world-scenario, I would use good wordlists, not necessarily big but good and more than one probably.</p>",
                        "<p>The .cap file is automatically created on a given path to save the files in step 5.</p>",
                        "<p><img src=\"/cyber/blog/ihackedmywifi/cracked.png\" alt=\"cracked\"></p>",
                        "<p>What if the password is not in the wordlist? I have to try different types of attacks like brute force.</p>",
                        "<p>To do the brute force attack I moved to my Kali Linux because it has JTR (John The Ripper) installed properly, which is my favourite cracking program, and with all its features which include the cracking of wpa keys.</p>",
                        "<p>To let JTR to be able to crack a WPA handshake I need to convert the .pcap file to a proper format, the first thing is to convert the pcap file into a .hccap file, to do so we will use aircrack-ng: <code>aircrack-ng [.pcap file] -J [filename]</code></p>",
                        "<p><img src=\"/cyber/blog/ihackedmywifi/pcap2hccap.jpg\" alt=\"pcap2hhcap\"></p>",
                        "<p>Now I will convert the .hccap file into a a file that JTR can understand and crack:<br><code>hccap2john [.hccap file] &gt; [filename]</code></p>",
                        "<p>At this point, we can use any mode JTR has to crack the password:<br><code>john [optional mode] [file]</code></p>",
                        "<p><img src=\"/cyber/blog/ihackedmywifi/jtr.jpg\" alt=\"john the ripper\"></p>",
                        "<p>To see all the modes avalaible I suggesto to look the manual of JTR.</p>"
                    ]
                }
            ]
        }
    ]   
}