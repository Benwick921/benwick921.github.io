{
    "note":"title must match route name in App.js",
    "title":"Pickle Rick",
    "path":"pickle-rick",
    "tags":["easy","security", "ctf", "bash", "web","linux","thm"],
    "date":"11/08/2024",
    "location": "./writeup/",
    "banner":"writeup/picklerick/banner.gif",
    "type":"writeup",
    "search":[
        {
            "section":"Enumeration",
            "description":"Sccanning with Nmap and discovering port 22 SSH and port 80 HTTP open"
        },
        {
            "section":"Enumeration",
            "description":"Directory brute forcing with Gobuster using seclist wordlist and -x option for file extentions"
        },
        {
            "section":"Restricted SHELL",
            "description":"Privilege escalation (privesc) by listing allowed command executable with sudo"
        },
        {
            "section":"Restricted SHELL",
            "description":"Bypassing restricted shell to read ingredient files"
        }
    ],
    "body":[
        {
            "id":"Pickle Rick",
            "title":"<h1><span style=\"color:#da1953\">Pic</span>kle Rick</h1><hr>",
            "body":[
                {
                    "id":"banner",
                    "title":"",
                    "body":[
                        "<img src=\"/cyber/writeup/picklerick/banner.gif\" alt=\"\">",
                        "<p>This Rick and Morty-themed challenge requires you to exploit a web server and find three ingredients to help Rick make his potion and transform himself back into a human from a pickle.</p>"
                    ]
                },
                {
                    "id":"Enumeration",
                    "title":"<hr><h1><span style=\"color:#da1953\">Enu</span>meration</h1>",
                    "body":[
                        "<p>The first step in the enumeration that I do is always enumerating the box with <code>Nmap</code>. The command that I used is: <code>nmap -sC -V -oN nmap-script &lt;ip&gt; -p-</code> I always use the flag <code>-oN</code> to save the Nmap result for later review. The rest Nmap gave me was:</p>",
                        "<p><pre>┌──(kali㉿kali)-[192.168.213.128]-[13:48:38 12/09/2024]-[~/thm/pickle-rick] <br>└─$ nmap -sC -sV -oN snmap-scan [ip] -p- <br># Nmap 7.94SVN scan initiated Thu Sep 12 13:06:31 2024 as: nmap -sC -sV -oN nmap-scan 10.10.96.74<br>Nmap scan report for 10.10.96.74<br>Host is up (0.023s latency).<br>Not shown: 998 closed tcp ports (conn-refused)<br>PORT   STATE SERVICE VERSION<br>22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0)<br>| ssh-hostkey: <br>|   3072 b7:33:d5:d9:db:e0:81:a9:f8:5d:a4:4f:36:16:a3:4a (RSA)<br>|   256 6a:e2:88:84:d1:1a:b0:8b:bd:e3:de:20:99:e9:bb:f8 (ECDSA)<br>|_  256 15:ba:da:57:13:f0:27:8b:0a:ab:c5:f2:1e:16:41:21 (ED25519)<br>80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))<br>|_http-title: Rick is sup4r cool<br>|_http-server-header: Apache/2.4.41 (Ubuntu)<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br># Nmap done at Thu Sep 12 13:06:39 2024 -- 1 IP address (1 host up) scanned in 7.96 seconds<br><br></pre></p>",
                        "<p>So now we have two services: SSH and HTTP. At this point, I know that I can't use SSH because I do not have any credentials or SSH keys, so it's better not to even try it. Let's go with the HTTP service. The best way is to paste the IP address into a browser to check the website.</p>",
                        "<p><img src=\"/cyber/writeup/picklerick/9b0024882c2a483abf006a957b0cd521.png\"></p>",
                        "<p>It is a simple page with a description and an image. At first glance, it seems nothing is interesting. From here we can do a few things to enumerate the website:</p>",
                        "<ol><li>check source code</li><li>check cookies</li><li>check eventual javascript files</li><li>monitor the communication with BurpSuite</li><li>directory brute forcing</li><li>the 6th idea came into my mind later, not immediately. I will discuss it later in the writeup</li></ol>",
                        "<p>To be more efficient I run first of all directory brute forcing with <code>gobuster</code>:</p>",
                        "<pre>gobuster dir -u http://10.10.181.218/ -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt </pre>",
                        "<p>And the rest was the discovery of the <code>/asset</code> directory path, which was very disappointing.<br>",
                        "<p><img src=\"/cyber/writeup/picklerick/e560f71aeb5d4d07936f68004469d3f6.png\"></p>",
                        "<p>I will get back to this result later.</p>",
                        "<p>While <code>gobuster</code> was running I was assessing the website manually (points 1, 2 and 3 previously mentioned). Checking the source code I found a comment exposing the user name.</p>",
                        "<img src=\"/cyber/writeup/picklerick/077a28ad3abb4749a3d763cc5e7042c1.png\">",
                        "<p>Easy peasy, I got the username!</p>",
                        "<img src=\"/cyber/writeup/picklerick/ef9f5ac16ca74257b228917e48af302c.png\">",
                        "<p>The first step is done! The second step is checking the cookies. But the site has no cookies.</p>",
                        "<p><img src=\"/cyber/writeup/picklerick/2aa969a5929c43c1a2a3e89c811623b6.png\"></p>",
                        "<p><img src=\"/cyber/writeup/picklerick/a47731de72cc4febafb98bcf5a79189b.png\"</p>",
                        "<p>The third step is to check any javascript files. But there were only JS libraries used to create the website, the standard bootstrap JS files, nothing interesting.</p>",
                        "<p><img src=\"/cyber/writeup/picklerick/e8a1b12ebba9478f916b2a1cd0c91a87.png\"</p>",
                        "<p><img src=\"/cyber/writeup/picklerick/b09716ab63b74464975dcf6966a87eb1.png\"</p>",
                        "<p>At this point I started to lose hope, how can an easy box put me in such a difficult position?</p>",
                        "<img src=\"/cyber/writeup/picklerick/250b2e46e84346a78c088cfd979a282b.png\">",
                        "<p>In the meantime, BurpSuite logged a few interactions with the website but I did not find anything interesting. I was hoping to find some GET and POST parameters like user or admin parameter to elevate my privilege but no such thing was implemented.</p>",
                        "<img src=\"/cyber/writeup/picklerick/90ae686a1e294f6db722c52140bf9bc9.png\">",
                        "<p>I even tried manually to access some paths as you can see from the screenshot such as</p>",
                        "<ul><li>/management</li><li>/panel</li><li>/apache</li><li>/console</li></ul>",
                        "<p>And none of them worked. At this moment I remembered about <em>robots.txt</em> the 6th point that was missing from the above list. The <b>robots.txt</b> disclosed an alphabetic string: <strong>Wubbalubbadubdub</strong>. As I found the username earlier maybe this could be the password, but I didn't give it for granted it can be a rabbit hole.</p>",
                        "<p>Having these 2 findings, the username and a possible password I started to play for almost 1 hour with the SSH service trying to log in. It gave me several error messages and I tried to fix them and eventually I gave up on SSH and went back to the website. The SSH service was a rabbit hole and it lost 1 hour of my time but it enhanced my ability to detect rabbit holes. It was not totally useless and I learnt a few things about SSH config files as well, who knows it may came in handy in future challenges.</p>",
                        "<img src=\"/cyber/writeup/picklerick/e09a517beea740128d38c8df0757f75a.png\">",
                        "<p>At this point, I checked the <code >gobuster</code> result and it shows <code>/asset</code>. By accessing it I can see some static files like image files, javascript and CSS.</p>",
                        "<img src=\"/cyber/writeup/picklerick/e31eb957e2fc451ca5a90e5a445c8809.png\">",
                        "<p>I admit at this point I was tempted to take a peek at the solution but I resisted! So far I have checked all the 6 points listed. Given the number of images, I thought there may be some steganography challenge, so I downloaded a few images and I tried to see if the images had some information in string format inside the images with the command <code>strings</code>: <code>strings &lt;filename&gt;</code>; <code>strings portal.jpg</code> Also this attempt failed.</p>",
                        "<img src=\"/cyber/writeup/picklerick/9b987dea25f4429fa5952f0035e4df6a.png\">",
                        "<p>I searched on Google for <em>web enumeration</em> and read a few pages about people doing web enumeration of other challenges and I noticed they were using <code>seclists</code> wordlist. I immediately installed <code>seclists</code> by typing <code>sudo apt install seclists</code>. I ran Gobuster again, and while I was reading the available options, one in particular caught my eye, the <code>-x</code> that I used to use. This option looks for files ending with a certain extension. <code>-x,  --extensions string /t/t File extension(s) to search for</code>. I returned to Gobuster with pretty much identical flags and the same wordlist this time from a different path and I added <code>-x txt,php</code>. Now why did I add .php? It was just an educated guess as most of the boxes that I played had PHP. I was also tempted to add more extensions such as .pdf, .js, and .css but they are not useful to me and they will certainly make it run slower. So the command I ran was:</p>",
                        "<p><code>gobuster dir -u http://10.10.61.243/ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt -x txt,php</code> This time the result was very different. I did not let Gobuster go through the whole wordlist as it started to give me errors so I stopped it.</p>",
                        "<img src=\"/cyber/writeup/picklerick/2643da1c9c5d48868aeb26ed518ecba4.png\">",
                        "<p>This new finding brought immediately my morale up! I tried <b>portal.php</b> and <b>login.php</b> both ended up in <b>login.php</b>. Inserting the username and the string <strong>Wubbalubbadubdub</strong> logged me into a page where I can run bash commands.</p>",
                        "<img src=\"/cyber/writeup/picklerick/c6f964976a24417083e1754a280b9b71.png\"><br>"
                    ]
                },
                {
                    "id":"Restricted SHELL",
                    "title":"<h1><span style=\"color:#da1953\">Res</span>tricted SHELL</h1>",
                    "body":[
                        "<p>Now is the time to read the file and search for the ingredients. First thing is <code>ls</code> list the directory to see what files it contains and immediately I can see it has a file named <strong>Sup3rS3cretPickl3Ingred.txt</strong>. Trying to <code>cat</code> it I receive the following error message.</p>",
                        "<img src=\"/cyber/writeup/picklerick/0bbba0bcb55049eb9a3689f871cb918c.png\">",
                        "<p>Damn! I can't use the <code>cat</code> command! Wait a minute... I know more commands to achieve similar results thanks to my experiences with Linux and they are:</p>",
                        "<ul><li>more</li><li>less</li><li>strings</li><li>vim</li><li>nano</li><li>vi</li></ul>",
                        "<p>Note that I listed 3 text editors as well, my idea was to try to open the file with one of the text editors to see the content. Among all the commands listed the command <code>less</code> worded for the first ingredient and later on I found out that the command <code>strings</code> works for all the ingredients so I will use the command <code>strings</code>.</p>",
                        "<p>The first ingredient is done now tome to look for the other two. After exploring the system I found out that the second ingredient is in Rick's home directory.</p>",
                        "<img src=\"/cyber/writeup/picklerick/88916f0602614fc687c881f91984417a.png\">",
                        "<p>Let's try to read it with <code>strings</code>. Trying to read the file with the following command <code>strings /home/rick/second ingredient</code> gives me empty results.</p>",
                        "<img src=\"/cyber/writeup/picklerick/69dbeb99663748c0a095197d7540af6d.png\">",
                        "<p>How come? I know it! Thanks to a bash CTF that I have done when I started my journey in the Cybersecurity field I had to face a similar challenge. The CTF is called <strong>OverTheWire</strong> and the level was <strong>Bandit</strong>. The issue is with the space in the file name. By wrapping it with quotes it solves the issue. <code>strings &quot;/home/rick/second ingredients&quot;</code></p>",
                        "<img src=\"/cyber/writeup/picklerick/972094d0419940e8be2c04439dfb37de.png\">",
                        "<p>Now it's time to find the 3rd ingredient. After spending some time I tried to access the root folder but I could not. So as I used to do during privilege escalation in other boxes I ran <code>sudo -l</code> and surprisingly I had the following output.</p>",
                        "<img src=\"/cyber/writeup/picklerick/d1bc4148d2cf4d07b6fc17add34f4021.png\">",
                        "<p>I can run any command as sudo! So the command that I have to run is <code>sudo ls /root</code> and I can see the name of the 3rd ingredient.</p>",
                        "<img src=\"/cyber/writeup/picklerick/2f20d7cadd9f4c22b273844bad5fff5b.png\">",
                        "<p>Now let's try to read it <code>sudo strings /root/3rd.txt</code></p>",
                        "<img src=\"/cyber/writeup/picklerick/53c856177d8b4a089b6dfca3cebc9553.png\">",
                        "<p>And finally here is the 3rd ingredient.</p>",
                        "<img src=\"/cyber/writeup/picklerick/1fa8d0f9018b44588079e66b888732ee.png\"><br>"
                    ]
                },
                {
                    "id":"Takeaway",
                    "title":"<h1><span style=\"color:#da1953\">Tak</span>eaway</h1>",
                    "body":[
                        "<p>During the challenge at a certain point, I thought I had to obtain a reverse shell and spent almost 2 hours trying to achieve it via the browser and BurpSuite. I tried various techniques, strategies and different encoding but they did not work. I also tried to upload a reverse shell which did not work as well.</p>",
                        "<p>During all these failed attepts I learned other things even if they were not related to the completion of the challenge. But for sure the time spent for on the failed attempts was not wasted at all. I took my time to assess the website thoroughly, I did my research without rushing it. When needed I took a peek at the solution as long as it helped me to learn. The key is patience. Also, I was able to finish the challenge very quickly once I took my lunch break, seems my mind cleared.</p>"

                    ]
                }
            ]
        }
]
}
